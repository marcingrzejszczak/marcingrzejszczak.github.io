<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://toomuchcoding.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://toomuchcoding.com/" rel="alternate" type="text/html" /><updated>2022-01-03T17:51:53+01:00</updated><id>https://toomuchcoding.com/feed.xml</id><title type="html">TOO MUCH CODING</title><subtitle>A blog for coding addicts about Java, Groovy, Buzzword, Spring, Microservices, Buzzword</subtitle><author><name>Marcin Grzejszczak</name></author><entry><title type="html">Spring Cloud Sleuth 3.1.0 released</title><link href="https://toomuchcoding.com/articles/2021/12/02/spring-cloud-sleuth-3-1-0-released/" rel="alternate" type="text/html" title="Spring Cloud Sleuth 3.1.0 released" /><published>2021-12-02T09:30:00+01:00</published><updated>2021-12-02T09:30:00+01:00</updated><id>https://toomuchcoding.com/articles/2021/12/02/spring-cloud-sleuth-3-1-0-released</id><content type="html" xml:base="https://toomuchcoding.com/articles/2021/12/02/spring-cloud-sleuth-3-1-0-released/">&lt;p&gt;I’m super happy to announce the general availability of Spring Cloud Sleuth 3.1.0 within the 2021.0.0 (Jubilee) release train. We’ve added TONS of new features so please check out &lt;a href=&quot;https://spring.io/blog/2021/12/07/spring-cloud-sleuth-3-1-0-is-out&quot;&gt;this blog post at the Spring.io blog&lt;/a&gt; where we explain the details of this release. We would be more than happy to see your new tracing graphs! Visit our &lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-sleuth&quot;&gt;Gitter channel&lt;/a&gt; and paste your screenshots there!&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="observability" /><category term="tracing" /><category term="Spring Cloud Sleuth" /><category term="OpenZipkin" /><category term="Brave" /><category term="OpenTelemetry" /><category term="Tanzu Observability by Wavefront" /><summary type="html">I’m super happy to announce the general availability of Spring Cloud Sleuth 3.1.0 within the 2021.0.0 (Jubilee) release train. We’ve added TONS of new features so please check out this blog post at the Spring.io blog where we explain the details of this release. We would be more than happy to see your new tracing graphs! Visit our Gitter channel and paste your screenshots there!</summary></entry><entry><title type="html">Spring Cloud Sleuth 3.0.0 released</title><link href="https://toomuchcoding.com/articles/2021/01/04/spring-cloud-sleuth-3-0-0-released/" rel="alternate" type="text/html" title="Spring Cloud Sleuth 3.0.0 released" /><published>2021-01-04T16:11:00+01:00</published><updated>2021-01-04T16:11:00+01:00</updated><id>https://toomuchcoding.com/articles/2021/01/04/spring-cloud-sleuth-3-0-0-released</id><content type="html" xml:base="https://toomuchcoding.com/articles/2021/01/04/spring-cloud-sleuth-3-0-0-released/">&lt;p&gt;With the release of the Spring Cloud 2020.0.0 (aka Ilford) release train we’re more than happy to announce the general availability of Spring Cloud Sleuth 3.0.0. In this blog post I’ll describe the most notable released features (in order of their release dates).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;removes-deprecated-modules&quot;&gt;Removes Deprecated Modules&lt;/h2&gt;

&lt;p&gt;Removes ribbon, zuul, hystrix and Spring Cloud Aws support. Check this &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/pull/1533&quot;&gt;PR for more information&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;removes-zipkin-dependencies-from-core&quot;&gt;Removes Zipkin Dependencies from Core&lt;/h2&gt;

&lt;p&gt;Zipkin is no longer a part of core of Sleuth. You can check out more in &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/pull/1649&quot;&gt;this PR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;added-manual-reactor-instrumentation&quot;&gt;Added MANUAL Reactor Instrumentation&lt;/h2&gt;

&lt;p&gt;Up till now we’ve been supporting &lt;code&gt;ON_EACH&lt;/code&gt; and &lt;code&gt;ON_LAST&lt;/code&gt; Reactor instrumentation modes. That means that we would wrap every single Reactor operator (&lt;code&gt;ON_EACH&lt;/code&gt;) or the last operator (&lt;code&gt;ON_LAST&lt;/code&gt;). Those wrappings would do their best to put trace related entries in such a way that thread local based instrumentations would work out of the box (e.g. the MDC context, &lt;code&gt;Tracer.currentSpan()&lt;/code&gt; etc.). The problem was that on each wrapping downgraded performance drastically and worked most of the time. The on last operator wrapping downgraded performance a lot and worked sometimes. Both had their issues when &lt;code&gt;flatMap&lt;/code&gt; operators were called and thread switching took place.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/commit/bd149ce4a7c2154fe8526394d14b6ab89addd62e&quot;&gt;this commit&lt;/a&gt; we’ve introduced the manual way of instrumenting Reactor. We came to the conclusion that the thread local based paradigm doesn’t work well with Reactor. We can’t guess for the user what they really want to achieve and which operators should be wrapped. That’s why with the &lt;code&gt;MANUAL&lt;/code&gt; instrumentation mode you can use the &lt;code&gt;WebFluxSleuthOperators&lt;/code&gt; or &lt;code&gt;MessagingSleuthOperators&lt;/code&gt; to provide a lambda that should have the tracing context set in thread local.&lt;/p&gt;

&lt;h2 id=&quot;manual-reactor-instrumentation-default-in-spring-cloud-gateway&quot;&gt;MANUAL Reactor Instrumentation Default in Spring Cloud Gateway&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/issues/1710&quot;&gt;this issue&lt;/a&gt; we’re setting the manual instrumentation as the default one for Spring Cloud Gateway. The performance gets drastically improved and the tracing context still gets automatically propagated. If you need to do some customized logging etc. just use the &lt;code&gt;WebFluxSleuthOperators&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;remove-the-legacy-mdc-entries&quot;&gt;Remove The Legacy MDC Entries&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/issues/1221&quot;&gt;This issue&lt;/a&gt; introduces a change in the MDC keys (no more &lt;code&gt;X-B3-...&lt;/code&gt; entries in MDC).&lt;/p&gt;

&lt;p&gt;Before&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2019-06-27 19:36:11,774 INFO {X-B3-SpanId=e30b6a75bcff782b, X-B3-TraceId=e30b6a75bcff782b, X-Span-Export=false, spanExportable=false, spanId=e30b6a75bcff782b, traceId=e30b6a75bcff782b} some log!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2019-06-27 19:36:11,774 INFO {spanId=e30b6a75bcff782b, traceId=e30b6a75bcff782b} some log!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;code-refactoring&quot;&gt;Code Refactoring&lt;/h2&gt;

&lt;h3 id=&quot;removing-zipkin-starter&quot;&gt;Removing Zipkin Starter&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;spring-cloud-starter-zipkin&lt;/code&gt; dependency is removed. You need to add &lt;code&gt;spring-cloud-starter-sleuth&lt;/code&gt; and the &lt;code&gt;spring-cloud-sleuth-zipkin&lt;/code&gt; dependency.&lt;/p&gt;

&lt;h3 id=&quot;new-tracer-abstraction&quot;&gt;New Tracer Abstraction&lt;/h3&gt;

&lt;p&gt;OpenZipkin Brave was there in Sleuth’s code as the main abstraction since Sleuth 2.0.0. We’ve decided that with Sleuth 3.0.0 we can create our own abstraction (as we do in each Spring Cloud project) so that OpenZipkin Brave becomes one of the supported tracer implementations.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/pull/1757&quot;&gt;this PR&lt;/a&gt; we’ve introduced a new abstraction that wraps Brave. We also added support for another tracer - &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/issues/1497&quot;&gt;OpenTelemetry&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;aligning-with-spring-boot&quot;&gt;Aligning with Spring Boot&lt;/h3&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/pull/1762&quot;&gt;this PR&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/pull/1784&quot;&gt;that PR&lt;/a&gt; we’ve refactored Spring Cloud Sleuth to reflect Spring Boot’s module setup. We’ve split the project into API, instrumentations, auto-configurations etc. Also the documentation layout was updated to look in the same way the Spring Boot one does.&lt;/p&gt;

&lt;h2 id=&quot;opentelemetry-support&quot;&gt;OpenTelemetry support&lt;/h2&gt;

&lt;p&gt;Initially, with &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/commit/6e306e594d20361483fd19739e0f5f8e82354bf5&quot;&gt;this commit&lt;/a&gt;, we’ve added a &lt;code&gt;spring-cloud-sleuth-otel&lt;/code&gt; module inside Spring Cloud Sleuth that introduced &lt;a href=&quot;https://opentelemetry.io&quot;&gt;OpenTelemetry&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/pull/1802&quot;&gt;this PR&lt;/a&gt; we’ve decided to move Spring Cloud Sleuth and OpenTelemetry integration to an &lt;a href=&quot;https://github.com/spring-cloud-incubator/spring-cloud-sleuth-otel/&quot;&gt;incubator project&lt;/a&gt;. Once OpenTelemetry &amp;amp; OpenTelemetry Instrumentation projects become stable we will consider next steps.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-cloud-sleuth/docs/3.0.0/reference/html/&quot;&gt;Spring Cloud Sleuth 3.0.0 docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud-incubator/spring-cloud-sleuth-otel/&quot;&gt;Spring Cloud Sleuth OpenTelemetry project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring-cloud-incubator.github.io/spring-cloud-sleuth-otel/docs/current/reference/html/index.html&quot;&gt;Spring Cloud Sleuth OpenTelemetry docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes#spring-cloud-sleuth&quot;&gt;Spring Cloud Sleuth 3.0.0 release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/wiki/Spring-Cloud-Sleuth-3.0-Migration-Guide&quot;&gt;Spring Cloud Sleuth 3.0.0 migration guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch&quot;&gt;Stay in touch!&lt;/h2&gt;

&lt;p&gt;In case of any questions don’t hesitate to ping us&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth/&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;On &lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-sleuth&quot;&gt;Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;On &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-cloud-sleuth&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="observability" /><category term="tracing" /><category term="Spring Cloud Sleuth" /><category term="OpenZipkin" /><category term="Brave" /><category term="OpenTelemetry" /><summary type="html">With the release of the Spring Cloud 2020.0.0 (aka Ilford) release train we’re more than happy to announce the general availability of Spring Cloud Sleuth 3.0.0. In this blog post I’ll describe the most notable released features (in order of their release dates).</summary></entry><entry><title type="html">Spring Cloud Contract 3.0.0 released</title><link href="https://toomuchcoding.com/articles/2020/12/23/spring-cloud-contract-3-0-0-released/" rel="alternate" type="text/html" title="Spring Cloud Contract 3.0.0 released" /><published>2020-12-23T14:58:00+01:00</published><updated>2020-12-23T14:58:00+01:00</updated><id>https://toomuchcoding.com/articles/2020/12/23/spring-cloud-contract-3-0-0-released</id><content type="html" xml:base="https://toomuchcoding.com/articles/2020/12/23/spring-cloud-contract-3-0-0-released/">&lt;p&gt;With the release of the Spring Cloud 2020.0.0 (aka Ilford) release train we’re more than happy to announce the general availability of Spring Cloud Contract 3.0.0. In this blog post I’ll describe the most notable released features (in order of their release dates).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;incremental-test-generation-for-maven&quot;&gt;Incremental Test Generation for Maven&lt;/h2&gt;

&lt;p&gt;With the &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1361&quot;&gt;Incremental Test Generation for Maven&lt;/a&gt; we’re generating tests, stubs and stubs jar only if the contracts have changed. The feature is opt-out (enabled by default).&lt;/p&gt;

&lt;h2 id=&quot;resolves-credentials-from-settingsxml&quot;&gt;Resolves Credentials from settings.xml&lt;/h2&gt;

&lt;p&gt;With the &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1362&quot;&gt;
support to resolve credentials from settings.xml&lt;/a&gt; when using Aether based solution to fetch the contracts / stubs, we will reuse your &lt;code&gt;settings.xml&lt;/code&gt; credentials for the given server id (via the &lt;code&gt;stubrunner.server-id &lt;/code&gt; property).&lt;/p&gt;

&lt;h2 id=&quot;rewrite-groovy-to-java&quot;&gt;Rewrite Groovy to Java&lt;/h2&gt;

&lt;p&gt;It was fantastic to see so many people take part in rewriting the Spring Cloud Contract’s codebase from Groovy to Java. You can check &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/issues/1470&quot;&gt;this issue&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&quot;allow-to-extend-contract--stubs&quot;&gt;Allow to Extend Contract &amp;amp; Stubs&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/issues/1465&quot;&gt;this issue&lt;/a&gt; and this &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1466&quot;&gt;pull request&lt;/a&gt; we’ve added an option to provide &lt;code&gt;metadata&lt;/code&gt; to your contracts. Since we didn’t want to map all WireMock properties to the core of our Contract definition, we’ve allowed passing of metadata under the &lt;code&gt;wiremock&lt;/code&gt; key. The passed value can be an actual WireMock definition. We will map that part to the generated stub.&lt;/p&gt;

&lt;p&gt;Example of adding delays:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;Contract.make {
		request {
			method GET()
			url '/drunks'
		}
		response {
			status OK()
			body([
				count: 100
			])
			headers {
				contentType(&quot;application/json&quot;)
			}
		}
		metadata([wiremock: '''\
	{
		&quot;response&quot; : {
			&quot;delayDistribution&quot;: {
                    &quot;type&quot;: &quot;lognormal&quot;,
                    &quot;median&quot;: 80,
                    &quot;sigma&quot;: 0.4
            }
		}
	}
'''
		])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That also means that you can provide your own metadata. You can read more about this in the documentation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#contract-dsl-metadata&quot;&gt;existing metadata entries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/htmlsingle/#customization-wiremock-from-metadata&quot;&gt;customization of WireMock via metadata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/htmlsingle/#customization-wiremock-from-metadata-custom-processor&quot;&gt;customization of WireMock via metadata &amp;amp; custom post processor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-custom-mode-of-test-generation&quot;&gt;New [Custom] Mode of Test Generation&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1511&quot;&gt;this pr&lt;/a&gt; we’ve introduced a new &lt;code&gt;custom&lt;/code&gt; mode of test generation. You’re able to pass your own implementation of an HTTP client (you can reuse our &lt;code&gt;OkHttpHttpVerifier&lt;/code&gt;), thanks to which you can e.g. use HTTP/2. This was a prerequisite for the GRPC task. Thanks to the Spring Cloud Contract Workshops and the following refactoring of Spring Cloud Contract it was quite easy to add this feature, so thanks everyone involved then!&lt;/p&gt;

&lt;p&gt;You can read more about this in &lt;a href=&quot;https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#features-custom-mode&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;experimental-grpc-support&quot;&gt;Experimental GRPC Support&lt;/h2&gt;

&lt;p&gt;With the custom mode in place we could add the experimental GRPC support. Why experimental? Due to GRPC’s tweaking of the HTTP/2 Header frames, it’s impossible to assert the &lt;code&gt;grpc-status&lt;/code&gt; header. You can read more about the feature, the issue and workarounds in &lt;a href=&quot;https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#features-grpc&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here you can find an example of &lt;a href=&quot;https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_grpc&quot;&gt;GRPC producer&lt;/a&gt; and of a &lt;a href=&quot;https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/consumer_grpc&quot;&gt;GRPC consumer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;graphql-support&quot;&gt;GraphQL Support&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1506&quot;&gt;this PR&lt;/a&gt; we’ve added GraphQL support. Since GraphQL is essentially POST to and endpoint with specific body, you can create such a contract and set the proper metadata. You can read more about this in &lt;a href=&quot;https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#features-graphql&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here you can find an example of &lt;a href=&quot;https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_graphql&quot;&gt;GraphQL producer&lt;/a&gt; and of a &lt;a href=&quot;https://github.com/spring-cloud-samples/spring-cloud-contract-samples/blob/master/consumer/src/test/java/com/example/BeerControllerGraphQLTest.java&quot;&gt;GraphQL consumer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;stub-runner-boot-thin-jar&quot;&gt;Stub Runner Boot Thin JAR&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/issues/1385&quot;&gt;this issue&lt;/a&gt; we’ve migrated the Stub Runner Boot application to be a thin jar based application. Not only have we managed to lower the size of the produced artifact, but also we’re able via properties turn on profiles (e.g. &lt;code&gt;kafka&lt;/code&gt; or &lt;code&gt;rabbit&lt;/code&gt; profiles) that would fetch additional dependencies at runtime.&lt;/p&gt;

&lt;h2 id=&quot;messaging-polyglot-support&quot;&gt;Messaging Polyglot Support&lt;/h2&gt;

&lt;h3 id=&quot;pre-built-kafka-and-amqp-support&quot;&gt;Pre-built kafka and amqp support&lt;/h3&gt;

&lt;p&gt;With the thin jar rewrite and &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1472&quot;&gt;this PR&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/issues/1468&quot;&gt;this issue&lt;/a&gt; we’re adding support for Kafka and AMQP based solutions with the Docker images.&lt;/p&gt;

&lt;p&gt;You’ll have to have the following prerequisites met:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Middleware (e.g. RabbitMQ or Kafka) must be running before generating tests&lt;/li&gt;
  &lt;li&gt;Your contract needs to call a method &lt;code&gt;triggerMessage(...)&lt;/code&gt; with a String parameter that is equal to the contract’s label.&lt;/li&gt;
  &lt;li&gt;Your application needs to have a HTTP endpoint via which we can trigger a message&lt;/li&gt;
  &lt;li&gt;That endpoint should not be available on production (could be enabled via an environment variable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your contract can leverage the &lt;code&gt;kafka&lt;/code&gt; and &lt;code&gt;amqp&lt;/code&gt; metadata sections like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;description: 'Send a pong message in response to a ping message'
label: 'ping_pong'
input:
    # You have to provide the `triggerMessage` method with the `label`
    # as a String parameter of the method
    triggeredBy: 'triggerMessage(&quot;ping_pong&quot;)'
outputMessage:
    sentTo: 'output'
    body:
        message: 'pong'
metadata:
    amqp:
        outputMessage:
            connectToBroker:
                declareQueueWithName: &quot;queue&quot;
            messageProperties:
				receivedRoutingKey: '#'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;standalone-mode&quot;&gt;Standalone mode&lt;/h3&gt;

&lt;p&gt;There is legitimate reason to run your contract tests against existing middleware. Some
testing frameworks might give you false positive results - the test within your build
passes whereas on production the communication fails.&lt;/p&gt;

&lt;p&gt;In Spring Cloud Contract docker images we give an option to connect to existing middleware.
As presented in previous subsections we do support Kafka and RabbitMQ out of the box. However,
via &lt;a href=&quot;https://camel.apache.org/components/latest/index.html&quot;&gt;Apache Camel Components&lt;/a&gt; we can support
other middleware too. Let’s take a look at the following examples of usage.&lt;/p&gt;

&lt;p&gt;Example of a contract connecting to a real RabbitMQ instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;description: 'Send a pong message in response to a ping message'
label: 'standalone_ping_pong'
input:
  triggeredBy: 'triggerMessage(&quot;ping_pong&quot;)'
outputMessage:
  sentTo: 'rabbitmq:output'
  body:
    message: 'pong'
metadata:
  standalone:
    setup:
      options: rabbitmq:output?queue=output&amp;amp;routingKey=#
    outputMessage:
	  additionalOptions: routingKey=#&amp;amp;queue=output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read more about setting this up in &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1472&quot;&gt;this PR&lt;/a&gt; under the &lt;code&gt;Documentation of the feature with standalone mode (aka with running middleware)&lt;/code&gt; section.&lt;/p&gt;

&lt;h2 id=&quot;messaging-with-existing-middleware&quot;&gt;Messaging with Existing Middleware&lt;/h2&gt;

&lt;p&gt;Since it’s extremely easy to start a docker image with a broker via &lt;a href=&quot;https://testcontainers.org&quot;&gt;Testcontainers&lt;/a&gt;, we’re suggesting to slowly migrate your messaging tests to such an approach. From the perspective of Spring Cloud Contract it’s also better since we won’t need to replicate in our code the special cases of how frameworks behave when calling a real broker. Here you can find an example of how you can connect to a JMS broker on &lt;a href=&quot;https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_jms_middleware&quot;&gt;the producer side&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_jms_middleware&quot;&gt;here how you can consume it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;gradle-plugin-rewrite&quot;&gt;Gradle Plugin rewrite&lt;/h2&gt;

&lt;p&gt;This one is fully done by the one and only &lt;a href=&quot;https://github.com/shanman190&quot;&gt;shanman190&lt;/a&gt;. The whole work on the Gradle plugin was done by him so you should buy him a beer once you get to see him :) Anyways, there are various changes to the Gradle plugin that you can check out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1464&quot;&gt;Disable the stubs jar publication by default&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1558&quot;&gt;Attempt to keep Kotlin off the classpath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch&quot;&gt;Stay in touch!&lt;/h2&gt;

&lt;p&gt;In case of any questions don’t hesitate to ping us&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;On &lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-contract&quot;&gt;Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;On &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-cloud-contract&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="testing" /><category term="testowanie" /><category term="Spring Cloud Contract" /><summary type="html">With the release of the Spring Cloud 2020.0.0 (aka Ilford) release train we’re more than happy to announce the general availability of Spring Cloud Contract 3.0.0. In this blog post I’ll describe the most notable released features (in order of their release dates).</summary></entry><entry><title type="html">SmartTesting.pl</title><link href="https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl/" rel="alternate" type="text/html" title="SmartTesting.pl" /><published>2020-08-13T15:36:35+02:00</published><updated>2020-08-13T15:36:35+02:00</updated><id>https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl</id><content type="html" xml:base="https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl/">&lt;p&gt;Wraz z Olgą Maciaszek-Sharmą i Maćkiem Aniserowiczem jesteśmy bardzo szczęsliwi mogąc ogłosić, że ruszyliśmy ze szkoleniem na temat testowania o nazwie SmartTesting! Więcej szczegółów dostępnych na stronie &lt;a href=&quot;https://smarttesting.pl&quot;&gt;smarttesting.pl&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="testing" /><category term="testowanie" /><summary type="html">Wraz z Olgą Maciaszek-Sharmą i Maćkiem Aniserowiczem jesteśmy bardzo szczęsliwi mogąc ogłosić, że ruszyliśmy ze szkoleniem na temat testowania o nazwie SmartTesting! Więcej szczegółów dostępnych na stronie smarttesting.pl.</summary></entry><entry><title type="html">Spring Cloud Contract in the polyglot world</title><link href="https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world/" rel="alternate" type="text/html" title="Spring Cloud Contract in the polyglot world" /><published>2018-02-13T21:39:51+01:00</published><updated>2018-02-13T21:39:51+01:00</updated><id>https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world</id><content type="html" xml:base="https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world/">&lt;p&gt;I have just published a new article about Spring Cloud Contract in a polyglot world at the Spring Blog. &lt;a href=&quot;https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world&quot;&gt;You can check it out here!&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I have just published a new article about Spring Cloud Contract in a polyglot world at the Spring Blog. You can check it out here!.</summary></entry><entry><title type="html">Continuous Delivery of a Startup</title><link href="https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup/" rel="alternate" type="text/html" title="Continuous Delivery of a Startup" /><published>2017-12-03T13:11:22+01:00</published><updated>2017-12-03T13:11:22+01:00</updated><id>https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup</id><content type="html" xml:base="https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup/">&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;After a very long pause, finally I’ve managed to write a new blog post. It’s an interview with &lt;a href=&quot;https://twitter.com/jkubrynski&quot;&gt;Jakub Kubryński&lt;/a&gt; about Continuous Delivery of a Startup. It’s published as part of the &lt;a href=&quot;https://www.javaadvent.com/2017/12/cd-of-a-startup.html&quot;&gt;Java Advent Calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check it out &lt;a href=&quot;https://www.javaadvent.com/2017/12/cd-of-a-startup.html&quot;&gt;here!&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><category term="jenkins" /><category term="concourse" /><summary type="html">Hi! After a very long pause, finally I’ve managed to write a new blog post. It’s an interview with Jakub Kubryński about Continuous Delivery of a Startup. It’s published as part of the Java Advent Calendar. Check it out here!.</summary></entry><entry><title type="html">New Project - Spring Cloud Pipelines</title><link href="https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines/" rel="alternate" type="text/html" title="New Project - Spring Cloud Pipelines" /><published>2016-10-18T19:29:24+02:00</published><updated>2016-10-18T19:29:24+02:00</updated><id>https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines/">&lt;p&gt;I’ve just published an article at the Spring blog about the creation of a new project called &lt;a href=&quot;https://spring.io/blog/2016/10/18/spring-cloud-pipelines&quot;&gt;Spring Cloud Pipelines&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;

&lt;p&gt;Why a new project? Cause we’ve been all doing repetitive work. &lt;a href=&quot;https://toomuchcoding.com/blog/2015/09/26/microservice-deployment/&quot;&gt;Check out this post&lt;/a&gt; where I write about creation of
a deployment pipeline. Every company does it and wastes money and resource on it. In Pivotal
our goal is to give developers tools they need to deliver features as fast as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html&quot;&gt;Spring Cloud Pipelines&lt;/a&gt; gives you an opinionated deployment pipeline. You can use it straight away, you can modify it. Do whatever you please :)&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;p&gt;The repo is setup with a demo for Concourse CI and Jenkins. Read the docs how to set it up for each of those tools. The deployment is done via Cloud Foundry. For the sake of demo we’re using PCF Dev.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/&quot;&gt;Project page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html&quot;&gt;Project documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#concourse&quot;&gt;Concourse opinionated pipeline setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://concourse.ci&quot;&gt;Concourse Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#jenkins&quot;&gt;Jenkins opinionated pipeline setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jenkinsci/job-dsl-plugin/wiki&quot;&gt;Jenkins Job Dsl Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-pipelines&quot;&gt;Spring Cloud Pipelines Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-pipelines&quot;&gt;Spring Cloud Pipelines GitHub page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><category term="jenkins" /><category term="concourse" /><summary type="html">I’ve just published an article at the Spring blog about the creation of a new project called Spring Cloud Pipelines. Why? Why a new project? Cause we’ve been all doing repetitive work. Check out this post where I write about creation of a deployment pipeline. Every company does it and wastes money and resource on it. In Pivotal our goal is to give developers tools they need to deliver features as fast as possible. Spring Cloud Pipelines gives you an opinionated deployment pipeline. You can use it straight away, you can modify it. Do whatever you please :) Demo The repo is setup with a demo for Concourse CI and Jenkins. Read the docs how to set it up for each of those tools. The deployment is done via Cloud Foundry. For the sake of demo we’re using PCF Dev. Links Project page Project documentation Concourse opinionated pipeline setup Concourse Website Jenkins opinionated pipeline setup Jenkins Job Dsl Plugin Spring Cloud Pipelines Gitter Spring Cloud Pipelines GitHub page</summary></entry><entry><title type="html">Spring Cloud Contract Podcast</title><link href="https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast/" rel="alternate" type="text/html" title="Spring Cloud Contract Podcast" /><published>2016-10-07T23:14:36+02:00</published><updated>2016-10-07T23:14:36+02:00</updated><id>https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast/">&lt;p&gt;A podcast with Michael Cote and me about Spring Cloud Contract was just published. &lt;a href=&quot;https://soundcloud.com/pivotalconversations/037-microservices-governance-with-spring-cloud-contract-guest-marcin-grzejszczak&quot;&gt;You can check it out here!&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">A podcast with Michael Cote and me about Spring Cloud Contract was just published. You can check it out here!.</summary></entry><entry><title type="html">Spring Cloud Contract 1.0.0.RELEASE available!</title><link href="https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/" rel="alternate" type="text/html" title="Spring Cloud Contract 1.0.0.RELEASE available!" /><published>2016-09-24T20:39:25+02:00</published><updated>2016-09-24T20:39:25+02:00</updated><id>https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/">&lt;p&gt;I’ve just published an article at the Spring blog about &lt;a href=&quot;https://spring.io/blog/2016/09/23/spring-cloud-contract-1-0-0-release-is-available&quot;&gt;Spring Cloud Contract 1.0.0.RELEASE is available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal’s Spring Cloud branding. Let’s look at some numbers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first commit almost 2 years ago: &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/commit/dfaddaa98d645b818ba3947c9267ef7ac8ed9ba4&quot;&gt;2014-12-06 18:20:29 by Jakub Kubrynski&lt;/a&gt; - thanks to &lt;a href=&quot;https://codearte.eu&quot;&gt;Codearte&lt;/a&gt; the authors of &lt;a href=&quot;https://devskiller.com&quot;&gt;DevSkiller&lt;/a&gt; for their support!!!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/commits/master&quot;&gt;1.152 commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/graphs/contributors&quot;&gt;20 contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;whats-new-in-comparison-to-accurest&quot;&gt;What’s new in comparison to Accurest?&lt;/h2&gt;

&lt;p&gt;Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we’ve moved from Grapes to Aether to download stubs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_what_is_this_value_consumer_producer&quot;&gt;we generate fake data when you provide either consumer or producer in the DSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts&quot;&gt;Consumer Contract approach is there&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Contract is available on &lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2&quot;&gt;you can have more than one base class for your tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_additional_configuration&quot;&gt;Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the whole build was moved from Gradle to the standard Spring Cloud Maven setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_wiremock&quot;&gt;Spring Cloud Contract WireMock support&lt;/a&gt; and &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_generating_stubs_using_restdocs&quot;&gt;Spring Cloud Contract RestDocs&lt;/a&gt;. Thanks to the first one the integration with &lt;a href=&quot;https://wiremock.org&quot;&gt;WireMock&lt;/a&gt; is much more efficient and thanks to the latter you don’t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test.&lt;/p&gt;

&lt;p&gt;As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts&quot;&gt;Consumer Contract support&lt;/a&gt; and that &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2&quot;&gt;you can have more than one base class for your tests&lt;/a&gt;. Let’s take a closer look what’s there in the docs about them…&lt;/p&gt;

&lt;h3 id=&quot;consumer-contract-support&quot;&gt;Consumer Contract support&lt;/h3&gt;

&lt;p&gt;Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes.&lt;/p&gt;

&lt;h4 id=&quot;repo-structure&quot;&gt;Repo structure&lt;/h4&gt;

&lt;p&gt;Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── com
│   └── example
│       └── server
│           ├── client1
│           │   └── expectation.groovy
│           ├── client2
│           │   └── expectation.groovy
│           ├── client3
│           │   └── expectation.groovy
│           └── pom.xml
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    └── assembly
        └── contracts.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the under the slash-delimited groupid / artifact id folder (&lt;code&gt;com/example/server&lt;/code&gt;) you have expectations of the 3 consumers (&lt;code&gt;client1&lt;/code&gt;, &lt;code&gt;client2&lt;/code&gt; and &lt;code&gt;client3&lt;/code&gt;). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo.&lt;/p&gt;

&lt;p&gt;Example of a &lt;code&gt;pom.xml&lt;/code&gt; inside the &lt;code&gt;server&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

	&amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;server&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;

	&amp;lt;name&amp;gt;Server Stubs&amp;lt;/name&amp;gt;
	&amp;lt;description&amp;gt;POM used to install locally stubs for consumer side&amp;lt;/description&amp;gt;

	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;
		&amp;lt;relativePath /&amp;gt;
	&amp;lt;/parent&amp;gt;

	&amp;lt;properties&amp;gt;
		&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
		&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
		&amp;lt;spring-cloud-contract.version&amp;gt;1.0.1.BUILD-SNAPSHOT&amp;lt;/spring-cloud-contract.version&amp;gt;
		&amp;lt;spring-cloud-dependencies.version&amp;gt;Camden.BUILD-SNAPSHOT&amp;lt;/spring-cloud-dependencies.version&amp;gt;
	&amp;lt;/properties&amp;gt;

	&amp;lt;dependencyManagement&amp;gt;
		&amp;lt;dependencies&amp;gt;
			&amp;lt;dependency&amp;gt;
				&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
				&amp;lt;version&amp;gt;${spring-cloud-dependencies.version}&amp;lt;/version&amp;gt;
				&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
				&amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
			&amp;lt;/dependency&amp;gt;
		&amp;lt;/dependencies&amp;gt;
	&amp;lt;/dependencyManagement&amp;gt;

	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;version&amp;gt;${spring-cloud-contract.version}&amp;lt;/version&amp;gt;
				&amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt;
				&amp;lt;configuration&amp;gt;
					&amp;lt;!-- By default it would search under src/test/resources/ --&amp;gt;
					&amp;lt;contractsDirectory&amp;gt;${project.basedir}&amp;lt;/contractsDirectory&amp;gt;
				&amp;lt;/configuration&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;

	&amp;lt;repositories&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/repository&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/repository&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/repository&amp;gt;
	&amp;lt;/repositories&amp;gt;
	&amp;lt;pluginRepositories&amp;gt;
		&amp;lt;pluginRepository&amp;gt;
			&amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/pluginRepository&amp;gt;
		&amp;lt;pluginRepository&amp;gt;
			&amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/pluginRepository&amp;gt;
		&amp;lt;pluginRepository&amp;gt;
			&amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/pluginRepository&amp;gt;
	&amp;lt;/pluginRepositories&amp;gt;

&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; to locally install stubs of the producer project.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pom.xml&lt;/code&gt; in the root folder can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot;
		 xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

	&amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;

	&amp;lt;name&amp;gt;Contracts&amp;lt;/name&amp;gt;
	&amp;lt;description&amp;gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&amp;lt;/description&amp;gt;

	&amp;lt;properties&amp;gt;
		&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
	&amp;lt;/properties&amp;gt;

	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;executions&amp;gt;
					&amp;lt;execution&amp;gt;
						&amp;lt;id&amp;gt;contracts&amp;lt;/id&amp;gt;
						&amp;lt;phase&amp;gt;prepare-package&amp;lt;/phase&amp;gt;
						&amp;lt;goals&amp;gt;
							&amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
						&amp;lt;/goals&amp;gt;
						&amp;lt;configuration&amp;gt;
							&amp;lt;attach&amp;gt;true&amp;lt;/attach&amp;gt;
							&amp;lt;descriptor&amp;gt;${basedir}/src/assembly/contracts.xml&amp;lt;/descriptor&amp;gt;
							&amp;lt;!-- If you want an explicit classifier remove the following line --&amp;gt;
							&amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;
						&amp;lt;/configuration&amp;gt;
					&amp;lt;/execution&amp;gt;
				&amp;lt;/executions&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;

&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;assembly xmlns=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot;
		  xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot;
		  xsi:schemaLocation=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&amp;gt;
	&amp;lt;id&amp;gt;project&amp;lt;/id&amp;gt;
	&amp;lt;formats&amp;gt;
		&amp;lt;format&amp;gt;jar&amp;lt;/format&amp;gt;
	&amp;lt;/formats&amp;gt;
	&amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt;
	&amp;lt;fileSets&amp;gt;
		&amp;lt;fileSet&amp;gt;
			&amp;lt;directory&amp;gt;${project.basedir}&amp;lt;/directory&amp;gt;
			&amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;
			&amp;lt;useDefaultExcludes&amp;gt;true&amp;lt;/useDefaultExcludes&amp;gt;
			&amp;lt;excludes&amp;gt;
				&amp;lt;exclude&amp;gt;**/${project.build.directory}/**&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;mvnw&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;mvnw.cmd&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;.mvn/**&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;src/**&amp;lt;/exclude&amp;gt;
			&amp;lt;/excludes&amp;gt;
		&amp;lt;/fileSet&amp;gt;
	&amp;lt;/fileSets&amp;gt;
&amp;lt;/assembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;workflow&quot;&gt;Workflow&lt;/h4&gt;

&lt;p&gt;The workflow would look similar to the one presented in the &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_step_by_step_guide_to_cdc&quot;&gt;Step by step guide to CDC&lt;/a&gt;. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository.&lt;/p&gt;

&lt;h4 id=&quot;consumer&quot;&gt;Consumer&lt;/h4&gt;

&lt;p&gt;When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. &lt;code&gt;com/example/server&lt;/code&gt;) and runs &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; to install locally the stubs converted from the contracts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMEMBER! You need to have Maven installed locally&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;producer&quot;&gt;Producer&lt;/h4&gt;

&lt;p&gt;As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;contractsRepositoryUrl&amp;gt;https://link/to/your/nexus/or/artifactory/or/sth&amp;lt;/contractsRepositoryUrl&amp;gt;
		&amp;lt;contractDependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt;
		&amp;lt;/contractDependency&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this setup the JAR with groupid &lt;code&gt;com.example.standalone&lt;/code&gt; and artifactid contracts will be downloaded from &lt;code&gt;https://link/to/your/nexus/or/artifactory/or/sth&lt;/code&gt;. It will be then unpacked in a local temporary folder and contracts present under the &lt;code&gt;com/example/server&lt;/code&gt; will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done.&lt;/p&gt;

&lt;p&gt;The rest of the flow looks the same.&lt;/p&gt;

&lt;h3 id=&quot;more-than-one-base-class&quot;&gt;More than one base class&lt;/h3&gt;

&lt;p&gt;That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That’s why we’ve added a possibility to map a contract to its test base class.&lt;/p&gt;

&lt;h4 id=&quot;gradle&quot;&gt;Gradle&lt;/h4&gt;

&lt;p&gt;If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;follow a convention by providing the &lt;code&gt;packageWithBaseClasses&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;provide explicit mapping via &lt;code&gt;baseClassMappings&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;convention&quot;&gt;Convention&lt;/h5&gt;

&lt;p&gt;The convention is such that if you have a contract under e.g. &lt;code&gt;src/test/resources/contract/foo/bar/baz/&lt;/code&gt; and provide the value of the &lt;code&gt;packageWithBaseClasses&lt;/code&gt; property to &lt;code&gt;com.example.base&lt;/code&gt; then we will assume that there is a &lt;code&gt;BarBazBase&lt;/code&gt; class under &lt;code&gt;com.example.base&lt;/code&gt; package. In other words we take last two parts of package if they exist and form a class with a &lt;code&gt;Base&lt;/code&gt; suffix. Takes precedence over &lt;code&gt;baseClassForTests&lt;/code&gt;. Example of usage in the contracts closure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packageWithBaseClasses = 'com.example.base'
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;mapping&quot;&gt;Mapping&lt;/h5&gt;

&lt;p&gt;You can manually map a regular expression of the contract’s &lt;em&gt;package&lt;/em&gt; (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseClassForTests = &quot;com.example.FooBase&quot;
baseClassMappings {
	baseClassMapping('.*com.*', 'com.example.ComBase')
	baseClassMapping('.*bar.*':'com.example.BarBase')
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s assume that you have contracts under&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;src/test/resources/contract/com/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;src/test/resources/contract/foo/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By providing the &lt;code&gt;baseClassForTests&lt;/code&gt; we have a fallback in case mapping didn’t succeed (you could also provide the &lt;code&gt;packageWithBaseClasses&lt;/code&gt; as fallback). That way the tests generated from &lt;code&gt;src/test/resources/contract/com/&lt;/code&gt; contracts will be extending the &lt;code&gt;com.example.ComBase&lt;/code&gt; whereas the rest of tests will extend &lt;code&gt;com.example.FooBase&lt;/code&gt; cause they don’t match the base class mapping for &lt;code&gt;bar&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4 id=&quot;maven&quot;&gt;Maven&lt;/h4&gt;

&lt;p&gt;Let’s now look how it looks like for Maven.&lt;/p&gt;

&lt;h5 id=&quot;convention-1&quot;&gt;Convention&lt;/h5&gt;

&lt;p&gt;To accomplish the same result as the one presented for Gradle you’d have to set your configuration like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;packageWithBaseClasses&amp;gt;com.example.base&amp;lt;/packageWithBaseClasses&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;mapping-1&quot;&gt;Mapping&lt;/h5&gt;

&lt;p&gt;You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list &lt;code&gt;baseClassMappings&lt;/code&gt; of &lt;code&gt;baseClassMapping&lt;/code&gt; that takes a &lt;code&gt;contractPackageRegex&lt;/code&gt; to &lt;code&gt;baseClassFQN&lt;/code&gt; mapping. Let’s take a look at the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;baseClassForTests&amp;gt;com.example.FooBase&amp;lt;/baseClassForTests&amp;gt;
		&amp;lt;baseClassMappings&amp;gt;
			&amp;lt;baseClassMapping&amp;gt;
				&amp;lt;contractPackageRegex&amp;gt;.*com.*&amp;lt;/contractPackageRegex&amp;gt;
				&amp;lt;baseClassFQN&amp;gt;com.example.ComBase&amp;lt;/baseClassFQN&amp;gt;
			&amp;lt;/baseClassMapping&amp;gt;
  			&amp;lt;baseClassMapping&amp;gt;
  				&amp;lt;contractPackageRegex&amp;gt;.*bar.*&amp;lt;/contractPackageRegex&amp;gt;
  				&amp;lt;baseClassFQN&amp;gt;com.example.BarBase&amp;lt;/baseClassFQN&amp;gt;
  			&amp;lt;/baseClassMapping&amp;gt;
		&amp;lt;/baseClassMappings&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post we’ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We’ve also checked some history around Accurest to Spring Cloud Contract migration.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;Here you can find interesting links related to Spring Cloud Contract Verifier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/&quot;&gt;Spring Cloud Contract Github Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/&quot;&gt;Spring Cloud Contract Main project page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html&quot;&gt;Spring Cloud Contract Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_stub_runner&quot;&gt;Spring Cloud Contract Stub Runner Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-contract&quot;&gt;Spring Cloud Contract Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/&quot;&gt;Spring Cloud Contract Maven Plugin Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I’ve just published an article at the Spring blog about Spring Cloud Contract 1.0.0.RELEASE is available. I’m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal’s Spring Cloud branding. Let’s look at some numbers: first commit almost 2 years ago: 2014-12-06 18:20:29 by Jakub Kubrynski - thanks to Codearte the authors of DevSkiller for their support!!! 1.152 commits 20 contributors That’s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract. What’s new in comparison to Accurest? Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes? we’ve moved from Grapes to Aether to download stubs we generate fake data when you provide either consumer or producer in the DSL Consumer Contract approach is there Spring Cloud Contract is available on start.spring.io you can have more than one base class for your tests Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud the whole build was moved from Gradle to the standard Spring Cloud Maven setup These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of Spring Cloud Contract WireMock support and Spring Cloud Contract RestDocs. Thanks to the first one the integration with WireMock is much more efficient and thanks to the latter you don’t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test. As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the Consumer Contract support and that you can have more than one base class for your tests. Let’s take a closer look what’s there in the docs about them… Consumer Contract support Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes. Repo structure Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here: ├── com │ └── example │ └── server │ ├── client1 │ │ └── expectation.groovy │ ├── client2 │ │ └── expectation.groovy │ ├── client3 │ │ └── expectation.groovy │ └── pom.xml ├── mvnw ├── mvnw.cmd ├── pom.xml └── src └── assembly └── contracts.xml As you can see the under the slash-delimited groupid / artifact id folder (com/example/server) you have expectations of the 3 consumers (client1, client2 and client3). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo. Example of a pom.xml inside the server folder. &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;Server Stubs&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;POM used to install locally stubs for consumer side&amp;lt;/description&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;relativePath /&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;spring-cloud-contract.version&amp;gt;1.0.1.BUILD-SNAPSHOT&amp;lt;/spring-cloud-contract.version&amp;gt; &amp;lt;spring-cloud-dependencies.version&amp;gt;Camden.BUILD-SNAPSHOT&amp;lt;/spring-cloud-dependencies.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-dependencies.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-contract.version}&amp;lt;/version&amp;gt; &amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!-- By default it would search under src/test/resources/ --&amp;gt; &amp;lt;contractsDirectory&amp;gt;${project.basedir}&amp;lt;/contractsDirectory&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;pluginRepositories&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;/pluginRepositories&amp;gt; &amp;lt;/project&amp;gt; As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run mvn clean install -DskipTests to locally install stubs of the producer project. The pom.xml in the root folder can look like this: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;Contracts&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&amp;lt;/description&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;contracts&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;prepare-package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;attach&amp;gt;true&amp;lt;/attach&amp;gt; &amp;lt;descriptor&amp;gt;${basedir}/src/assembly/contracts.xml&amp;lt;/descriptor&amp;gt; &amp;lt;!-- If you want an explicit classifier remove the following line --&amp;gt; &amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;/project&amp;gt; It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here: &amp;lt;assembly xmlns=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&amp;gt; &amp;lt;id&amp;gt;project&amp;lt;/id&amp;gt; &amp;lt;formats&amp;gt; &amp;lt;format&amp;gt;jar&amp;lt;/format&amp;gt; &amp;lt;/formats&amp;gt; &amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt; &amp;lt;fileSets&amp;gt; &amp;lt;fileSet&amp;gt; &amp;lt;directory&amp;gt;${project.basedir}&amp;lt;/directory&amp;gt; &amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt; &amp;lt;useDefaultExcludes&amp;gt;true&amp;lt;/useDefaultExcludes&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;exclude&amp;gt;**/${project.build.directory}/**&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;mvnw&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;mvnw.cmd&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;.mvn/**&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;src/**&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/fileSet&amp;gt; &amp;lt;/fileSets&amp;gt; &amp;lt;/assembly&amp;gt; Workflow The workflow would look similar to the one presented in the Step by step guide to CDC. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository. Consumer When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. com/example/server) and runs mvn clean install -DskipTests to install locally the stubs converted from the contracts. REMEMBER! You need to have Maven installed locally Producer As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;contractsRepositoryUrl&amp;gt;https://link/to/your/nexus/or/artifactory/or/sth&amp;lt;/contractsRepositoryUrl&amp;gt; &amp;lt;contractDependency&amp;gt; &amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt; &amp;lt;/contractDependency&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; With this setup the JAR with groupid com.example.standalone and artifactid contracts will be downloaded from https://link/to/your/nexus/or/artifactory/or/sth. It will be then unpacked in a local temporary folder and contracts present under the com/example/server will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done. The rest of the flow looks the same. More than one base class That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That’s why we’ve added a possibility to map a contract to its test base class. Gradle If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options: follow a convention by providing the packageWithBaseClasses provide explicit mapping via baseClassMappings Convention The convention is such that if you have a contract under e.g. src/test/resources/contract/foo/bar/baz/ and provide the value of the packageWithBaseClasses property to com.example.base then we will assume that there is a BarBazBase class under com.example.base package. In other words we take last two parts of package if they exist and form a class with a Base suffix. Takes precedence over baseClassForTests. Example of usage in the contracts closure: packageWithBaseClasses = 'com.example.base' Mapping You can manually map a regular expression of the contract’s package (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example: baseClassForTests = &quot;com.example.FooBase&quot; baseClassMappings { baseClassMapping('.*com.*', 'com.example.ComBase') baseClassMapping('.*bar.*':'com.example.BarBase') } Let’s assume that you have contracts under src/test/resources/contract/com/ src/test/resources/contract/foo/ By providing the baseClassForTests we have a fallback in case mapping didn’t succeed (you could also provide the packageWithBaseClasses as fallback). That way the tests generated from src/test/resources/contract/com/ contracts will be extending the com.example.ComBase whereas the rest of tests will extend com.example.FooBase cause they don’t match the base class mapping for bar folder. Maven Let’s now look how it looks like for Maven. Convention To accomplish the same result as the one presented for Gradle you’d have to set your configuration like this: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;packageWithBaseClasses&amp;gt;com.example.base&amp;lt;/packageWithBaseClasses&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Mapping You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list baseClassMappings of baseClassMapping that takes a contractPackageRegex to baseClassFQN mapping. Let’s take a look at the following example: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;baseClassForTests&amp;gt;com.example.FooBase&amp;lt;/baseClassForTests&amp;gt; &amp;lt;baseClassMappings&amp;gt; &amp;lt;baseClassMapping&amp;gt; &amp;lt;contractPackageRegex&amp;gt;.*com.*&amp;lt;/contractPackageRegex&amp;gt; &amp;lt;baseClassFQN&amp;gt;com.example.ComBase&amp;lt;/baseClassFQN&amp;gt; &amp;lt;/baseClassMapping&amp;gt; &amp;lt;baseClassMapping&amp;gt; &amp;lt;contractPackageRegex&amp;gt;.*bar.*&amp;lt;/contractPackageRegex&amp;gt; &amp;lt;baseClassFQN&amp;gt;com.example.BarBase&amp;lt;/baseClassFQN&amp;gt; &amp;lt;/baseClassMapping&amp;gt; &amp;lt;/baseClassMappings&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Summary In this blog post we’ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We’ve also checked some history around Accurest to Spring Cloud Contract migration. Links Here you can find interesting links related to Spring Cloud Contract Verifier: Spring Cloud Contract Github Repository Spring Cloud Contract Main project page Spring Cloud Contract Documentation Spring Cloud Contract Stub Runner Documentation Spring Cloud Contract Gitter Spring Cloud Contract Maven Plugin Documentation</summary></entry><entry><title type="html">Spring Cloud Contract 1.0.0.M1 Released</title><link href="https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/" rel="alternate" type="text/html" title="Spring Cloud Contract 1.0.0.M1 Released" /><published>2016-07-25T17:07:39+02:00</published><updated>2016-07-25T17:07:39+02:00</updated><id>https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/">&lt;p&gt;I’ve just published an article at the Spring blog about &lt;a href=&quot;https://spring.io/blog/2016/07/25/spring-cloud-contract-1-0-0-m1-released&quot;&gt;Spring Cloud Contract 1.0.0.M1 Release&lt;/a&gt;. Check out the new project formerly known as Accurest!&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I’ve just published an article at the Spring blog about Spring Cloud Contract 1.0.0.M1 Release. Check out the new project formerly known as Accurest!</summary></entry></feed>