<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://toomuchcoding.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://toomuchcoding.com/" rel="alternate" type="text/html" /><updated>2020-12-07T17:43:49+01:00</updated><id>https://toomuchcoding.com/feed.xml</id><title type="html">TOO MUCH CODING</title><subtitle>A blog for coding addicts about Java, Groovy, Buzzword, Spring, Microservices, Buzzword</subtitle><author><name>Marcin Grzejszczak</name></author><entry><title type="html">SmartTesting.pl</title><link href="https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl/" rel="alternate" type="text/html" title="SmartTesting.pl" /><published>2020-08-13T15:36:35+02:00</published><updated>2020-08-13T15:36:35+02:00</updated><id>https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl</id><content type="html" xml:base="https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl/">&lt;p&gt;Wraz z Olgą Maciaszek-Sharmą i Maćkiem Aniserowiczem jesteśmy bardzo szczęsliwi mogąc ogłosić, że ruszyliśmy ze szkoleniem na temat testowania o nazwie SmartTesting! Więcej szczegółów dostępnych na stronie &lt;a href=&quot;https://smarttesting.pl&quot;&gt;smarttesting.pl&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="testing" /><category term="testowanie" /><summary type="html">Wraz z Olgą Maciaszek-Sharmą i Maćkiem Aniserowiczem jesteśmy bardzo szczęsliwi mogąc ogłosić, że ruszyliśmy ze szkoleniem na temat testowania o nazwie SmartTesting! Więcej szczegółów dostępnych na stronie smarttesting.pl.</summary></entry><entry><title type="html">Spring Cloud Contract in the polyglot world</title><link href="https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world/" rel="alternate" type="text/html" title="Spring Cloud Contract in the polyglot world" /><published>2018-02-13T21:39:51+01:00</published><updated>2018-02-13T21:39:51+01:00</updated><id>https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world</id><content type="html" xml:base="https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world/">&lt;p&gt;I have just published a new article about Spring Cloud Contract in a polyglot world at the Spring Blog. &lt;a href=&quot;https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world&quot;&gt;You can check it out here!&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I have just published a new article about Spring Cloud Contract in a polyglot world at the Spring Blog. You can check it out here!.</summary></entry><entry><title type="html">Continuous Delivery of a Startup</title><link href="https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup/" rel="alternate" type="text/html" title="Continuous Delivery of a Startup" /><published>2017-12-03T13:11:22+01:00</published><updated>2017-12-03T13:11:22+01:00</updated><id>https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup</id><content type="html" xml:base="https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup/">&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;After a very long pause, finally I’ve managed to write a new blog post. It’s an interview with &lt;a href=&quot;https://twitter.com/jkubrynski&quot;&gt;Jakub Kubryński&lt;/a&gt; about Continuous Delivery of a Startup. It’s published as part of the &lt;a href=&quot;https://www.javaadvent.com/2017/12/cd-of-a-startup.html&quot;&gt;Java Advent Calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check it out &lt;a href=&quot;https://www.javaadvent.com/2017/12/cd-of-a-startup.html&quot;&gt;here!&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><category term="jenkins" /><category term="concourse" /><summary type="html">Hi! After a very long pause, finally I’ve managed to write a new blog post. It’s an interview with Jakub Kubryński about Continuous Delivery of a Startup. It’s published as part of the Java Advent Calendar. Check it out here!.</summary></entry><entry><title type="html">New Project - Spring Cloud Pipelines</title><link href="https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines/" rel="alternate" type="text/html" title="New Project - Spring Cloud Pipelines" /><published>2016-10-18T19:29:24+02:00</published><updated>2016-10-18T19:29:24+02:00</updated><id>https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines/">&lt;p&gt;I’ve just published an article at the Spring blog about the creation of a new project called &lt;a href=&quot;https://spring.io/blog/2016/10/18/spring-cloud-pipelines&quot;&gt;Spring Cloud Pipelines&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;

&lt;p&gt;Why a new project? Cause we’ve been all doing repetitive work. &lt;a href=&quot;https://toomuchcoding.com/blog/2015/09/26/microservice-deployment/&quot;&gt;Check out this post&lt;/a&gt; where I write about creation of
a deployment pipeline. Every company does it and wastes money and resource on it. In Pivotal
our goal is to give developers tools they need to deliver features as fast as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html&quot;&gt;Spring Cloud Pipelines&lt;/a&gt; gives you an opinionated deployment pipeline. You can use it straight away, you can modify it. Do whatever you please :)&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;p&gt;The repo is setup with a demo for Concourse CI and Jenkins. Read the docs how to set it up for each of those tools. The deployment is done via Cloud Foundry. For the sake of demo we’re using PCF Dev.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/&quot;&gt;Project page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html&quot;&gt;Project documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#concourse&quot;&gt;Concourse opinionated pipeline setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://concourse.ci&quot;&gt;Concourse Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#jenkins&quot;&gt;Jenkins opinionated pipeline setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jenkinsci/job-dsl-plugin/wiki&quot;&gt;Jenkins Job Dsl Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-pipelines&quot;&gt;Spring Cloud Pipelines Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-pipelines&quot;&gt;Spring Cloud Pipelines GitHub page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><category term="jenkins" /><category term="concourse" /><summary type="html">I’ve just published an article at the Spring blog about the creation of a new project called Spring Cloud Pipelines. Why? Why a new project? Cause we’ve been all doing repetitive work. Check out this post where I write about creation of a deployment pipeline. Every company does it and wastes money and resource on it. In Pivotal our goal is to give developers tools they need to deliver features as fast as possible. Spring Cloud Pipelines gives you an opinionated deployment pipeline. You can use it straight away, you can modify it. Do whatever you please :) Demo The repo is setup with a demo for Concourse CI and Jenkins. Read the docs how to set it up for each of those tools. The deployment is done via Cloud Foundry. For the sake of demo we’re using PCF Dev. Links Project page Project documentation Concourse opinionated pipeline setup Concourse Website Jenkins opinionated pipeline setup Jenkins Job Dsl Plugin Spring Cloud Pipelines Gitter Spring Cloud Pipelines GitHub page</summary></entry><entry><title type="html">Spring Cloud Contract Podcast</title><link href="https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast/" rel="alternate" type="text/html" title="Spring Cloud Contract Podcast" /><published>2016-10-07T23:14:36+02:00</published><updated>2016-10-07T23:14:36+02:00</updated><id>https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast/">&lt;p&gt;A podcast with Michael Cote and me about Spring Cloud Contract was just published. &lt;a href=&quot;https://soundcloud.com/pivotalconversations/037-microservices-governance-with-spring-cloud-contract-guest-marcin-grzejszczak&quot;&gt;You can check it out here!&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">A podcast with Michael Cote and me about Spring Cloud Contract was just published. You can check it out here!.</summary></entry><entry><title type="html">Spring Cloud Contract 1.0.0.RELEASE available!</title><link href="https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/" rel="alternate" type="text/html" title="Spring Cloud Contract 1.0.0.RELEASE available!" /><published>2016-09-24T20:39:25+02:00</published><updated>2016-09-24T20:39:25+02:00</updated><id>https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/">&lt;p&gt;I’ve just published an article at the Spring blog about &lt;a href=&quot;https://spring.io/blog/2016/09/23/spring-cloud-contract-1-0-0-release-is-available&quot;&gt;Spring Cloud Contract 1.0.0.RELEASE is available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal’s Spring Cloud branding. Let’s look at some numbers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first commit almost 2 years ago: &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/commit/dfaddaa98d645b818ba3947c9267ef7ac8ed9ba4&quot;&gt;2014-12-06 18:20:29 by Jakub Kubrynski&lt;/a&gt; - thanks to &lt;a href=&quot;https://codearte.eu&quot;&gt;Codearte&lt;/a&gt; the authors of &lt;a href=&quot;https://devskiller.com&quot;&gt;DevSkiller&lt;/a&gt; for their support!!!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/commits/master&quot;&gt;1.152 commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/graphs/contributors&quot;&gt;20 contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;whats-new-in-comparison-to-accurest&quot;&gt;What’s new in comparison to Accurest?&lt;/h2&gt;

&lt;p&gt;Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we’ve moved from Grapes to Aether to download stubs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_what_is_this_value_consumer_producer&quot;&gt;we generate fake data when you provide either consumer or producer in the DSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts&quot;&gt;Consumer Contract approach is there&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Contract is available on &lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2&quot;&gt;you can have more than one base class for your tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_additional_configuration&quot;&gt;Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the whole build was moved from Gradle to the standard Spring Cloud Maven setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_wiremock&quot;&gt;Spring Cloud Contract WireMock support&lt;/a&gt; and &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_generating_stubs_using_restdocs&quot;&gt;Spring Cloud Contract RestDocs&lt;/a&gt;. Thanks to the first one the integration with &lt;a href=&quot;https://wiremock.org&quot;&gt;WireMock&lt;/a&gt; is much more efficient and thanks to the latter you don’t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test.&lt;/p&gt;

&lt;p&gt;As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts&quot;&gt;Consumer Contract support&lt;/a&gt; and that &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2&quot;&gt;you can have more than one base class for your tests&lt;/a&gt;. Let’s take a closer look what’s there in the docs about them…&lt;/p&gt;

&lt;h3 id=&quot;consumer-contract-support&quot;&gt;Consumer Contract support&lt;/h3&gt;

&lt;p&gt;Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes.&lt;/p&gt;

&lt;h4 id=&quot;repo-structure&quot;&gt;Repo structure&lt;/h4&gt;

&lt;p&gt;Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── com
│   └── example
│       └── server
│           ├── client1
│           │   └── expectation.groovy
│           ├── client2
│           │   └── expectation.groovy
│           ├── client3
│           │   └── expectation.groovy
│           └── pom.xml
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    └── assembly
        └── contracts.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the under the slash-delimited groupid / artifact id folder (&lt;code&gt;com/example/server&lt;/code&gt;) you have expectations of the 3 consumers (&lt;code&gt;client1&lt;/code&gt;, &lt;code&gt;client2&lt;/code&gt; and &lt;code&gt;client3&lt;/code&gt;). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo.&lt;/p&gt;

&lt;p&gt;Example of a &lt;code&gt;pom.xml&lt;/code&gt; inside the &lt;code&gt;server&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

	&amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;server&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;

	&amp;lt;name&amp;gt;Server Stubs&amp;lt;/name&amp;gt;
	&amp;lt;description&amp;gt;POM used to install locally stubs for consumer side&amp;lt;/description&amp;gt;

	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;
		&amp;lt;relativePath /&amp;gt;
	&amp;lt;/parent&amp;gt;

	&amp;lt;properties&amp;gt;
		&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
		&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
		&amp;lt;spring-cloud-contract.version&amp;gt;1.0.1.BUILD-SNAPSHOT&amp;lt;/spring-cloud-contract.version&amp;gt;
		&amp;lt;spring-cloud-dependencies.version&amp;gt;Camden.BUILD-SNAPSHOT&amp;lt;/spring-cloud-dependencies.version&amp;gt;
	&amp;lt;/properties&amp;gt;

	&amp;lt;dependencyManagement&amp;gt;
		&amp;lt;dependencies&amp;gt;
			&amp;lt;dependency&amp;gt;
				&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
				&amp;lt;version&amp;gt;${spring-cloud-dependencies.version}&amp;lt;/version&amp;gt;
				&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
				&amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
			&amp;lt;/dependency&amp;gt;
		&amp;lt;/dependencies&amp;gt;
	&amp;lt;/dependencyManagement&amp;gt;

	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;version&amp;gt;${spring-cloud-contract.version}&amp;lt;/version&amp;gt;
				&amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt;
				&amp;lt;configuration&amp;gt;
					&amp;lt;!-- By default it would search under src/test/resources/ --&amp;gt;
					&amp;lt;contractsDirectory&amp;gt;${project.basedir}&amp;lt;/contractsDirectory&amp;gt;
				&amp;lt;/configuration&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;

	&amp;lt;repositories&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/repository&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/repository&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/repository&amp;gt;
	&amp;lt;/repositories&amp;gt;
	&amp;lt;pluginRepositories&amp;gt;
		&amp;lt;pluginRepository&amp;gt;
			&amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/pluginRepository&amp;gt;
		&amp;lt;pluginRepository&amp;gt;
			&amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/pluginRepository&amp;gt;
		&amp;lt;pluginRepository&amp;gt;
			&amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt;
			&amp;lt;snapshots&amp;gt;
				&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
			&amp;lt;/snapshots&amp;gt;
		&amp;lt;/pluginRepository&amp;gt;
	&amp;lt;/pluginRepositories&amp;gt;

&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; to locally install stubs of the producer project.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pom.xml&lt;/code&gt; in the root folder can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot;
		 xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

	&amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;

	&amp;lt;name&amp;gt;Contracts&amp;lt;/name&amp;gt;
	&amp;lt;description&amp;gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&amp;lt;/description&amp;gt;

	&amp;lt;properties&amp;gt;
		&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
	&amp;lt;/properties&amp;gt;

	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;executions&amp;gt;
					&amp;lt;execution&amp;gt;
						&amp;lt;id&amp;gt;contracts&amp;lt;/id&amp;gt;
						&amp;lt;phase&amp;gt;prepare-package&amp;lt;/phase&amp;gt;
						&amp;lt;goals&amp;gt;
							&amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
						&amp;lt;/goals&amp;gt;
						&amp;lt;configuration&amp;gt;
							&amp;lt;attach&amp;gt;true&amp;lt;/attach&amp;gt;
							&amp;lt;descriptor&amp;gt;${basedir}/src/assembly/contracts.xml&amp;lt;/descriptor&amp;gt;
							&amp;lt;!-- If you want an explicit classifier remove the following line --&amp;gt;
							&amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;
						&amp;lt;/configuration&amp;gt;
					&amp;lt;/execution&amp;gt;
				&amp;lt;/executions&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;

&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;assembly xmlns=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot;
		  xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot;
		  xsi:schemaLocation=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&amp;gt;
	&amp;lt;id&amp;gt;project&amp;lt;/id&amp;gt;
	&amp;lt;formats&amp;gt;
		&amp;lt;format&amp;gt;jar&amp;lt;/format&amp;gt;
	&amp;lt;/formats&amp;gt;
	&amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt;
	&amp;lt;fileSets&amp;gt;
		&amp;lt;fileSet&amp;gt;
			&amp;lt;directory&amp;gt;${project.basedir}&amp;lt;/directory&amp;gt;
			&amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;
			&amp;lt;useDefaultExcludes&amp;gt;true&amp;lt;/useDefaultExcludes&amp;gt;
			&amp;lt;excludes&amp;gt;
				&amp;lt;exclude&amp;gt;**/${project.build.directory}/**&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;mvnw&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;mvnw.cmd&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;.mvn/**&amp;lt;/exclude&amp;gt;
				&amp;lt;exclude&amp;gt;src/**&amp;lt;/exclude&amp;gt;
			&amp;lt;/excludes&amp;gt;
		&amp;lt;/fileSet&amp;gt;
	&amp;lt;/fileSets&amp;gt;
&amp;lt;/assembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;workflow&quot;&gt;Workflow&lt;/h4&gt;

&lt;p&gt;The workflow would look similar to the one presented in the &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_step_by_step_guide_to_cdc&quot;&gt;Step by step guide to CDC&lt;/a&gt;. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository.&lt;/p&gt;

&lt;h4 id=&quot;consumer&quot;&gt;Consumer&lt;/h4&gt;

&lt;p&gt;When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. &lt;code&gt;com/example/server&lt;/code&gt;) and runs &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; to install locally the stubs converted from the contracts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMEMBER! You need to have Maven installed locally&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;producer&quot;&gt;Producer&lt;/h4&gt;

&lt;p&gt;As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;contractsRepositoryUrl&amp;gt;https://link/to/your/nexus/or/artifactory/or/sth&amp;lt;/contractsRepositoryUrl&amp;gt;
		&amp;lt;contractDependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt;
		&amp;lt;/contractDependency&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this setup the JAR with groupid &lt;code&gt;com.example.standalone&lt;/code&gt; and artifactid contracts will be downloaded from &lt;code&gt;https://link/to/your/nexus/or/artifactory/or/sth&lt;/code&gt;. It will be then unpacked in a local temporary folder and contracts present under the &lt;code&gt;com/example/server&lt;/code&gt; will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done.&lt;/p&gt;

&lt;p&gt;The rest of the flow looks the same.&lt;/p&gt;

&lt;h3 id=&quot;more-than-one-base-class&quot;&gt;More than one base class&lt;/h3&gt;

&lt;p&gt;That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That’s why we’ve added a possibility to map a contract to its test base class.&lt;/p&gt;

&lt;h4 id=&quot;gradle&quot;&gt;Gradle&lt;/h4&gt;

&lt;p&gt;If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;follow a convention by providing the &lt;code&gt;packageWithBaseClasses&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;provide explicit mapping via &lt;code&gt;baseClassMappings&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;convention&quot;&gt;Convention&lt;/h5&gt;

&lt;p&gt;The convention is such that if you have a contract under e.g. &lt;code&gt;src/test/resources/contract/foo/bar/baz/&lt;/code&gt; and provide the value of the &lt;code&gt;packageWithBaseClasses&lt;/code&gt; property to &lt;code&gt;com.example.base&lt;/code&gt; then we will assume that there is a &lt;code&gt;BarBazBase&lt;/code&gt; class under &lt;code&gt;com.example.base&lt;/code&gt; package. In other words we take last two parts of package if they exist and form a class with a &lt;code&gt;Base&lt;/code&gt; suffix. Takes precedence over &lt;code&gt;baseClassForTests&lt;/code&gt;. Example of usage in the contracts closure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packageWithBaseClasses = 'com.example.base'
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;mapping&quot;&gt;Mapping&lt;/h5&gt;

&lt;p&gt;You can manually map a regular expression of the contract’s &lt;em&gt;package&lt;/em&gt; (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseClassForTests = &quot;com.example.FooBase&quot;
baseClassMappings {
	baseClassMapping('.*com.*', 'com.example.ComBase')
	baseClassMapping('.*bar.*':'com.example.BarBase')
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s assume that you have contracts under&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;src/test/resources/contract/com/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;src/test/resources/contract/foo/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By providing the &lt;code&gt;baseClassForTests&lt;/code&gt; we have a fallback in case mapping didn’t succeed (you could also provide the &lt;code&gt;packageWithBaseClasses&lt;/code&gt; as fallback). That way the tests generated from &lt;code&gt;src/test/resources/contract/com/&lt;/code&gt; contracts will be extending the &lt;code&gt;com.example.ComBase&lt;/code&gt; whereas the rest of tests will extend &lt;code&gt;com.example.FooBase&lt;/code&gt; cause they don’t match the base class mapping for &lt;code&gt;bar&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4 id=&quot;maven&quot;&gt;Maven&lt;/h4&gt;

&lt;p&gt;Let’s now look how it looks like for Maven.&lt;/p&gt;

&lt;h5 id=&quot;convention-1&quot;&gt;Convention&lt;/h5&gt;

&lt;p&gt;To accomplish the same result as the one presented for Gradle you’d have to set your configuration like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;packageWithBaseClasses&amp;gt;com.example.base&amp;lt;/packageWithBaseClasses&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;mapping-1&quot;&gt;Mapping&lt;/h5&gt;

&lt;p&gt;You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list &lt;code&gt;baseClassMappings&lt;/code&gt; of &lt;code&gt;baseClassMapping&lt;/code&gt; that takes a &lt;code&gt;contractPackageRegex&lt;/code&gt; to &lt;code&gt;baseClassFQN&lt;/code&gt; mapping. Let’s take a look at the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;baseClassForTests&amp;gt;com.example.FooBase&amp;lt;/baseClassForTests&amp;gt;
		&amp;lt;baseClassMappings&amp;gt;
			&amp;lt;baseClassMapping&amp;gt;
				&amp;lt;contractPackageRegex&amp;gt;.*com.*&amp;lt;/contractPackageRegex&amp;gt;
				&amp;lt;baseClassFQN&amp;gt;com.example.ComBase&amp;lt;/baseClassFQN&amp;gt;
			&amp;lt;/baseClassMapping&amp;gt;
  			&amp;lt;baseClassMapping&amp;gt;
  				&amp;lt;contractPackageRegex&amp;gt;.*bar.*&amp;lt;/contractPackageRegex&amp;gt;
  				&amp;lt;baseClassFQN&amp;gt;com.example.BarBase&amp;lt;/baseClassFQN&amp;gt;
  			&amp;lt;/baseClassMapping&amp;gt;
		&amp;lt;/baseClassMappings&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post we’ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We’ve also checked some history around Accurest to Spring Cloud Contract migration.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;Here you can find interesting links related to Spring Cloud Contract Verifier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/&quot;&gt;Spring Cloud Contract Github Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/&quot;&gt;Spring Cloud Contract Main project page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html&quot;&gt;Spring Cloud Contract Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_stub_runner&quot;&gt;Spring Cloud Contract Stub Runner Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-contract&quot;&gt;Spring Cloud Contract Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/&quot;&gt;Spring Cloud Contract Maven Plugin Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I’ve just published an article at the Spring blog about Spring Cloud Contract 1.0.0.RELEASE is available. I’m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal’s Spring Cloud branding. Let’s look at some numbers: first commit almost 2 years ago: 2014-12-06 18:20:29 by Jakub Kubrynski - thanks to Codearte the authors of DevSkiller for their support!!! 1.152 commits 20 contributors That’s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract. What’s new in comparison to Accurest? Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes? we’ve moved from Grapes to Aether to download stubs we generate fake data when you provide either consumer or producer in the DSL Consumer Contract approach is there Spring Cloud Contract is available on start.spring.io you can have more than one base class for your tests Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud the whole build was moved from Gradle to the standard Spring Cloud Maven setup These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of Spring Cloud Contract WireMock support and Spring Cloud Contract RestDocs. Thanks to the first one the integration with WireMock is much more efficient and thanks to the latter you don’t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test. As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the Consumer Contract support and that you can have more than one base class for your tests. Let’s take a closer look what’s there in the docs about them… Consumer Contract support Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes. Repo structure Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here: ├── com │ └── example │ └── server │ ├── client1 │ │ └── expectation.groovy │ ├── client2 │ │ └── expectation.groovy │ ├── client3 │ │ └── expectation.groovy │ └── pom.xml ├── mvnw ├── mvnw.cmd ├── pom.xml └── src └── assembly └── contracts.xml As you can see the under the slash-delimited groupid / artifact id folder (com/example/server) you have expectations of the 3 consumers (client1, client2 and client3). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo. Example of a pom.xml inside the server folder. &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;Server Stubs&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;POM used to install locally stubs for consumer side&amp;lt;/description&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;relativePath /&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;spring-cloud-contract.version&amp;gt;1.0.1.BUILD-SNAPSHOT&amp;lt;/spring-cloud-contract.version&amp;gt; &amp;lt;spring-cloud-dependencies.version&amp;gt;Camden.BUILD-SNAPSHOT&amp;lt;/spring-cloud-dependencies.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-dependencies.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-contract.version}&amp;lt;/version&amp;gt; &amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!-- By default it would search under src/test/resources/ --&amp;gt; &amp;lt;contractsDirectory&amp;gt;${project.basedir}&amp;lt;/contractsDirectory&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;pluginRepositories&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Spring Releases&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/release&amp;lt;/url&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/pluginRepository&amp;gt; &amp;lt;/pluginRepositories&amp;gt; &amp;lt;/project&amp;gt; As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run mvn clean install -DskipTests to locally install stubs of the producer project. The pom.xml in the root folder can look like this: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;project xmlns=&quot;https://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;Contracts&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&amp;lt;/description&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;contracts&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;prepare-package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;attach&amp;gt;true&amp;lt;/attach&amp;gt; &amp;lt;descriptor&amp;gt;${basedir}/src/assembly/contracts.xml&amp;lt;/descriptor&amp;gt; &amp;lt;!-- If you want an explicit classifier remove the following line --&amp;gt; &amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;/project&amp;gt; It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here: &amp;lt;assembly xmlns=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot; xmlns:xsi=&quot;https://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&amp;gt; &amp;lt;id&amp;gt;project&amp;lt;/id&amp;gt; &amp;lt;formats&amp;gt; &amp;lt;format&amp;gt;jar&amp;lt;/format&amp;gt; &amp;lt;/formats&amp;gt; &amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt; &amp;lt;fileSets&amp;gt; &amp;lt;fileSet&amp;gt; &amp;lt;directory&amp;gt;${project.basedir}&amp;lt;/directory&amp;gt; &amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt; &amp;lt;useDefaultExcludes&amp;gt;true&amp;lt;/useDefaultExcludes&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;exclude&amp;gt;**/${project.build.directory}/**&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;mvnw&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;mvnw.cmd&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;.mvn/**&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;src/**&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/fileSet&amp;gt; &amp;lt;/fileSets&amp;gt; &amp;lt;/assembly&amp;gt; Workflow The workflow would look similar to the one presented in the Step by step guide to CDC. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository. Consumer When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. com/example/server) and runs mvn clean install -DskipTests to install locally the stubs converted from the contracts. REMEMBER! You need to have Maven installed locally Producer As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;contractsRepositoryUrl&amp;gt;https://link/to/your/nexus/or/artifactory/or/sth&amp;lt;/contractsRepositoryUrl&amp;gt; &amp;lt;contractDependency&amp;gt; &amp;lt;groupId&amp;gt;com.example.standalone&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;contracts&amp;lt;/artifactId&amp;gt; &amp;lt;/contractDependency&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; With this setup the JAR with groupid com.example.standalone and artifactid contracts will be downloaded from https://link/to/your/nexus/or/artifactory/or/sth. It will be then unpacked in a local temporary folder and contracts present under the com/example/server will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done. The rest of the flow looks the same. More than one base class That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That’s why we’ve added a possibility to map a contract to its test base class. Gradle If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options: follow a convention by providing the packageWithBaseClasses provide explicit mapping via baseClassMappings Convention The convention is such that if you have a contract under e.g. src/test/resources/contract/foo/bar/baz/ and provide the value of the packageWithBaseClasses property to com.example.base then we will assume that there is a BarBazBase class under com.example.base package. In other words we take last two parts of package if they exist and form a class with a Base suffix. Takes precedence over baseClassForTests. Example of usage in the contracts closure: packageWithBaseClasses = 'com.example.base' Mapping You can manually map a regular expression of the contract’s package (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example: baseClassForTests = &quot;com.example.FooBase&quot; baseClassMappings { baseClassMapping('.*com.*', 'com.example.ComBase') baseClassMapping('.*bar.*':'com.example.BarBase') } Let’s assume that you have contracts under src/test/resources/contract/com/ src/test/resources/contract/foo/ By providing the baseClassForTests we have a fallback in case mapping didn’t succeed (you could also provide the packageWithBaseClasses as fallback). That way the tests generated from src/test/resources/contract/com/ contracts will be extending the com.example.ComBase whereas the rest of tests will extend com.example.FooBase cause they don’t match the base class mapping for bar folder. Maven Let’s now look how it looks like for Maven. Convention To accomplish the same result as the one presented for Gradle you’d have to set your configuration like this: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;packageWithBaseClasses&amp;gt;com.example.base&amp;lt;/packageWithBaseClasses&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Mapping You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list baseClassMappings of baseClassMapping that takes a contractPackageRegex to baseClassFQN mapping. Let’s take a look at the following example: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-contract-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;baseClassForTests&amp;gt;com.example.FooBase&amp;lt;/baseClassForTests&amp;gt; &amp;lt;baseClassMappings&amp;gt; &amp;lt;baseClassMapping&amp;gt; &amp;lt;contractPackageRegex&amp;gt;.*com.*&amp;lt;/contractPackageRegex&amp;gt; &amp;lt;baseClassFQN&amp;gt;com.example.ComBase&amp;lt;/baseClassFQN&amp;gt; &amp;lt;/baseClassMapping&amp;gt; &amp;lt;baseClassMapping&amp;gt; &amp;lt;contractPackageRegex&amp;gt;.*bar.*&amp;lt;/contractPackageRegex&amp;gt; &amp;lt;baseClassFQN&amp;gt;com.example.BarBase&amp;lt;/baseClassFQN&amp;gt; &amp;lt;/baseClassMapping&amp;gt; &amp;lt;/baseClassMappings&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Summary In this blog post we’ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We’ve also checked some history around Accurest to Spring Cloud Contract migration. Links Here you can find interesting links related to Spring Cloud Contract Verifier: Spring Cloud Contract Github Repository Spring Cloud Contract Main project page Spring Cloud Contract Documentation Spring Cloud Contract Stub Runner Documentation Spring Cloud Contract Gitter Spring Cloud Contract Maven Plugin Documentation</summary></entry><entry><title type="html">Spring Cloud Contract 1.0.0.M1 Released</title><link href="https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/" rel="alternate" type="text/html" title="Spring Cloud Contract 1.0.0.M1 Released" /><published>2016-07-25T17:07:39+02:00</published><updated>2016-07-25T17:07:39+02:00</updated><id>https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/">&lt;p&gt;I’ve just published an article at the Spring blog about &lt;a href=&quot;https://spring.io/blog/2016/07/25/spring-cloud-contract-1-0-0-m1-released&quot;&gt;Spring Cloud Contract 1.0.0.M1 Release&lt;/a&gt;. Check out the new project formerly known as Accurest!&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I’ve just published an article at the Spring blog about Spring Cloud Contract 1.0.0.M1 Release. Check out the new project formerly known as Accurest!</summary></entry><entry><title type="html">Accurest becomes part of the Spring Cloud Contract</title><link href="https://toomuchcoding.com/articles/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract/" rel="alternate" type="text/html" title="Accurest becomes part of the Spring Cloud Contract" /><published>2016-06-24T18:43:07+02:00</published><updated>2016-06-24T18:43:07+02:00</updated><id>https://toomuchcoding.com/articles/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract/">&lt;p&gt;I’m extremely happy to announce that we have successfully rebranded the &lt;a href=&quot;https://codearte.github.io/accurest&quot;&gt;Accurest project&lt;/a&gt;. It’s officially become part of the &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract&quot;&gt;Spring Cloud Contract&lt;/a&gt; initiative. Ladies and Gentlemen please welcome the new projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/&quot;&gt;Spring Cloud Contract Verifier&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner&quot;&gt;Spring Cloud Contract Stub Runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;a-little-bit-of-history&quot;&gt;A little bit of history&lt;/h2&gt;

&lt;p&gt;Accurest was created because of lack of an easy-to-use tool for doing &lt;a href=&quot;https://martinfowler.com/articles/consumerDrivenContracts.html&quot;&gt;Consumer Driven Contracts&lt;/a&gt;. From our production experience the biggest problem was lack of verification that the defined contract actually does what it says it does. We wanted to ensure that from the contract automatically tests are generated so that we can have a proof that the stubs are reliable. Since there was no such tool the first commit of Accurest took place on 12/2014. The very idea and its implementation was initially set by &lt;a href=&quot;https://www.kubrynski.com/&quot;&gt;Jakub Kubrynski&lt;/a&gt; and me. The last available version of Accurest was 1.1.0 released on 06/2016 (the docs for the old version are &lt;a href=&quot;https://codearte.github.io/accurest/deprecated/&quot;&gt;available here&lt;/a&gt;). During these 19 months a lot of feedback has been gathered. The tool has received a lot of very good reception and that made us want to work even harder. Many times we have decided to decrease the time required for sleeping so as to fix a bug or develop a new feature in Accurest.&lt;/p&gt;

&lt;h2 id=&quot;notable-features&quot;&gt;Notable features&lt;/h2&gt;

&lt;p&gt;Speaking of features, especially quite a few of them definitely makes Accurest stand out on the “market” of Consumer Driven Contract (CDC) tooling. Out of many the most interesting are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Possibility to do CDC with messaging&lt;/li&gt;
  &lt;li&gt;Clear and easy to use, statically typed DSL&lt;/li&gt;
  &lt;li&gt;Possibility to copy paste your current JSON file to the contract and only edit its elements&lt;/li&gt;
  &lt;li&gt;Automatic generation of tests from the defined Contract&lt;/li&gt;
  &lt;li&gt;Stub Runner functionality - the stubs are automatically downloaded at runtime from Nexus / Artifactory&lt;/li&gt;
  &lt;li&gt;Spring Cloud integration - no discovery service is needed for integration tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information check out my posts about &lt;a href=&quot;https://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/&quot;&gt;Stub Runner&lt;/a&gt;, &lt;a href=&quot;https://toomuchcoding.com/blog/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/&quot;&gt;Accurest Messaging&lt;/a&gt; or &lt;a href=&quot;https://codearte.github.io/accurest/&quot;&gt;just read the docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spring-cloud-contract&quot;&gt;Spring Cloud Contract&lt;/h2&gt;

&lt;p&gt;In Pivotal we came to the conclusion that Accurest could become an interesting addition to our Spring Cloud tooling. Due to the increased interest of the community in the Consumer Driven Contracts approach we’ve decided to start the &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract&quot;&gt;Spring Cloud Contract&lt;/a&gt; initiative.&lt;/p&gt;

&lt;p&gt;Accurest became &lt;em&gt;Spring Cloud Contract Verifier&lt;/em&gt; (note: the name might change in the future) but for the time being will remain in the &lt;a href=&quot;https://github.com/Codearte&quot;&gt;Codearte repository&lt;/a&gt;. It’s becoming the part of Spring Cloud tooling as a mature tool with a growing community around it. Some arguments for that are that it has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/&quot;&gt;a nice AsciiDoc documentation that was completely rewritten following users’ feedback&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/Codearte/accurest&quot;&gt;active Gitter channel where we try to immediately answer any support questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Codearte/accurest/stargazers&quot;&gt;Over 80 stars on Github and counting ;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we believe very much in the Consumer Driven Contract approach we also want to do the library in a Client Driven way. That means that we (server side) are very open to your feedback (consumer side) and want you be the main driver of changes in the library.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;The Accurest project would never come to life without the hard work of the &lt;a href=&quot;https://codearte.io&quot;&gt;Codearte&lt;/a&gt; developers (the order is random):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/olga_maciaszek&quot;&gt;Olga Maciaszek-Sharma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubrynski.com&quot;&gt;Jakub Kubrynski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://solidsoft.wordpress.com/&quot;&gt;Marcin Zajaczkowski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mariuszs&quot;&gt;Mariusz Smykula&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and obviously everybody who has &lt;a href=&quot;https://github.com/Codearte/accurest/graphs/contributors&quot;&gt;ever commited something to the project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;If you want to read more about &lt;em&gt;Spring Cloud Contract Verifier&lt;/em&gt; just check out the following links.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Codearte/accurest&quot;&gt;Spring Cloud Contract Verifier Github Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest&quot;&gt;Spring Cloud Contract Verifier Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/deprecated&quot;&gt;Accurest Legacy Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner&quot;&gt;Spring Cloud Contract Stub Runner Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/#stub-runner-for-messaging&quot;&gt;Spring Cloud Contract Stub Runner Messaging Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/Codearte/accurest&quot;&gt;Spring Cloud Contract Verifier Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Codearte/accurest-maven-plugin&quot;&gt;Spring Cloud Contract Verifier Maven Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><category term="accurest" /><category term="spring-cloud-contract" /><category term="consumer-driven-contracts" /><category term="cdc" /><summary type="html">I’m extremely happy to announce that we have successfully rebranded the Accurest project. It’s officially become part of the Spring Cloud Contract initiative. Ladies and Gentlemen please welcome the new projects: Spring Cloud Contract Verifier Spring Cloud Contract Stub Runner A little bit of history Accurest was created because of lack of an easy-to-use tool for doing Consumer Driven Contracts. From our production experience the biggest problem was lack of verification that the defined contract actually does what it says it does. We wanted to ensure that from the contract automatically tests are generated so that we can have a proof that the stubs are reliable. Since there was no such tool the first commit of Accurest took place on 12/2014. The very idea and its implementation was initially set by Jakub Kubrynski and me. The last available version of Accurest was 1.1.0 released on 06/2016 (the docs for the old version are available here). During these 19 months a lot of feedback has been gathered. The tool has received a lot of very good reception and that made us want to work even harder. Many times we have decided to decrease the time required for sleeping so as to fix a bug or develop a new feature in Accurest. Notable features Speaking of features, especially quite a few of them definitely makes Accurest stand out on the “market” of Consumer Driven Contract (CDC) tooling. Out of many the most interesting are: Possibility to do CDC with messaging Clear and easy to use, statically typed DSL Possibility to copy paste your current JSON file to the contract and only edit its elements Automatic generation of tests from the defined Contract Stub Runner functionality - the stubs are automatically downloaded at runtime from Nexus / Artifactory Spring Cloud integration - no discovery service is needed for integration tests For more information check out my posts about Stub Runner, Accurest Messaging or just read the docs. Spring Cloud Contract In Pivotal we came to the conclusion that Accurest could become an interesting addition to our Spring Cloud tooling. Due to the increased interest of the community in the Consumer Driven Contracts approach we’ve decided to start the Spring Cloud Contract initiative. Accurest became Spring Cloud Contract Verifier (note: the name might change in the future) but for the time being will remain in the Codearte repository. It’s becoming the part of Spring Cloud tooling as a mature tool with a growing community around it. Some arguments for that are that it has: a nice AsciiDoc documentation that was completely rewritten following users’ feedback active Gitter channel where we try to immediately answer any support questions Over 80 stars on Github and counting ;) Since we believe very much in the Consumer Driven Contract approach we also want to do the library in a Client Driven way. That means that we (server side) are very open to your feedback (consumer side) and want you be the main driver of changes in the library. Credits The Accurest project would never come to life without the hard work of the Codearte developers (the order is random): Olga Maciaszek-Sharma Jakub Kubrynski Marcin Zajaczkowski Mariusz Smykula and obviously everybody who has ever commited something to the project. Links If you want to read more about Spring Cloud Contract Verifier just check out the following links. Spring Cloud Contract Verifier Github Repository Spring Cloud Contract Verifier Documentation Accurest Legacy Documentation Spring Cloud Contract Stub Runner Documentation Spring Cloud Contract Stub Runner Messaging Documentation Spring Cloud Contract Verifier Gitter Spring Cloud Contract Verifier Maven Plugin</summary></entry><entry><title type="html">Zero Downtime Deployment with a Database</title><link href="https://toomuchcoding.com/articles/2016/05/31/zero-downtime-deployment-with-a-database/" rel="alternate" type="text/html" title="Zero Downtime Deployment with a Database" /><published>2016-05-31T11:58:52+02:00</published><updated>2016-05-31T11:58:52+02:00</updated><id>https://toomuchcoding.com/articles/2016/05/31/zero-downtime-deployment-with-a-database</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/05/31/zero-downtime-deployment-with-a-database/">&lt;p&gt;I’ve just published an article at the Spring blog about &lt;a href=&quot;https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database&quot;&gt;Zero Downtime Deployment with a Database&lt;/a&gt;. So if you’re planning on doing
zero downtime or blue/green deployment you’d better check out that article :) The code is available here on
&lt;a href=&quot;https://github.com/spring-cloud-samples/zero-downtime-deployment&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="spring-cloud" /><category term="deployment" /><summary type="html">I’ve just published an article at the Spring blog about Zero Downtime Deployment with a Database. So if you’re planning on doing zero downtime or blue/green deployment you’d better check out that article :) The code is available here on Github.</summary></entry><entry><title type="html">Accurest and Stub Runner 1.1.0.M3</title><link href="https://toomuchcoding.com/articles/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/" rel="alternate" type="text/html" title="Accurest and Stub Runner 1.1.0.M3" /><published>2016-04-30T13:53:44+02:00</published><updated>2016-04-30T13:53:44+02:00</updated><id>https://toomuchcoding.com/articles/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3</id><content type="html" xml:base="https://toomuchcoding.com/articles/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/">&lt;p&gt;Currently at the Spring Team we’re polishing our libraries for the upcoming final release of the Brixton train. It should happen soon :) Until then I’m spending a lot of my after work, free time on &lt;a href=&quot;/blog/2016/04/25/accurest-docs-updated/&quot;&gt;Accurest&lt;/a&gt; and &lt;a href=&quot;https://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/&quot;&gt;Stub Runner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today’s post will be about the new stuff that you will be able to profit from in the upcoming &lt;code&gt;1.1.0&lt;/code&gt; release of Accurest. Also you can profit from most of these features in the &lt;code&gt;1.1.0.M3&lt;/code&gt; release.&lt;/p&gt;

&lt;p&gt;I’ll just quickly go through the features but note that you can read about all of them in more depth in our &lt;a href=&quot;https://codearte.github.io/accurest&quot;&gt;documentation &lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;name-change&quot;&gt;Name change&lt;/h2&gt;

&lt;p&gt;AccuREST started as a library used to stub HTTP calls. In the upcoming &lt;code&gt;1.1.0&lt;/code&gt; release you will be able to stub messaging functionality too. That’s why the name changes to Accurest. That’s a fantastic name isn’t it? ;)&lt;/p&gt;

&lt;p&gt;Also since branding is important, now instead of calling &lt;code&gt;io.codearte.accurest.dsl.GroovyDsl&lt;/code&gt; you can call &lt;code&gt;io.codearte.accurest.dsl.Accurest&lt;/code&gt; :)&lt;/p&gt;

&lt;h2 id=&quot;messaging-support&quot;&gt;Messaging support&lt;/h2&gt;

&lt;p&gt;It took me quite some time to do this but it was worth it :) Several sleepless nights and now you can profit from defining contracts for messaging. In HTTP we had &lt;code&gt;client&lt;/code&gt;/&lt;code&gt;stub&lt;/code&gt; side and &lt;code&gt;server&lt;/code&gt;/&lt;code&gt;test&lt;/code&gt; side. For messaging we added methods to help discern the differences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;publisher&lt;/code&gt; the side for which the tests will be generated&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;consumer&lt;/code&gt; the side for which the messaging endpoints will be stubbed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contract&quot;&gt;Contract&lt;/h3&gt;

&lt;p&gt;There are 3 use cases from the message &lt;code&gt;Producer&lt;/code&gt;’s point of view.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;something happens in my application and I’m producing an output message&lt;/li&gt;
  &lt;li&gt;someone sends a message to destination (queue/topic), I’m listening to that message and will produce an output message somewhere else&lt;/li&gt;
  &lt;li&gt;someone sends a message to destination (queue/topic), I’m listening to that message and will consume it without any message sending&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here you can see examples of contracts for those three situations (you can read more about it in the  &lt;a href=&quot;https://codearte.github.io/accurest/#messaging-top-level-elements&quot;&gt;docs&lt;/a&gt; ):&lt;/p&gt;

&lt;h4 id=&quot;output-triggered-by-a-method&quot;&gt;Output triggered by a method&lt;/h4&gt;

&lt;p&gt;The output message can be triggered by calling a method (e.g. a Scheduler was started and a message was sent)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def dsl = Accurest.make {
        // Human readable description
        description 'Some description'
        // Label by means of which the output message can be triggered
        label 'some_label'
        // input to the contract
        input {
                // the contract will be triggered by a method
                triggeredBy('bookReturnedTriggered()')
        }
        // output message of the contract
        outputMessage {
                // destination to which the output message will be sent
                sentTo('output')
                // the body of the output message
                body('''{ &quot;bookName&quot; : &quot;foo&quot; }''')
                // the headers of the output message
                headers {
                        header('BOOK-NAME', 'foo')
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;output-triggered-by-a-message&quot;&gt;Output triggered by a message&lt;/h4&gt;

&lt;p&gt;The output message can be triggered by receiving a message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def dsl = GroovyDsl.make {
        description 'Some Description'
        label 'some_label'
        // input is a message
        input {
                // the message was received from this destination
                messageFrom('input')
                // has the following body
                messageBody([
                        bookName: 'foo'
                ])
                // and the following headers
                messageHeaders {
                        header('sample', 'header')
                }
        }
        outputMessage {
                sentTo('output')
                body([
                        bookName: 'foo'
                ])
                headers {
                        header('BOOK-NAME', 'foo')
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;no-output-only-input&quot;&gt;No output, only input&lt;/h4&gt;

&lt;p&gt;There can be only input without any output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def dsl = GroovyDsl.make {
        description 'Some Description'
        label 'some_label'
        // input is a message
        input {
                // the message was received from this destination
                messageFrom('input')
                // has the following body
                messageBody([
                        bookName: 'foo'
                ])
                // and the following headers
                messageHeaders {
                        header('sample', 'header')
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;producer-side&quot;&gt;Producer side&lt;/h3&gt;

&lt;p&gt;Here you can see an example of a JUnit generated test for the producer for the input / output scenario:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// given:
 AccurestMessage inputMessage = accurestMessaging.create(
  &quot;{\\&quot;bookName\\&quot;:\\&quot;foo\\&quot;}&quot;
, headers()
  .header(&quot;sample&quot;, &quot;header&quot;));

// when:
 accurestMessaging.send(inputMessage, &quot;input&quot;);

// then:
 AccurestMessage response = accurestMessaging.receiveMessage(&quot;output&quot;);
 assertThat(response).isNotNull();
 assertThat(response.getHeader(&quot;BOOK-NAME&quot;)).isEqualTo(&quot;foo&quot;);
// and:
 DocumentContext parsedJson = JsonPath.parse(accurestObjectMapper.writeValueAsString(response.getPayload()));
 assertThatJson(parsedJson).field(&quot;bookName&quot;).isEqualTo(&quot;foo&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re sending a message to a destination called &lt;code&gt;input&lt;/code&gt;. next we’re checking if there’s a message at the &lt;code&gt;output&lt;/code&gt; destination. If that’s the case
we’re checking if that message has proper headers and body.&lt;/p&gt;

&lt;h3 id=&quot;consumer-side&quot;&gt;Consumer side&lt;/h3&gt;

&lt;p&gt;It’s enough to provide the dependency to proper Stub Runner module (check the next section for more information) and tell it which stubs should be downloaded. Yup, that’s it! &lt;a href=&quot;https://codearte.github.io/accurest/#stub-runner-for-messaging&quot;&gt;Stub Runner will download the stubs and prepare stubbed routes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes you’ll need to trigger a message somehow in your tests. That’s why we’ve provided the &lt;code&gt;StubTrigger&lt;/code&gt; interface that you can inject! If you’re already familiar with Stub Runner Spring then you could use the &lt;code&gt;StubFinder&lt;/code&gt; bean to find the URL of your dependency. Now &lt;code&gt;StubFinder&lt;/code&gt; also extends the &lt;code&gt;StubTrigger&lt;/code&gt; interface thus you don’t have to inject any additional beans in your tests.&lt;/p&gt;

&lt;p&gt;There are multiple ways in which you can trigger a message:&lt;/p&gt;

&lt;h4 id=&quot;trigger-by-label&quot;&gt;Trigger by label&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;stubFinder.trigger('return_book_1')
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;trigger-by-group-and-artifact-ids&quot;&gt;Trigger by group and artifact ids&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;stubFinder.trigger('io.codearte.accurest.stubs:camelService', 'return_book_1')
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;trigger-by-artifact-id&quot;&gt;Trigger by artifact id&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;stubFinder.trigger('camelService', 'return_book_1')
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;trigger-all-messages&quot;&gt;Trigger all messages&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;stubFinder.trigger()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;integrations&quot;&gt;Integrations&lt;/h3&gt;

&lt;p&gt;We provide the following out of the box integrations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Integration&lt;/li&gt;
  &lt;li&gt;Spring Cloud Stream&lt;/li&gt;
  &lt;li&gt;Apache Camel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also we provide all the building blocks to provide a custom integration.&lt;/p&gt;

&lt;p&gt;Just by providing the proper dependency&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// for Apache Camel
testCompile &quot;io.codearte.accurest:accurest-messaging-camel:${accurestVersion}&quot;
// for Spring Integration
testCompile &quot;io.codearte.accurest:accurest-messaging-integration:${accurestVersion}&quot;
// for Spring Cloud Stream
testCompile &quot;io.codearte.accurest:accurest-messaging-stream:${accurestVersion}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your generated tests should just work.&lt;/p&gt;

&lt;h2 id=&quot;stub-runner-boot&quot;&gt;Stub Runner Boot&lt;/h2&gt;

&lt;p&gt;I’ve added a new module of &lt;a href=&quot;https://codearte.github.io/accurest/#stub-runner-boot&quot;&gt;Stub Runner&lt;/a&gt; that operates on Spring Boot. Assuming that you’re using Spring Cloud Stream you can create a project that has 2 dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &quot;io.codearte.accurest:stub-runner-boot:${accurestVersion}&quot;
compile &quot;io.codearte.accurest:stub-runner-messaging-stream:${accurestVersion}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you pass the proper &lt;a href=&quot;https://codearte.github.io/accurest/#common-properties-for-junit-and-spring&quot;&gt;Stub Runner Spring configuration&lt;/a&gt; e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stubrunner.stubs.ids: io.codearte.accurest.stubs:streamService
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will have a running app that exposes HTTP endpoints to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;trigger messages&lt;/li&gt;
  &lt;li&gt;check the URLs of the registered WireMock stubs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accurest-maven-plugin&quot;&gt;Accurest Maven Plugin&lt;/h2&gt;

&lt;p&gt;Mariusz Smykuła has done a fantastic job by adding the &lt;a href=&quot;https://codearte.github.io/accurest-maven-plugin/&quot;&gt;Accurest Maven Plugin&lt;/a&gt;. Now you can add Accurest to your project that runs with Maven. But that’s not all since the Maven Plugin allows you to run the Accurest stubs using the &lt;code&gt;accurest:run&lt;/code&gt; command!&lt;/p&gt;

&lt;p&gt;Read the &lt;a href=&quot;https://codearte.github.io/accurest-maven-plugin/&quot;&gt;docs&lt;/a&gt; to know more!&lt;/p&gt;

&lt;h2 id=&quot;stub-runner-changes&quot;&gt;Stub Runner changes&lt;/h2&gt;

&lt;h3 id=&quot;messaging&quot;&gt;Messaging&lt;/h3&gt;

&lt;p&gt;With messaging coming as a feature I’ve added a bunch of messaging modules. You can read more about the &lt;a href=&quot;https://codearte.github.io/accurest/#stub-runner-for-messaging&quot;&gt;Stub Runner messaging modules here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;fixed-ports-and-versions-of-stubs&quot;&gt;Fixed ports and versions of stubs&lt;/h3&gt;

&lt;p&gt;Another feature that was missing and is really valuable is that now you can explicitly say that you want a particular dependency to be started at a given port. This feature is available since version &lt;code&gt;1.0.7&lt;/code&gt; but the stub id has been changed in &lt;code&gt;1.1.0.M4&lt;/code&gt; so be warned ;)&lt;/p&gt;

&lt;p&gt;The ids have changed because now you can provide the desired version of the stub that you want to download.&lt;/p&gt;

&lt;h4 id=&quot;via-properties&quot;&gt;Via properties&lt;/h4&gt;

&lt;p&gt;Now you can provide the id of a stub like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;groupId:artifactId:version:classifier:port
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where version, classifier and port are optional.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you don’t provide the port then a random one will be picked&lt;/li&gt;
  &lt;li&gt;If you don’t provide the classifier then the default one will be taken.&lt;/li&gt;
  &lt;li&gt;If you don’t provide the version then the + will be passed and the latest one will be downloaded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where port means the port of the WireMock server.&lt;/p&gt;

&lt;p&gt;So if you provide your dependency like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stubrunner.stubs.ids: io.codearte.accurest.stubs:streamService:0.0.1-SNAPSHOT:stubs:9090,io.codearte.accurest.stubs:anotherService:+:9095
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will make Stub Runner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;download a stub with groupId: &lt;code&gt;io.codearte.accurest.stubs&lt;/code&gt;, artifactId: &lt;code&gt;streamService&lt;/code&gt;, version: &lt;code&gt;0.0.1-SNAPSHOT&lt;/code&gt;, classifier: &lt;code&gt;stubs&lt;/code&gt; and register it at port 9090&lt;/li&gt;
  &lt;li&gt;download a stub with groupId: &lt;code&gt;io.codearte.accurest.stubs&lt;/code&gt;, artifactId: &lt;code&gt;anotherService&lt;/code&gt;, latest version, default classifier (&lt;code&gt;stubs&lt;/code&gt;) and register it at port 9095&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;via-fluent-api&quot;&gt;Via fluent API&lt;/h4&gt;

&lt;p&gt;When using the AccurestRule you can add a stub to download and then pass the port for the last downloaded stub.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ClassRule public static AccurestRule rule = new AccurestRule()
                .repoRoot(repoRoot())
                .downloadStub(&quot;io.codearte.accurest.stubs&quot;, &quot;loanIssuance&quot;)
                .withPort(12345)
                .downloadStub(&quot;io.codearte.accurest.stubs:fraudDetectionServer:12346&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that for this example the following test is valid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;then(rule.findStubUrl(&quot;loanIssuance&quot;)).isEqualTo(URI.create(&quot;https://localhost:12345&quot;).toURL());
then(rule.findStubUrl(&quot;fraudDetectionServer&quot;)).isEqualTo(URI.create(&quot;https://localhost:12346&quot;).toURL());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;technical-changes&quot;&gt;Technical changes&lt;/h2&gt;

&lt;p&gt;Apart from features we’ve done some technical refactoring.&lt;/p&gt;

&lt;h3 id=&quot;grape---aether&quot;&gt;Grape -&amp;gt; Aether&lt;/h3&gt;

&lt;p&gt;I’ve migrated the mechanism used to download dependencies from Groovy Grape to Aether. We had a lot of issues with Grape and Aether works very well for now. That’s a backwards incompatible change so if you had some custom Grape configuration then you’ll have to port it to Aether.&lt;/p&gt;

&lt;h3 id=&quot;dependencies-fixed&quot;&gt;Dependencies fixed&lt;/h3&gt;

&lt;p&gt;We had some problems with explicit and transitive dependencies that got fixed. The Accurest jars should be smaller.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A lot work was done around Accurest and CDC&lt;/li&gt;
  &lt;li&gt;Quite soon we’ll release the 1.1.0 version&lt;/li&gt;
  &lt;li&gt;You can use stubs of your dependencies that communicate over messaging&lt;/li&gt;
  &lt;li&gt;You can use fixed ports and versions for your dependencies&lt;/li&gt;
  &lt;li&gt;If you like the project star it on &lt;a href=&quot;https://github.com/Codearte/accurest&quot;&gt;Github&lt;/a&gt; :) That will give us additional boost of energy to spend on coding instead of sleeping ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Codearte/accurest&quot;&gt;Accurest Github Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest&quot;&gt;Accurest Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/#stub-runner&quot;&gt;Stub Runner Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codearte.github.io/accurest/#stub-runner-for-messaging&quot;&gt;Stub Runner Messaging Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/Codearte/accurest&quot;&gt;Accurest Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Codearte/accurest-maven-plugin&quot;&gt;Accurest Maven Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcin Grzejszczak</name></author><category term="articles" /><category term="accurest" /><category term="stubrunner" /><category term="testing" /><summary type="html">Currently at the Spring Team we’re polishing our libraries for the upcoming final release of the Brixton train. It should happen soon :) Until then I’m spending a lot of my after work, free time on Accurest and Stub Runner. Today’s post will be about the new stuff that you will be able to profit from in the upcoming 1.1.0 release of Accurest. Also you can profit from most of these features in the 1.1.0.M3 release. I’ll just quickly go through the features but note that you can read about all of them in more depth in our documentation . Name change AccuREST started as a library used to stub HTTP calls. In the upcoming 1.1.0 release you will be able to stub messaging functionality too. That’s why the name changes to Accurest. That’s a fantastic name isn’t it? ;) Also since branding is important, now instead of calling io.codearte.accurest.dsl.GroovyDsl you can call io.codearte.accurest.dsl.Accurest :) Messaging support It took me quite some time to do this but it was worth it :) Several sleepless nights and now you can profit from defining contracts for messaging. In HTTP we had client/stub side and server/test side. For messaging we added methods to help discern the differences: publisher the side for which the tests will be generated consumer the side for which the messaging endpoints will be stubbed Contract There are 3 use cases from the message Producer’s point of view. something happens in my application and I’m producing an output message someone sends a message to destination (queue/topic), I’m listening to that message and will produce an output message somewhere else someone sends a message to destination (queue/topic), I’m listening to that message and will consume it without any message sending Here you can see examples of contracts for those three situations (you can read more about it in the docs ): Output triggered by a method The output message can be triggered by calling a method (e.g. a Scheduler was started and a message was sent) def dsl = Accurest.make { // Human readable description description 'Some description' // Label by means of which the output message can be triggered label 'some_label' // input to the contract input { // the contract will be triggered by a method triggeredBy('bookReturnedTriggered()') } // output message of the contract outputMessage { // destination to which the output message will be sent sentTo('output') // the body of the output message body('''{ &quot;bookName&quot; : &quot;foo&quot; }''') // the headers of the output message headers { header('BOOK-NAME', 'foo') } } } Output triggered by a message The output message can be triggered by receiving a message. def dsl = GroovyDsl.make { description 'Some Description' label 'some_label' // input is a message input { // the message was received from this destination messageFrom('input') // has the following body messageBody([ bookName: 'foo' ]) // and the following headers messageHeaders { header('sample', 'header') } } outputMessage { sentTo('output') body([ bookName: 'foo' ]) headers { header('BOOK-NAME', 'foo') } } } No output, only input There can be only input without any output def dsl = GroovyDsl.make { description 'Some Description' label 'some_label' // input is a message input { // the message was received from this destination messageFrom('input') // has the following body messageBody([ bookName: 'foo' ]) // and the following headers messageHeaders { header('sample', 'header') } } } Producer side Here you can see an example of a JUnit generated test for the producer for the input / output scenario: // given: AccurestMessage inputMessage = accurestMessaging.create( &quot;{\\&quot;bookName\\&quot;:\\&quot;foo\\&quot;}&quot; , headers() .header(&quot;sample&quot;, &quot;header&quot;)); // when: accurestMessaging.send(inputMessage, &quot;input&quot;); // then: AccurestMessage response = accurestMessaging.receiveMessage(&quot;output&quot;); assertThat(response).isNotNull(); assertThat(response.getHeader(&quot;BOOK-NAME&quot;)).isEqualTo(&quot;foo&quot;); // and: DocumentContext parsedJson = JsonPath.parse(accurestObjectMapper.writeValueAsString(response.getPayload())); assertThatJson(parsedJson).field(&quot;bookName&quot;).isEqualTo(&quot;foo&quot;); We’re sending a message to a destination called input. next we’re checking if there’s a message at the output destination. If that’s the case we’re checking if that message has proper headers and body. Consumer side It’s enough to provide the dependency to proper Stub Runner module (check the next section for more information) and tell it which stubs should be downloaded. Yup, that’s it! Stub Runner will download the stubs and prepare stubbed routes. Sometimes you’ll need to trigger a message somehow in your tests. That’s why we’ve provided the StubTrigger interface that you can inject! If you’re already familiar with Stub Runner Spring then you could use the StubFinder bean to find the URL of your dependency. Now StubFinder also extends the StubTrigger interface thus you don’t have to inject any additional beans in your tests. There are multiple ways in which you can trigger a message: Trigger by label stubFinder.trigger('return_book_1') Trigger by group and artifact ids stubFinder.trigger('io.codearte.accurest.stubs:camelService', 'return_book_1') Trigger by artifact id stubFinder.trigger('camelService', 'return_book_1') Trigger all messages stubFinder.trigger() Integrations We provide the following out of the box integrations: Spring Integration Spring Cloud Stream Apache Camel Also we provide all the building blocks to provide a custom integration. Just by providing the proper dependency // for Apache Camel testCompile &quot;io.codearte.accurest:accurest-messaging-camel:${accurestVersion}&quot; // for Spring Integration testCompile &quot;io.codearte.accurest:accurest-messaging-integration:${accurestVersion}&quot; // for Spring Cloud Stream testCompile &quot;io.codearte.accurest:accurest-messaging-stream:${accurestVersion}&quot; Your generated tests should just work. Stub Runner Boot I’ve added a new module of Stub Runner that operates on Spring Boot. Assuming that you’re using Spring Cloud Stream you can create a project that has 2 dependencies: compile &quot;io.codearte.accurest:stub-runner-boot:${accurestVersion}&quot; compile &quot;io.codearte.accurest:stub-runner-messaging-stream:${accurestVersion}&quot; Now if you pass the proper Stub Runner Spring configuration e.g.: stubrunner.stubs.ids: io.codearte.accurest.stubs:streamService You will have a running app that exposes HTTP endpoints to trigger messages check the URLs of the registered WireMock stubs Accurest Maven Plugin Mariusz Smykuła has done a fantastic job by adding the Accurest Maven Plugin. Now you can add Accurest to your project that runs with Maven. But that’s not all since the Maven Plugin allows you to run the Accurest stubs using the accurest:run command! Read the docs to know more! Stub Runner changes Messaging With messaging coming as a feature I’ve added a bunch of messaging modules. You can read more about the Stub Runner messaging modules here Fixed ports and versions of stubs Another feature that was missing and is really valuable is that now you can explicitly say that you want a particular dependency to be started at a given port. This feature is available since version 1.0.7 but the stub id has been changed in 1.1.0.M4 so be warned ;) The ids have changed because now you can provide the desired version of the stub that you want to download. Via properties Now you can provide the id of a stub like this: groupId:artifactId:version:classifier:port where version, classifier and port are optional. If you don’t provide the port then a random one will be picked If you don’t provide the classifier then the default one will be taken. If you don’t provide the version then the + will be passed and the latest one will be downloaded Where port means the port of the WireMock server. So if you provide your dependency like this: stubrunner.stubs.ids: io.codearte.accurest.stubs:streamService:0.0.1-SNAPSHOT:stubs:9090,io.codearte.accurest.stubs:anotherService:+:9095 It will make Stub Runner: download a stub with groupId: io.codearte.accurest.stubs, artifactId: streamService, version: 0.0.1-SNAPSHOT, classifier: stubs and register it at port 9090 download a stub with groupId: io.codearte.accurest.stubs, artifactId: anotherService, latest version, default classifier (stubs) and register it at port 9095 Via fluent API When using the AccurestRule you can add a stub to download and then pass the port for the last downloaded stub. @ClassRule public static AccurestRule rule = new AccurestRule() .repoRoot(repoRoot()) .downloadStub(&quot;io.codearte.accurest.stubs&quot;, &quot;loanIssuance&quot;) .withPort(12345) .downloadStub(&quot;io.codearte.accurest.stubs:fraudDetectionServer:12346&quot;); You can see that for this example the following test is valid: then(rule.findStubUrl(&quot;loanIssuance&quot;)).isEqualTo(URI.create(&quot;https://localhost:12345&quot;).toURL()); then(rule.findStubUrl(&quot;fraudDetectionServer&quot;)).isEqualTo(URI.create(&quot;https://localhost:12346&quot;).toURL()); Technical changes Apart from features we’ve done some technical refactoring. Grape -&amp;gt; Aether I’ve migrated the mechanism used to download dependencies from Groovy Grape to Aether. We had a lot of issues with Grape and Aether works very well for now. That’s a backwards incompatible change so if you had some custom Grape configuration then you’ll have to port it to Aether. Dependencies fixed We had some problems with explicit and transitive dependencies that got fixed. The Accurest jars should be smaller. Summary A lot work was done around Accurest and CDC Quite soon we’ll release the 1.1.0 version You can use stubs of your dependencies that communicate over messaging You can use fixed ports and versions for your dependencies If you like the project star it on Github :) That will give us additional boost of energy to spend on coding instead of sleeping ;) Links Accurest Github Repository Accurest Documentation Stub Runner Documentation Stub Runner Messaging Documentation Accurest Gitter Accurest Maven Plugin</summary></entry></feed>