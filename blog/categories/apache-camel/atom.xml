<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apache Camel | TOO MUCH CODING]]></title>
  <link href="https://toomuchcoding.com/blog/categories/apache-camel/atom.xml" rel="self"/>
  <link href="https://toomuchcoding.com/"/>
  <updated>2020-08-13T15:39:09+02:00</updated>
  <id>https://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drools Decision Tables With Camel and Spring]]></title>
    <link href="https://toomuchcoding.com/blog/2013/02/03/drools-decision-tables-with-camel-and/"/>
    <updated>2013-02-03T13:28:00-08:00</updated>
    <id>https://toomuchcoding.com/blog/2013/02/03/drools-decision-tables-with-camel-and</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Hi!<br /><br /><div style="text-align: justify;">As I've shown it in my previous post <a href="https://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html">JBoss Drools are a very useful rules engine</a>. The only problem is that creating the rules in the Rule language might be pretty complicated for a non-technical person. That's why one can provide an easy way for creating business rules - decision tables created in a spreadsheet!</div><div style="text-align: justify;"><br />
<!--more-->
</div><div style="text-align: justify;">In the following example I will show you a really complicated business rule example converted to a decision table in a spreadsheet. As a backend we will have Drools, Camel and Spring.</div><br /><br /><a name='more'></a><br /><br /><div style="text-align: justify;">To begin with let us take a look at our imaginary business problem. Let us assume that we are running a business that focuses on selling products (either Medical or Electronic). We are shipping our products to several countries (PL, USA, GER, SWE, UK, ESP) and depending on the country there are different law regulations concerning the buyer's age. In some countries you can buy products when you are younger than in others. What is more depending on the country from which the buyer and the product comes from and on the quantity of products, the buyer might get a discount. As you can see there is a substantial number of conditions needed to be fullfield in this scenario (imagine the number of ifs needed to program this :P ).</div><br /><div style="text-align: justify;">Another problem would be the business side (as usual). Anybody who has been working on a project knows how fast the requirements are changing. If one entered all the rules in the code he would have to redeploy the software each time the requirements changed. That's why it is a good practice to divide the business logic from the code itself. Anyway, let's go back to our example.</div><br />To begin with let us take a look at the spreadsheets (before that it is worth taking a look at the <a href="https://docs.jboss.org/drools/release/5.2.0.Final/drools-expert-docs/html/ch06.html">JBoss website with precise description of how the decision table should look like</a>):<br /><br /><br /><div style="text-align: justify;">The point of entry of our program is the first spreadsheet that checks if the given user should be granted with the possibility of buying a product (it will be better if you download the spreadsheets and play with them from Too Much Coding's repository at Bitbucket: <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/eeda79f74a4af30091490ab3507879254540e118/Drools/Decision%20table/src/main/resources/rules/user_table.xls?at=default">user_table.xls</a> and <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/eeda79f74a4af30091490ab3507879254540e118/Drools/Decision%20table/src/main/resources/rules/product_table.xls?at=default">product_table.xls</a>, or Github<a href="https://github.com/marcingrzejszczak/too-much-coding/blob/master/Drools/Decision%20table/src/main/resources/rules/user_table.xls?raw=true"> user_table.xls </a>and <a href="https://github.com/marcingrzejszczak/too-much-coding/blob/master/Drools/Decision%20table/src/main/resources/rules/product_table.xls?raw=true">product_table.xls</a>):</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><b>user_table.xls (tables worksheet)</b></div><div style="text-align: justify;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-J5-tXPECwJI/UQ7TmutXq5I/AAAAAAAAAzU/3c9KrRFaZ5w/s1600/user_table.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="120" src="https://1.bp.blogspot.com/-J5-tXPECwJI/UQ7TmutXq5I/AAAAAAAAAzU/3c9KrRFaZ5w/s320/user_table.png" width="320" /></a></div><div><br /></div><div>Once the user has been approved he might get a discount:</div><br /><br /><b>product_table.xls (tables worksheet)</b><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://2.bp.blogspot.com/-v-fAUhcn4HI/UQ69XrrT06I/AAAAAAAAAy0/8fU1nropIhU/s1600/product_table.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="129" src="https://2.bp.blogspot.com/-v-fAUhcn4HI/UQ69XrrT06I/AAAAAAAAAy0/8fU1nropIhU/s320/product_table.png" width="320" /></a></div><br /><b>product_table.xls (lists worksheet)</b><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://4.bp.blogspot.com/-_MkDqjqjuDU/UQ69mEuCy5I/AAAAAAAAAy8/u09czbpift0/s1600/user_table_lists.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="81" src="https://4.bp.blogspot.com/-_MkDqjqjuDU/UQ69mEuCy5I/AAAAAAAAAy8/u09czbpift0/s320/user_table_lists.png" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: justify;">As you can see in the images the business problem is quite complex. Each row represents a rule, and each column represents a condition. <a href="https://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html">Do you remember the rules syntax from my recent post?</a> So you would understand the hidden part of the spreadsheet that is right above the first visible row:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://2.bp.blogspot.com/--f9FvvQaAhM/UQ6-gcczcQI/AAAAAAAAAzM/GxGmoV6s3OE/s1600/product_table_header.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="71" src="https://2.bp.blogspot.com/--f9FvvQaAhM/UQ6-gcczcQI/AAAAAAAAAzM/GxGmoV6s3OE/s320/product_table_header.png" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><br /><div style="text-align: justify;">The rows from 2 to 6 represent some fixed configuration values such as rule set, imports (<a href="https://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html"> you've already seen that in my recent post</a>) and functions. Next in row number 7 you can find the name of the RuleTable. Then in row number 8 you have in our scenario either a CONDITION or an ACTION - so in other words either the LHS or rhe RHS respectively. Row number 9 is both representation of types presented in the condition and the binding to a variable. In row number 10 we have the exact LHS condition. Row number 11 shows the label of columns. From row number 12 we have the rules one by one. You can find the spreadsheets in the sources.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Now let's take a look at the code. Let's start with taking a look at the schemas defining the Product and the User.<br /><br /></div><div style="text-align: justify;"><b>Person.xsd</b><br /><br /></div><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;xsd:schema xmlns:xsd="https://www.w3.org/2001/XMLSchema"&gt;<br />    &lt;xsd:include schemaLocation="user.xsd"/&gt;<br /><br />    &lt;xsd:element name="Product"&gt;<br />        &lt;xsd:complexType&gt;<br />            &lt;xsd:sequence&gt;<br />                &lt;xsd:element name="Name" type="xsd:string"/&gt;<br />                &lt;xsd:element name="Type" type="ProductType"/&gt;<br />                &lt;xsd:element name="Price" type="xsd:double"/&gt;<br />                &lt;xsd:element name="CountryOfOrigin" type="CountryType"/&gt;<br />                &lt;xsd:element name="AdditionalInfo" type="xsd:string"/&gt;<br />                &lt;xsd:element name="Quantity" type="xsd:int"/&gt;<br />            &lt;/xsd:sequence&gt;<br />        &lt;/xsd:complexType&gt;<br />    &lt;/xsd:element&gt;<br /><br />    &lt;xsd:simpleType name="ProductType"&gt;<br />        &lt;xsd:restriction base="xsd:string"&gt;<br />            &lt;xsd:enumeration value="MEDICAL"/&gt;<br />            &lt;xsd:enumeration value="ELECTRONIC"/&gt;<br />        &lt;/xsd:restriction&gt;<br />    &lt;/xsd:simpleType&gt;<br /><br />&lt;/xsd:schema&gt;<br /></pre><br /><div style="text-align: justify;"><b>User.xsd</b><br /><br /></div><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;xsd:schema xmlns:xsd="https://www.w3.org/2001/XMLSchema"&gt;<br />    &lt;xsd:include schemaLocation="product.xsd"/&gt;<br /><br />    &lt;xsd:element name="User"&gt;<br />        &lt;xsd:complexType&gt;<br />            &lt;xsd:sequence&gt;<br />                &lt;xsd:element name="UserName" type="xsd:string"/&gt;<br />                &lt;xsd:element name="UserAge" type="xsd:int"/&gt;<br />                &lt;xsd:element name="UserCountry" type="CountryType"/&gt;<br />                &lt;xsd:element name="Decision" type="DecisionType"/&gt;<br />                &lt;xsd:element name="DecisionDescription" type="xsd:string"/&gt;<br />            &lt;/xsd:sequence&gt;<br />        &lt;/xsd:complexType&gt;<br />    &lt;/xsd:element&gt;<br /><br />    &lt;xsd:simpleType name="CountryType"&gt;<br />        &lt;xsd:restriction base="xsd:string"&gt;<br />            &lt;xsd:enumeration value="PL"/&gt;<br />            &lt;xsd:enumeration value="USA"/&gt;<br />            &lt;xsd:enumeration value="GER"/&gt;<br />            &lt;xsd:enumeration value="SWE"/&gt;<br />            &lt;xsd:enumeration value="UK"/&gt;<br />            &lt;xsd:enumeration value="ESP"/&gt;<br />        &lt;/xsd:restriction&gt;<br />    &lt;/xsd:simpleType&gt;<br /><br />    &lt;xsd:simpleType name="DecisionType"&gt;<br />        &lt;xsd:restriction base="xsd:string"&gt;<br />            &lt;xsd:enumeration value="ACCEPTED"/&gt;<br />            &lt;xsd:enumeration value="REJECTED"/&gt;<br />        &lt;/xsd:restriction&gt;<br />    &lt;/xsd:simpleType&gt;<br /><br />&lt;/xsd:schema&gt;<br /></pre><br />Due to the fact that we are using maven we may use a plugin that will convert the XSD into Java classes.<br /><br />part of the <b>pom.xml  </b><br /><br /><pre class="brush:xml"> &lt;build&gt;<br />        &lt;pluginManagement&gt;<br />            &lt;plugins&gt;<br />                &lt;plugin&gt;<br />                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br />                    &lt;version&gt;2.5.1&lt;/version&gt;<br />                &lt;/plugin&gt;<br />            &lt;/plugins&gt;<br />        &lt;/pluginManagement&gt;<br />        &lt;plugins&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;<br />                &lt;artifactId&gt;jaxb2-maven-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;1.5&lt;/version&gt;<br />                &lt;executions&gt;<br />                    &lt;execution&gt;<br />                        &lt;id&gt;xjc&lt;/id&gt;<br />                        &lt;goals&gt;<br />                            &lt;goal&gt;xjc&lt;/goal&gt;<br />                        &lt;/goals&gt;<br />                    &lt;/execution&gt;<br />                &lt;/executions&gt;<br />                &lt;configuration&gt;<br />                    &lt;packageName&gt;pl.grzejszczak.marcin.drools.decisiontable.model&lt;/packageName&gt;<br />                    &lt;schemaDirectory&gt;${project.basedir}/src/main/resources/xsd&lt;/schemaDirectory&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />        &lt;/plugins&gt;<br />    &lt;/build&gt;<br /></pre><br />Thanks to this plugin we have our generated by JAXB classes in the <b>pl.grzejszczak.marcin.decisiontable.model</b> package.<br /><br />Now off to the drools-context.xml file where we've defined all the necessary beans as far as Drools are concerned:<br /><br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;beans xmlns="https://www.springframework.org/schema/beans"<br />       xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"<br />       xmlns:drools="https://drools.org/schema/drools-spring"<br />       xsi:schemaLocation="https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd<br />  https://drools.org/schema/drools-spring https://drools.org/schema/drools-spring.xsd"&gt;<br /><br />    &lt;!-- Grid Node identifier that is registered in the CamelContext --&gt;<br />    &lt;drools:grid-node id="node1"/&gt;<br /><br />    &lt;drools:kbase id="productsKBase" node="node1"&gt;<br />        &lt;drools:resources&gt;<br />            &lt;drools:resource type="DTABLE" source="classpath:rules/product_table.xls"/&gt;<br />        &lt;/drools:resources&gt;<br />    &lt;/drools:kbase&gt;<br /><br />    &lt;drools:ksession id="productsKSession" name="productsKSession" type="stateless" kbase="productsKBase" node="node1"/&gt;<br /><br />    &lt;drools:kbase id="usersKBase" node="node1"&gt;<br />        &lt;drools:resources&gt;<br />            &lt;drools:resource type="DTABLE" source="classpath:rules/user_table.xls"/&gt;<br />        &lt;/drools:resources&gt;<br />    &lt;/drools:kbase&gt;<br /><br />    &lt;drools:ksession id="usersKSession" name="usersKSession" type="stateless" kbase="usersKBase" node="node1"/&gt;<br /><br />&lt;/beans&gt;</pre><br /><div style="text-align: justify;">As you can see in comparison to <a href="https://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html">the application context from the recent post </a>there are some differences. First instead of passing the DRL file as the resource inside the knowledge base we are providing the Decision table (<span style="font-family: Courier New, Courier, monospace;">DTABLE</span>). I've decided to pass in two seperate files but you can provide one file with several worksheets and access those worksheets (through the <span style="font-family: Courier New, Courier, monospace;">decisiontable-conf</span> element). Also there is an additional element called <span style="font-family: Courier New, Courier, monospace;">node</span>. We have to choose an implementation of the Node interface (Execution, Grid...) for the Camel route to work properly as you will see in a couple of seconds in the Spring application context file.&nbsp;</div><br /><b>applicationContext.xml</b><br /><br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;beans xmlns="https://www.springframework.org/schema/beans"<br />       xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"<br />       xmlns:camel="https://camel.apache.org/schema/spring"<br />       xmlns:context="https://www.springframework.org/schema/context"<br />       xsi:schemaLocation="https://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-3.0.xsd<br />                           https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd<br />                           https://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-2.8.0.xsd"&gt;<br /><br />    &lt;import resource="classpath:drools-context.xml"/&gt;<br />    &lt;!-- Show Spring where to search for the beans (in which packages) --&gt;<br />    &lt;context:component-scan base-package="pl.grzejszczak.marcin.drools.decisiontable" /&gt;<br /><br />    &lt;camel:camelContext id="camelContext"&gt;<br />        &lt;camel:route id="acceptanceRoute"&gt;<br />            &lt;camel:from uri="direct:acceptanceRoute"/&gt;<br />            &lt;camel:to uri="drools:node1/usersKSession"/&gt;<br />        &lt;/camel:route&gt;<br />        &lt;camel:route id="discountRoute"&gt;<br />            &lt;camel:from uri="direct:discountRoute"/&gt;<br />            &lt;camel:to uri="drools:node1/productsKSession"/&gt;<br />        &lt;/camel:route&gt;<br />    &lt;/camel:camelContext&gt;<br /><br />&lt;/beans&gt;<br /><br /></pre><div style="text-align: justify;">As you can see in order to access the Drools Camel Component we have to provide the <b>node </b>through which we will access the proper<b> knowledge session</b>. We have defined two routes - the first one ends at the Drools component that accesses the users knowledge session and the other the products knowledge session.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">We have a ProductService interface implementation called ProductServiceImpl that given an input User and Product objects pass them through the Camel's Producer Template to two Camel routes each ending at the Drools components. The concept behind this product service is that we are first processing the User if he can even buy the software and then we are checking what kind of a discount he would receive. From the service's point of view in fact we are just sending the object out and waiting for the response. Finally having reveived the response we are passing the User and the Product to the Financial Service implementation that will bill the user for the products that he has bought or reject his offer if needed.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><b>ProductServiceImpl.java</b></div><br /><pre class="brush:java">package pl.grzejszczak.marcin.drools.decisiontable.service;<br /><br />import org.apache.camel.CamelContext;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.beans.factory.annotation.Autowired;<br />import org.springframework.stereotype.Component;<br />import pl.grzejszczak.marcin.drools.decisiontable.model.Product;<br />import pl.grzejszczak.marcin.drools.decisiontable.model.User;<br /><br />import static com.google.common.collect.Lists.newArrayList;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 14.01.13<br /> */<br />@Component("productServiceImpl")<br />public class ProductServiceImpl implements ProductService {<br /><br />    private static final Logger LOGGER = LoggerFactory.getLogger(ProductServiceImpl.class);<br /><br />    @Autowired<br />    CamelContext camelContext;<br /><br />    @Autowired<br />    FinancialService financialService;<br /><br />    @Override<br />    public void runProductLogic(User user, Product product) {<br />        LOGGER.debug("Running product logic - first acceptance Route, then discount Route");<br />        camelContext.createProducerTemplate().sendBody("direct:acceptanceRoute", newArrayList(user, product));<br />        camelContext.createProducerTemplate().sendBody("direct:discountRoute", newArrayList(user, product));<br />        financialService.processOrder(user, product);<br />    }<br /><br />}<br /></pre><pre class="brush:java"></pre><div style="text-align: justify;"><br /></div><span style="text-align: justify;">Another crucial thing to remember about is that the Camel Drools Component requires the Command object as the input. As you can see, in the body we are sending a list of objects (and these are not Command objects). I did it on purpose since in my opinion it is better not to bind our code to a concrete solution. What if we find out that there is a better solution than Drools? Will we change all the code that we have created or just change the Camel route to point at our new solution? That's why Camel has the TypeConverters. We have our own here&nbsp;as well. First of all let's take a look at the implementation.</span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;"><b>ProductTypeConverter.java</b></span><br /><span style="text-align: justify;"><br /></span><br /><pre class="brush:java">package pl.grzejszczak.marcin.drools.decisiontable.converter;<br /><br />import org.apache.camel.Converter;<br />import org.drools.command.Command;<br />import org.drools.command.CommandFactory;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import pl.grzejszczak.marcin.drools.decisiontable.model.Product;<br /><br />import java.util.List;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 30.01.13<br /> * Time: 21:42<br /> */<br />@Converter<br />public class ProductTypeConverter {<br /><br />    private static final Logger LOGGER = LoggerFactory.getLogger(ProductTypeConverter.class);<br /><br />    @Converter<br />    public static Command toCommandFromList(List inputList) {<br />        LOGGER.debug("Executing ProductTypeConverter's toCommandFromList method");<br />        return CommandFactory.newInsertElements(inputList);<br />    }<br /><br />    @Converter<br />    public static Command toCommand(Product product) {<br />        LOGGER.debug("Executing ProductTypeConverter's toCommand method");<br />        return CommandFactory.newInsert(product);<br />    }<br />}<br /><br /></pre><span style="text-align: justify;">There is a good tutorial on TypeConverters on the <a href="https://camel.apache.org/type-converter.html">Camel website</a> - if you needed some more indepth info about it. Anyway, we are annotating our class and the functions used to convert different types into one another. What is important here is that we are showing Camel how to convert a list and a single product to Commands. Due to type erasure this will work regardless of the provided type that is why even though we are giving a list of Product &nbsp;and User, the toCommandFromList function will get executed.&nbsp;</span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;">In addition to this in order for the type converter to work we have to provide the fully quallified name of our class (FQN) in the&nbsp;<b>/META-INF/services/org/apache/camel/TypeConverter</b> file.</span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;"><b>TypeConverter</b></span><br /><span style="text-align: justify;"><br /></span><br /><pre class="brush:xml">pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter</pre><br /><span style="text-align: justify;">In order to properly test our functionality one should write quite a few tests that would verify the rules. A pretty good way would be to have input files stored in the test resources folders that are passed to the rule engine and then the result would be compared against the verified output (unfortunately it is rather impossible to make the business side develop such a reference set of outputs). Anyway let's take a look at the unit test that verifies only a few of the rules and the logs that are produced from running those rules:</span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;"><b>ProductServiceImplTest.java</b></span><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.drools.decisiontable.service.drools;<br /><br />import org.apache.commons.lang.builder.ReflectionToStringBuilder;<br />import org.apache.commons.lang.builder.ToStringStyle;<br />import org.junit.Test;<br />import org.junit.runner.RunWith;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.beans.factory.annotation.Autowired;<br />import org.springframework.test.context.ContextConfiguration;<br />import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br />import pl.grzejszczak.marcin.drools.decisiontable.model.*;<br />import pl.grzejszczak.marcin.drools.decisiontable.service.ProductService;<br /><br />import static org.junit.Assert.assertEquals;<br />import static org.junit.Assert.assertTrue;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.02.13<br /> * Time: 16:06<br /> */<br />@RunWith(SpringJUnit4ClassRunner.class)<br />@ContextConfiguration("classpath:applicationContext.xml")<br />public class ProductServiceImplTest {<br /><br />    private static final Logger LOGGER = LoggerFactory.getLogger(ProductServiceImplTest.class);<br /><br />    @Autowired<br />    ProductService objectUnderTest;<br /><br />    @Test<br />    public void testRunProductLogicUserPlUnderageElectronicCountryPL() throws Exception {<br />        int initialPrice = 1000;<br />        int userAge = 6;<br />        int quantity = 10;<br /><br />        User user = createUser("Smith", CountryType.PL, userAge);<br />        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);<br /><br />        printInputs(user, product);<br /><br />        objectUnderTest.runProductLogic(user, product);<br /><br />        printInputs(user, product);<br /><br />        assertTrue(product.getPrice() == initialPrice);<br />        assertEquals(DecisionType.REJECTED, user.getDecision());<br />    }<br /><br />    @Test<br />    public void testRunProductLogicUserPlHighAgeElectronicCountryPLLowQuantity() throws Exception {<br />        int initialPrice = 1000;<br />        int userAge = 19;<br />        int quantity = 1;<br /><br />        User user = createUser("Smith", CountryType.PL, userAge);<br />        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);<br /><br />        printInputs(user, product);<br /><br />        objectUnderTest.runProductLogic(user, product);<br /><br />        printInputs(user, product);<br /><br />        assertTrue(product.getPrice() == initialPrice);<br />        assertEquals(DecisionType.ACCEPTED, user.getDecision());<br />    }<br /><br />    @Test<br />    public void testRunProductLogicUserPlHighAgeElectronicCountryPLHighQuantity() throws Exception {<br />        int initialPrice = 1000;<br />        int userAge = 19;<br />        int quantity = 8;<br /><br />        User user = createUser("Smith", CountryType.PL, userAge);<br />        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);<br /><br />        printInputs(user, product);<br /><br />        objectUnderTest.runProductLogic(user, product);<br /><br />        printInputs(user, product);<br />        double expectedDiscount = 0.1;<br /><br />        assertTrue(product.getPrice() == initialPrice * (1 - expectedDiscount));<br />        assertEquals(DecisionType.ACCEPTED, user.getDecision());<br />    }<br /><br />    @Test<br />    public void testRunProductLogicUserUsaLowAgeElectronicCountryPLHighQuantity() throws Exception {<br />        int initialPrice = 1000;<br />        int userAge = 19;<br />        int quantity = 8;<br /><br />        User user = createUser("Smith", CountryType.USA, userAge);<br />        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);<br /><br />        printInputs(user, product);<br /><br />        objectUnderTest.runProductLogic(user, product);<br /><br />        printInputs(user, product);<br /><br />        assertTrue(product.getPrice() == initialPrice);<br />        assertEquals(DecisionType.REJECTED, user.getDecision());<br />    }<br /><br />    @Test<br />    public void testRunProductLogicUserUsaHighAgeMedicalCountrySWELowQuantity() throws Exception {<br />        int initialPrice = 1000;<br />        int userAge = 22;<br />        int quantity = 4;<br /><br />        User user = createUser("Smith", CountryType.USA, userAge);<br />        Product product = createProduct("Some name", initialPrice, CountryType.SWE, ProductType.MEDICAL, quantity);<br /><br />        printInputs(user, product);<br /><br />        objectUnderTest.runProductLogic(user, product);<br /><br />        printInputs(user, product);<br /><br />        assertTrue(product.getPrice() == initialPrice);<br />        assertEquals(DecisionType.ACCEPTED, user.getDecision());<br />    }<br /><br />    @Test<br />    public void testRunProductLogicUserUsaHighAgeMedicalCountrySWEHighQuantity() throws Exception {<br />        int initialPrice = 1000;<br />        int userAge = 22;<br />        int quantity = 8;<br /><br />        User user = createUser("Smith", CountryType.USA, userAge);<br />        Product product = createProduct("Some name", initialPrice, CountryType.SWE, ProductType.MEDICAL, quantity);<br /><br />        printInputs(user, product);<br /><br />        objectUnderTest.runProductLogic(user, product);<br /><br />        printInputs(user, product);<br />        double expectedDiscount = 0.25;<br /><br />        assertTrue(product.getPrice() == initialPrice * (1 - expectedDiscount));<br />        assertEquals(DecisionType.ACCEPTED, user.getDecision());<br />    }<br /><br />    private void printInputs(User user, Product product) {<br />        LOGGER.debug(ReflectionToStringBuilder.reflectionToString(user, ToStringStyle.MULTI_LINE_STYLE));<br />        LOGGER.debug(ReflectionToStringBuilder.reflectionToString(product, ToStringStyle.MULTI_LINE_STYLE));<br />    }<br /><br />    private User createUser(String name, CountryType countryType, int userAge){<br />        User user = new User();<br />        user.setUserName(name);<br />        user.setUserCountry(countryType);<br />        user.setUserAge(userAge);<br />        return user;<br />    }<br /><br />    private Product createProduct(String name, double price, CountryType countryOfOrigin, ProductType productType, int quantity){<br />        Product product = new Product();<br />        product.setPrice(price);<br />        product.setCountryOfOrigin(countryOfOrigin);<br />        product.setName(name);<br />        product.setType(productType);<br />        product.setQuantity(quantity);<br />        return product;<br />    }<br /><br />}<br /><br /></pre><span style="text-align: justify;">Of course the log.debugs in the tests are totally redundant but I wanted you to quickly see that the rules are operational :) Sorry for the length of the logs but I wrote a few tests to show different combinations of rules (in fact it's better too have too many logs than the other way round :) )</span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;"><br /></span><br /><pre class="brush:xml">pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1d48043[<br />  userName=Smith<br />  userAge=6<br />  userCountry=PL<br />  decision=&lt;null&gt;<br />  decisionDescription=&lt;null&gt;<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1e8f2a0[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=&lt;null&gt;<br />  quantity=10<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Sorry, according to your age (&lt; 18) and country (PL) you can't buy this product<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:29 Sorry, user has been rejected...<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1d48043[<br />  userName=Smith<br />  userAge=6<br />  userCountry=PL<br />  decision=REJECTED<br />  decisionDescription=Sorry, according to your age (&lt; 18) and country (PL) you can't buy this product<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1e8f2a0[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=&lt;null&gt;<br />  quantity=10<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@b28f30[<br />  userName=Smith<br />  userAge=19<br />  userCountry=PL<br />  decision=&lt;null&gt;<br />  decisionDescription=&lt;null&gt;<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@d6a0e0[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=&lt;null&gt;<br />  quantity=1<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Sorry, no discount will be granted.<br />pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@b28f30[<br />  userName=Smith<br />  userAge=19<br />  userCountry=PL<br />  decision=ACCEPTED<br />  decisionDescription=Congratulations, you have successfully bought the product<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@d6a0e0[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=Sorry, no discount will be granted.<br />  quantity=1<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@14510ac[<br />  userName=Smith<br />  userAge=19<br />  userCountry=PL<br />  decision=&lt;null&gt;<br />  decisionDescription=&lt;null&gt;<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1499616[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=&lt;null&gt;<br />  quantity=8<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations - you've been granted a 10% discount!<br />pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@14510ac[<br />  userName=Smith<br />  userAge=19<br />  userCountry=PL<br />  decision=ACCEPTED<br />  decisionDescription=Congratulations, you have successfully bought the product<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1499616[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=900.0<br />  countryOfOrigin=PL<br />  additionalInfo=Congratulations - you've been granted a 10% discount!<br />  quantity=8<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@17667bd[<br />  userName=Smith<br />  userAge=19<br />  userCountry=USA<br />  decision=&lt;null&gt;<br />  decisionDescription=&lt;null&gt;<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@ad9f5d[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=&lt;null&gt;<br />  quantity=8<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Sorry, according to your age (&lt; 18) and country (USA) you can't buy this product<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:29 Sorry, user has been rejected...<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@17667bd[<br />  userName=Smith<br />  userAge=19<br />  userCountry=USA<br />  decision=REJECTED<br />  decisionDescription=Sorry, according to your age (&lt; 18) and country (USA) you can't buy this product<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@ad9f5d[<br />  name=Electronic<br />  type=ELECTRONIC<br />  price=1000.0<br />  countryOfOrigin=PL<br />  additionalInfo=&lt;null&gt;<br />  quantity=8<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@9ff588[<br />  userName=Smith<br />  userAge=22<br />  userCountry=USA<br />  decision=&lt;null&gt;<br />  decisionDescription=&lt;null&gt;<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1b0d2d0[<br />  name=Some name<br />  type=MEDICAL<br />  price=1000.0<br />  countryOfOrigin=SWE<br />  additionalInfo=&lt;null&gt;<br />  quantity=4<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@9ff588[<br />  userName=Smith<br />  userAge=22<br />  userCountry=USA<br />  decision=ACCEPTED<br />  decisionDescription=Congratulations, you have successfully bought the product<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1b0d2d0[<br />  name=Some name<br />  type=MEDICAL<br />  price=1000.0<br />  countryOfOrigin=SWE<br />  additionalInfo=&lt;null&gt;<br />  quantity=4<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1b27882[<br />  userName=Smith<br />  userAge=22<br />  userCountry=USA<br />  decision=&lt;null&gt;<br />  decisionDescription=&lt;null&gt;<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@5b84b[<br />  name=Some name<br />  type=MEDICAL<br />  price=1000.0<br />  countryOfOrigin=SWE<br />  additionalInfo=&lt;null&gt;<br />  quantity=8<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product<br />pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method<br />pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you are granted a discount<br />pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1b27882[<br />  userName=Smith<br />  userAge=22<br />  userCountry=USA<br />  decision=ACCEPTED<br />  decisionDescription=Congratulations, you have successfully bought the product<br />]<br />pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@5b84b[<br />  name=Some name<br />  type=MEDICAL<br />  price=750.0<br />  countryOfOrigin=SWE<br />  additionalInfo=Congratulations, you are granted a discount<br />  quantity=8<br />]<br /><br /></pre><span style="text-align: justify;">In this post I've presented how you can push some of your developing work to your BA by giving him a tool which he can be able to work woth - the Decision Tables in a spreadsheet. What is more now you will now how to integrate Drools with Camel. Hopefully you will see how you can simplify (thus minimize the cost of implementing and supporting) the implementation of business rules bearing in mind how prone to changes they are. I hope that this example will even better illustrate how difficult it would be to implement all the business rules in Java than in the <a href="https://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html">previous post about Drools.</a></span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;">If you have any experience with Drools in terms of decision tables, integration with Spring and Camel please feel free to leave a comment - let's have a discussion on that :)</span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;">All the code is available at Too Much Coding repository at <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/eeda79f74a4af30091490ab3507879254540e118/Drools/Decision%20table?at=default">Bitbucket </a>and <a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Drools/Decision%20table">GitHub</a>.</span><span style="text-align: justify;"><br /></span><br /><span style="text-align: justify;"><br /></span><span style="text-align: justify;">Cheers!</span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Camel With Spring, Routing With Enrichment Service]]></title>
    <link href="https://toomuchcoding.com/blog/2012/11/22/apache-camel-with-spring-routing-with/"/>
    <updated>2012-11-22T14:13:00-08:00</updated>
    <id>https://toomuchcoding.com/blog/2012/11/22/apache-camel-with-spring-routing-with</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Sorry for not having posted anything in some time but I had plenty of work. Anyway today I will continue the example with JMS that I've shown you some time ago.<br />
<!--more-->
<br />The idea of the previous example was to simplify the work that we had to do in a manual way - we've sed JmsTemplate and Spring listener containers. The routing as such unfortunately was still done by us. In order to facilitate this process we can use <a href="https://camel.apache.org/">Apache Camel</a>.<br /><br />The following example bases on the one that we've seen in this post&nbsp;<a href="https://toomuchcoding.blogspot.com/2012/11/spring-jms-message-automatic-conversion.html">Spring JMS, message automatic conversion, JMS template</a>&nbsp;but with slight modifications:<br /><br /><b>CamelRouter.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.camel;<br /><br />import org.apache.camel.spring.Main;<br /><br />public class CamelRouter {<br /><br /> /**<br />  * @param args<br />  * @throws Exception<br />  */<br /> public static void main(String[] args) throws Exception {<br />  Main main = new Main();<br />  main.setApplicationContextUri("/camel/camelContext.xml");<br />  main.run(args);<br /> }<br /><br />}<br /><br /><br /></pre>What we can see here is the usage of the Camel's <span style="font-family: Courier New, Courier, monospace;">Main</span> class which you can reuse to more easily boot up Camel and keep it running until the JVM terminate. <br /><br />Then we have a new file <span style="font-family: Courier New, Courier, monospace;">camelContext.xml</span> in which we have the Camel context in the Spring configuration file.<br /><br /><b>camelContext.xml</b><br /><br /><br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;beans xmlns="https://www.springframework.org/schema/beans" <br /> xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"<br /> xsi:schemaLocation="https://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring.xsd https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd "&gt;<br /> <br /> &lt;import resource="classpath:/camel/jmsApplicationContext.xml" /&gt;<br /> <br /> &lt;camel:camelContext id="camel" xmlns:camel="https://camel.apache.org/schema/spring"&gt;<br />  &lt;camel:dataFormats&gt;<br />   &lt;camel:jaxb id="jaxb" prettyPrint="true" contextPath="pl.grzejszczak.marcin.camel.jaxb.generated" /&gt;<br />  &lt;/camel:dataFormats&gt;<br /><br />  &lt;camel:route&gt;<br />   &lt;camel:from uri="activemq:topic:Initial.Topic" /&gt;<br />   &lt;camel:unmarshal ref="jaxb" /&gt;<br />   &lt;camel:bean ref="enrichingService" /&gt;<br />   &lt;camel:marshal ref="jaxb" /&gt;<br />   &lt;camel:to uri="activemq:topic:Routed.Topic" /&gt;<br />  &lt;/camel:route&gt;<br /><br /> &lt;/camel:camelContext&gt;<br />&lt;/beans&gt;<br /></pre><br />We are defining in this file in order to create a Camel Route - from the activemq topic called <i>Initial.Topic</i> to the one called <i>Routed.Topic</i>. In the meantime we are doing some unmarshalling and marshalling by means of Jaxb.<br /><br />In the jmsApplicationContext we no longer define the sender to the final topic: <i>Routed.Topic</i>.<br /><br /><b>jmsApplicationContext.java</b><br /><br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;beans xmlns="https://www.springframework.org/schema/beans"<br /> xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xmlns:context="https://www.springframework.org/schema/context"<br /> xmlns:jms="https://www.springframework.org/schema/jms" xmlns:oxm="https://www.springframework.org/schema/oxm"<br /> xsi:schemaLocation="https://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-3.0.xsd https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd https://www.springframework.org/schema/jms https://www.springframework.org/schema/jms/spring-jms-3.0.xsd https://www.springframework.org/schema/oxm https://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd"&gt;<br /><br /> &lt;!-- Spring configuration based on annotations --&gt;<br /> &lt;context:annotation-config /&gt;<br /> &lt;!-- Show Spring where to search for the beans (in which packages) --&gt;<br /> &lt;context:component-scan base-package="pl.grzejszczak.marcin.camel" /&gt;<br /> <br /> &lt;!-- Show Spring where to search for the properties files --&gt;<br /> &lt;context:property-placeholder location="classpath:/camel/jms.properties" /&gt;<br /><br /> &lt;!-- The ActiveMQ connection factory with specification of the server URL --&gt;<br /> &lt;bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"&gt;<br />  &lt;property name="brokerURL" value="tcp://localhost:61616" /&gt;<br /> &lt;/bean&gt;<br /><br /> &lt;!-- Spring's jms connection factory --&gt;<br /> &lt;bean id="cachingConnectionFactory"<br />  class="org.springframework.jms.connection.CachingConnectionFactory"&gt;<br />  &lt;property name="targetConnectionFactory" ref="activeMQConnectionFactory" /&gt;<br />  &lt;property name="sessionCacheSize" value="10" /&gt;<br /> &lt;/bean&gt;<br /><br /> &lt;!-- The name of the queue from which we will take the messages --&gt;<br /> &lt;bean id="origin" class="org.apache.activemq.command.ActiveMQTopic"&gt;<br />  &lt;constructor-arg value="${jms.origin}" /&gt;<br /> &lt;/bean&gt;<br /> &lt;!-- The name of the queue to which we will route the messages --&gt;<br /> &lt;bean id="destination" class="org.apache.activemq.command.ActiveMQTopic"&gt;<br />  &lt;constructor-arg value="${jms.destination}" /&gt;<br /> &lt;/bean&gt;<br /><br /> &lt;!-- Configuration of the JmsTemplate together with the connection factory and the message converter --&gt;<br /> &lt;bean id="producerTemplate" class="org.springframework.jms.core.JmsTemplate"&gt;<br />  &lt;property name="connectionFactory" ref="cachingConnectionFactory" /&gt;<br />  &lt;property name="messageConverter" ref="oxmMessageConverter" /&gt;<br /> &lt;/bean&gt;<br /><br /> &lt;!-- Custom message sender sending messages to the initial queue --&gt;<br /> &lt;bean id="originPlayerSender" class="pl.grzejszczak.marcin.camel.manual.jms.PlayerDetailsSenderImpl"&gt;<br />  &lt;property name="destination" ref="origin" /&gt;<br /> &lt;/bean&gt;<br /><br /> &lt;!-- Custom message listener - listens to the destination queue  --&gt;<br /> &lt;bean id="destinationListenerImpl" class="pl.grzejszczak.marcin.camel.manual.jms.FinalListenerImpl"/&gt;<br /><br /> <br /> &lt;!-- Spring's jms message listener container - specified the connection factory, the queue to be listened to and the component that listens to the queue --&gt;<br /> &lt;bean id="jmsDestinationContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt;<br />  &lt;property name="connectionFactory" ref="cachingConnectionFactory" /&gt;<br />  &lt;property name="destination" ref="destination" /&gt;<br />  &lt;property name="messageListener" ref="destinationListenerImpl" /&gt;<br /> &lt;/bean&gt;<br /> <br /> &lt;!-- Message converter - automatically marshalls and unmarshalls messages using the provided marshaller / unmarshaller--&gt;<br /> &lt;bean id="oxmMessageConverter" class="org.springframework.jms.support.converter.MarshallingMessageConverter"&gt;<br />          &lt;property name="marshaller" ref="marshaller" /&gt;<br />          &lt;property name="unmarshaller" ref="marshaller" /&gt;<br />     &lt;/bean&gt;<br /><br /> &lt;bean id="enrichingService" class="pl.grzejszczak.marcin.camel.service.EnrichingServiceImpl"/&gt;<br /><br /> &lt;!-- Spring's JAXB implementation of marshaller - provided a class the JAXB generated class --&gt;<br />     &lt;oxm:jaxb2-marshaller id="marshaller"&gt;<br />          &lt;oxm:class-to-be-bound name="pl.grzejszczak.marcin.camel.jaxb.generated.PlayerDetails" /&gt;<br />     &lt;/oxm:jaxb2-marshaller&gt;<br /><br />&lt;/beans&gt;<br /><br /></pre>Once we have already initialized our camel context, what we need to do is to send a message to the <i>Initial.Topic</i>. We are doing it by means of our modified <span style="font-family: Courier New, Courier, monospace;">ActiveMQRouter</span> class.<br /><br /><b>ActiveMQRouter.java</b><br /><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.camel.manual;<br /><br />import java.io.File;<br />import java.util.Scanner;<br /><br />import javax.jms.JMSException;<br /><br />import org.springframework.context.ApplicationContext;<br />import org.springframework.context.support.ClassPathXmlApplicationContext;<br />import org.springframework.core.io.ClassPathResource;<br />import org.springframework.core.io.Resource;<br /><br />import pl.grzejszczak.marcin.camel.jaxb.PlayerDetailsConverter;<br />import pl.grzejszczak.marcin.camel.jaxb.generated.PlayerDetails;<br />import pl.grzejszczak.marcin.camel.manual.jms.FinalListenerImpl;<br />import pl.grzejszczak.marcin.camel.manual.jms.Sender;<br /><br />public class ActiveMQRouter {<br /><br /> /**<br />  * @param args<br />  * @throws JMSException<br />  */<br /> public static void main(String[] args) throws Exception {<br />  ApplicationContext context = new ClassPathXmlApplicationContext("/camel/jmsApplicationContext.xml");<br />  @SuppressWarnings("unchecked")<br />  Sender&lt;PlayerDetails&gt; sender = (Sender&lt;PlayerDetails&gt;) context.getBean("originPlayerSender");<br /><br />  Resource resource = new ClassPathResource("/camel/RobertLewandowski.xml");<br /><br />  Scanner scanner = new Scanner(new File(resource.getURI())).useDelimiter("\\Z");<br />  String contents = scanner.next();<br /><br />  PlayerDetailsConverter converter = context.getBean(PlayerDetailsConverter.class);<br /><br />  FinalListenerImpl listener = (FinalListenerImpl) context.getBean("finalListenerImpl");<br /><br />  sender.sendMessage(converter.unmarshal(contents));<br /> }<br />}<br /><br /></pre>The class is reading the file and sending it to the initial topic. We also initialize a FinalListenerImpl - a class that will listen to the messages coming to the final topic - to prove that everything is working correctly.<br /><br />That's it! Now let's check out the logs. Logs of CamelRouter:<br /><br /><br /><pre class="brush:xml">2012-11-22 22:51:39,429 INFO  [main] org.apache.camel.main.MainSupport:300 Apache Camel 2.9.2 starting<br />2012-11-22 22:51:40,028 INFO  [main] org.springframework.context.support.ClassPathXmlApplicationContext:495 Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4c5e176f: startup date [Thu Nov 22 22:51:40 CET 2012]; root of context hierarchy<br />2012-11-22 22:51:40,213 INFO  [main] org.springframework.beans.factory.xml.XmlBeanDefinitionReader:315 Loading XML bean definitions from class path resource [camel/camelContext.xml]<br />2012-11-22 22:51:40,746 INFO  [main] org.springframework.beans.factory.xml.XmlBeanDefinitionReader:315 Loading XML bean definitions from class path resource [camel/jmsApplicationContext.xml]<br />2012-11-22 22:51:41,120 INFO  [main] org.springframework.context.annotation.ClassPathBeanDefinitionScanner:210 JSR-330 'javax.inject.Named' annotation found and supported for component scanning<br />2012-11-22 22:51:43,219 INFO  [main] org.springframework.beans.factory.config.PropertyPlaceholderConfigurer:177 Loading properties file from class path resource [camel/jms.properties]<br />2012-11-22 22:51:43,233 INFO  [main] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:139 JSR-330 'javax.inject.Inject' annotation found and supported for autowiring<br />2012-11-22 22:51:43,274 INFO  [main] org.springframework.beans.factory.support.DefaultListableBeanFactory:557 Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@19d03a4e: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,AgeEnricher,ClubEnricher,PlayerDetailsConverter,finalListenerImpl,playerDetailsSenderImpl,org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,activeMQConnectionFactory,cachingConnectionFactory,origin,destination,producerTemplate,originPlayerSender,destinationListenerImpl,jmsDestinationContainer,oxmMessageConverter,enrichingService,marshaller,template,consumerTemplate,camel:beanPostProcessor,camel,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy<br />2012-11-22 22:51:43,424 INFO  [main] org.springframework.oxm.jaxb.Jaxb2Marshaller:436 Creating JAXBContext with classes to be bound [class pl.grzejszczak.marcin.camel.jaxb.generated.PlayerDetails]<br />2012-11-22 22:51:44,521 INFO  [main] org.springframework.context.support.DefaultLifecycleProcessor:334 Starting beans in phase 2147483647<br />2012-11-22 22:51:45,061 INFO  [main] org.springframework.jms.connection.CachingConnectionFactory:291 Established shared JMS Connection: ActiveMQConnection {id=ID:marcin-SR700-47684-1353621104666-1:1,clientId=null,started=false}<br />2012-11-22 22:51:45,608 INFO  [main] org.apache.camel.spring.SpringCamelContext:1374 Apache Camel 2.9.2 (CamelContext: camel) is starting<br />2012-11-22 22:51:45,611 INFO  [main] org.apache.camel.management.ManagementStrategyFactory:38 JMX enabled. Using ManagedManagementStrategy.<br />2012-11-22 22:51:45,850 INFO  [main] org.apache.camel.management.DefaultManagementLifecycleStrategy:790 StatisticsLevel at All so enabling load performance statistics<br />2012-11-22 22:51:45,961 INFO  [main] org.apache.camel.impl.converter.AnnotationTypeConverterLoader:119 Found 3 packages with 15 @Converter classes to load<br />2012-11-22 22:51:45,995 INFO  [main] org.apache.camel.impl.converter.DefaultTypeConverter:405 Loaded 170 core type converters (total 170 type converters)<br />2012-11-22 22:51:46,002 INFO  [main] org.apache.camel.impl.converter.AnnotationTypeConverterLoader:109 Loaded 2 @Converter classes<br />2012-11-22 22:51:46,023 INFO  [main] org.apache.camel.impl.converter.AnnotationTypeConverterLoader:119 Found 1 packages with 1 @Converter classes to load<br />2012-11-22 22:51:46,024 WARN  [main] org.apache.camel.impl.converter.DefaultTypeConverter:257 Overriding type converter from: StaticMethodTypeConverter: public static org.apache.activemq.command.ActiveMQDestination org.apache.camel.component.activemq.ActiveMQConverter.toDestination(java.lang.String) to: StaticMethodTypeConverter: public static org.apache.activemq.command.ActiveMQDestination org.apache.activemq.camel.converter.ActiveMQConverter.toDestination(java.lang.String)<br />2012-11-22 22:51:46,043 INFO  [main] org.apache.camel.impl.converter.DefaultTypeConverter:431 Loaded additional 3 type converters (total 173 type converters) in 0.041 seconds<br />2012-11-22 22:51:46,360 INFO  [main] org.apache.camel.converter.jaxb.JaxbDataFormat:277 Creating JAXBContext with contextPath: pl.grzejszczak.marcin.camel.jaxb.generated and ApplicationContextClassLoader: sun.misc.Launcher$AppClassLoader@35a16869<br />2012-11-22 22:51:46,500 INFO  [main] org.apache.camel.spring.SpringCamelContext:1980 Route: route1 started and consuming from: Endpoint[activemq://topic:Initial.Topic]<br />2012-11-22 22:51:46,509 INFO  [main] org.apache.camel.spring.SpringCamelContext:1409 Total 1 routes, of which 1 is started.<br />2012-11-22 22:51:46,510 INFO  [main] org.apache.camel.spring.SpringCamelContext:1410 Apache Camel 2.9.2 (CamelContext: camel) started in 0.901 seconds<br />2012-11-22 22:51:46,519 INFO  [main] org.springframework.context.support.DefaultLifecycleProcessor:334 Starting beans in phase 2147483647<br />2012-11-22 22:52:08,375 DEBUG [Camel (camel) thread #1 - JmsConsumer[Initial.Topic]] pl.grzejszczak.marcin.camel.service.EnrichingServiceImpl:21 Enriching player details<br />2012-11-22 22:52:08,377 DEBUG [Camel (camel) thread #1 - JmsConsumer[Initial.Topic]] pl.grzejszczak.marcin.camel.enricher.AgeEnricher:17 Enriching player [Lewandowski] with age data<br />2012-11-22 22:52:10,379 DEBUG [Camel (camel) thread #1 - JmsConsumer[Initial.Topic]] pl.grzejszczak.marcin.camel.enricher.ClubEnricher:16 Enriching player [Lewandowski] with club data<br />2012-11-22 22:52:12,462 DEBUG [jmsDestinationContainer-1] pl.grzejszczak.marcin.camel.manual.jms.FinalListenerImpl:35 Message already enriched! Shutting down the system<br /><br /></pre>We can see that the Camel Context has been initialized and then the bean that we have created in the <span style="font-family: Courier New, Courier, monospace;">jmsApplicationContext.xml</span> that is listening to the final destination is acknowledging that the message has been enriched properly.<br /><br />What about the <span style="font-family: Courier New, Courier, monospace;">ActiveMQRouter.java</span> logs?<br /><br /><br /><pre class="brush:xml">2012-11-22 22:52:06,077 INFO  [main] org.springframework.context.support.ClassPathXmlApplicationContext:495 Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@43462851: startup date [Thu Nov 22 22:52:06 CET 2012]; root of context hierarchy<br />2012-11-22 22:52:06,153 INFO  [main] org.springframework.beans.factory.xml.XmlBeanDefinitionReader:315 Loading XML bean definitions from class path resource [camel/jmsApplicationContext.xml]<br />2012-11-22 22:52:06,417 INFO  [main] org.springframework.context.annotation.ClassPathBeanDefinitionScanner:210 JSR-330 'javax.inject.Named' annotation found and supported for component scanning<br />2012-11-22 22:52:06,721 INFO  [main] org.springframework.beans.factory.config.PropertyPlaceholderConfigurer:177 Loading properties file from class path resource [camel/jms.properties]<br />2012-11-22 22:52:06,733 INFO  [main] org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:139 JSR-330 'javax.inject.Inject' annotation found and supported for autowiring<br />2012-11-22 22:52:06,758 INFO  [main] org.springframework.beans.factory.support.DefaultListableBeanFactory:557 Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@362f0d54: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,AgeEnricher,ClubEnricher,PlayerDetailsConverter,finalListenerImpl,playerDetailsSenderImpl,org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,activeMQConnectionFactory,cachingConnectionFactory,origin,destination,producerTemplate,originPlayerSender,destinationListenerImpl,jmsDestinationContainer,oxmMessageConverter,enrichingService,marshaller,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy<br />2012-11-22 22:52:07,224 INFO  [main] org.springframework.oxm.jaxb.Jaxb2Marshaller:436 Creating JAXBContext with classes to be bound [class pl.grzejszczak.marcin.camel.jaxb.generated.PlayerDetails]<br />2012-11-22 22:52:07,628 INFO  [main] org.springframework.context.support.DefaultLifecycleProcessor:334 Starting beans in phase 2147483647<br />2012-11-22 22:52:07,883 INFO  [main] org.springframework.jms.connection.CachingConnectionFactory:291 Established shared JMS Connection: ActiveMQConnection {id=ID:marcin-SR700-53586-1353621127755-1:1,clientId=null,started=false}<br />2012-11-22 22:52:08,093 DEBUG [main] pl.grzejszczak.marcin.camel.manual.jms.PlayerDetailsSenderImpl:26 Sending [pl.grzejszczak.marcin.camel.jaxb.generated.PlayerDetails@3ea86d12] to topic [topic://Initial.Topic]<br />2012-11-22 22:52:12,463 DEBUG [jmsDestinationContainer-1] pl.grzejszczak.marcin.camel.manual.jms.FinalListenerImpl:35 Message already enriched! Shutting down the system<br /><br /></pre>First we see that our spring Context has been initialized and then we see that a message has been sent to the <i>Initial.Topic</i>. At the end of the processing we can see that the listener is confirming that the message has been properly enriched - so all the Camel work has been done in a proper way.<br /><br />This example is showing how easy and simple it can be to create a routing / enriching service by means of Spring and Camel (integrated with Spring).<br /><br />The sources are available at <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/26b70bca3b44e37c20c627e0efe4644d28f8d468/Camel%20and%20Spring?at=default">Too Much Coding's repository at bitbucket</a>.<br /><br /></div>

]]></content>
  </entry>
  
</feed>
