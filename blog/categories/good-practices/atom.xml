<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Good Practices | TOO MUCH CODING]]></title>
  <link href="http://toomuchcoding.com/blog/categories/good-practices/atom.xml" rel="self"/>
  <link href="http://toomuchcoding.com/"/>
  <updated>2018-05-22T14:43:12+02:00</updated>
  <id>http://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Business Value Gone Wild]]></title>
    <link href="http://toomuchcoding.com/blog/2015/10/16/business-value-gone-wild/"/>
    <updated>2015-10-16T08:58:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2015/10/16/business-value-gone-wild</id>
    <content type="html"><![CDATA[<div class='post'>
This blog post will not be about microservices, Spring or any technology that I've already talked about in <a href="http://toomuchcoding.blogspot.com/">Too much coding blog</a>. This time it will be my opinion on two subjects<br /><ul><li>the more and more frequent "it's not my problem" approach in the IT industry running in a corporation.&nbsp;</li><li>the "business value" frenzy of the management</li></ul>This article is definitely not a motivational one. Quite frankly, you might get depressed after reading it. Nonetheless, it's better to know how really corporate life sometimes looks like rather than get hit in the face.<br /><br />TL;DR : the more you care in a corporate enterprise the worse for you. Eventually some developers will hate your ideas of quality and standards because they are paid to tap the keys. Your management will fire you for not bringing "business value". The faster you embrace it, the better for you - you'll start searching for a new job sooner.<br /><div><br /><div><a name='more'></a>
<!--more-->
</div><h4>Features are not only functionalities</h4><div><br />Let's define some facts: IT is paid by the business. Business wants features. IT has to deliver features to gain money. That's a fact and our reality. Even if you hear from your managers that "cleaning technical debt is a necessity" what they really think is:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s1600/technical_debt.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="224" src="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s320/technical_debt.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div></div><div><br /></div><div>And actually that's not bizarre - business has no understanding of the technical aspects of the IT work. Here we can discern two types of business people:<br /><ul><li>they don't get technical aspects, but they trust the engineers</li><li>they don't care about technical aspects and they won't listen to any of the programmers' advice</li></ul><br />If you have the latter business people then most likely you're in this situation:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" /></a></div><br />and actually you should be doing such a shift:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s1600/cable_change.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="210" src="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s320/cable_change.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">http://www.technalytical.com/2012/04/aesthetical-cable-management-before-and.html</td></tr></tbody></table>In order to grow faster. What makes me really surprised that continuously the business picks the first option - just add more mess to the existing one without thinking of the consequences.<br /><br />Now for the tricky part. Now change the word "business" to "developer" and everything is still valid.<br /><br />"Delivering a feature" it's not only coding some functions in whatever language you are using. It's not taking a keyboard and pressing the keys to make the functionality work. If this is your approach then you're a key tapper. Tapping keys to get things done.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s1600/dunno.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="231" src="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s320/dunno.jpg" width="320" /></a></div><br /></div><div><br /></div><h4>Programming is more than tapping keys</h4><div><br />I hope that nobody feels offended by this term "key tapper". I'm not trying to be offensive - I'm just describing what I saw in my career. In my opinion there are a couple of different types of IT guys:<br /><br /><ul><li>there are people for whom programming is a passion. They put a lot of energy and effort to make things better</li><li>there are also IT guys for whom programming isn't a passion, but still put (sucessfully) &nbsp;a lot of energy and effort in order to make things better just because they want to be honest and valuable employees (thanks Michal Szostek)</li><li>there are people for whom programming is not a passion and they just come to work and tap the keys&nbsp;</li><li>there are others who would love to do stuff properly but the business is breathing at their necks to do stuff in a bad way because the "deadlines are coming".</li><li>there are positions where people last. They come and simulate work. They lie, talk a lot and delegate work so that there is some impression of progress</li></ul><br />Regardless of the position, if one doesn't focus on quality and just taps in the functionality then:&nbsp;</div><div><ul><li>even if he provides the business feature it might badly influence other people (introducing coupling between modules, breaking encapsulation etc.)</li><li>the functionality might be written in such a way that you will result in the global timeout of the whole system</li><li>you're not thinking about the company standards (<a href="http://www.slideshare.net/MarcinGrzejszczak/4financeit-microservices-092015-kaunas-jug/87?src=clipshare">passing of CorrelationID for instance</a>), that will break the approaches set in the company. This in effect will lead in increased time needed to provide support</li><li>writing the next functionality will take more time than the previous one</li></ul></div><div>Even though it seems to be common knowledge, you can far too often hear something like this:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote>Now imagine that you join a project which is full of such developers and you're asked to fix a bug:<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s1600/new_guy.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s400/new_guy.png" width="267" /></a></div><br /><h4>Technical changes are not bringing money</h4><div><br />We have to educate both the business and the developers: writing features and providing business value is actually a sum of a coded and tested functionality with technical advancement. What are those? Code refactoring, introduction of new approaches, migrations from one way of doing things in one way to another. For example:</div><div><ul><li>version control system (e.g. SVN to Git)</li><li>build system (e.g Maven to Gradle)</li><li>UI framework (e.g. Vaadin to AngularJS)</li><li>library versions (e.g. Spring 3.0 to Spring 4.0)</li><li>going from deployment to application servers to embedded servlet containers (e.g. Glassifsh to embedded JAR with Jetty)</li></ul></div><div>Why do we want these changes to happen? Because they ease our work and enforce standards. Why are standards important?<br /><br /><div style="text-align: center;"><i>"Pick a plug they said, it's gonna be easy, they said"</i></div><br /><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s1600/plugs.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="196" src="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s400/plugs.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">https://abdulinnewzealand.wordpress.com/2012/12/03/new-things-from-my-visit-to-new-zeland/</td></tr></tbody></table>If every team in the company uses different:<br /><br /><ul><li>libraries</li><li>approach to testing</li><li>approach to deployment</li><li>approach to running the application</li></ul><br />Then you can tell your business that they will pay A LOT of money for the support. The learning curve will be gigantic for the newcomers. But hey! It's better to code a new functionality in the meantime right?<br /><br />Seemingly all the developers would like to see the effect of those migrations and standardization. Everybody wants this to happen but who should actually do it? When asked about this you might hear:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote><div>How can we solve this?<br /><br /><b>Stupid idea</b><br /><br />Introduce the following flow of working in IT:</div><div><ul><li>the "coding team" writes a business feature and pushes it to master</li><li>the "clean code team" rewrites the code according to the clean code standards</li><li>the "technical team" introduces the technical standards for the written piece of code</li><li>the "migration team" migrates the code from one approach to another</li></ul><div>The outcome of the cooperation could look like this:</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s1600/bathroom.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s320/bathroom.jpg" width="247" /></a></div><div><br /></div><div><br /></div><div><b>Good idea</b><br /><br />Introduce... caring! Invest a lot of time and effort in educating business and developers that you have to take care of the code quality. Imagine where your company would be if every programmer would focus for 1 hour per day to manage the technical debt. If your managers don't understand the importance of clearing that debt, then you should consider changing jobs cause it's going to get worse with every single push to the repo.<br /><br /></div></div><h4>You are an engineer!</h4><div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s1600/engineer.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s320/engineer.jpg" width="320" /></a></div><br />Developing a feature is not just typing in code that compiles and makes the tests pass. Maybe the constant breathing of the project manager on your neck made you forget about this but you are an engineer. Following <a href="https://en.wikipedia.org/wiki/Engineer">Wikipedia</a>:</div><blockquote class="tr_bq"><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">An&nbsp;</span><b style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">engineer</b><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;is a&nbsp;</span><a href="https://en.wikipedia.org/wiki/Profession" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Profession">professional</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;practitioner of&nbsp;</span><a href="https://en.wikipedia.org/wiki/Engineering" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Engineering">engineering</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">, concerned with applying&nbsp;</span><a class="mw-redirect" href="https://en.wikipedia.org/wiki/Scientific_knowledge" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Scientific knowledge">scientific knowledge</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">,&nbsp;</span><a href="https://en.wikipedia.org/wiki/Mathematics" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Mathematics">mathematics</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">, and&nbsp;</span><a href="https://en.wikipedia.org/wiki/Ingenuity" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Ingenuity">ingenuity</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;to develop solutions for technical, societal and commercial problems. Engineers design materials, structures, and systems while considering the limitations imposed by practicality, regulation, safety, and cost.</span><sup class="reference" id="cite_ref-bls_1-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-bls-1" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[1]</a></sup><sup class="reference" id="cite_ref-nspe_2-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-nspe-2" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[2]</a></sup><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;The word&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">engineer</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;is derived from the&nbsp;</span><a href="https://en.wikipedia.org/wiki/Latin" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Latin">Latin</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;words&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">ingeniare</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;("to contrive, devise") and&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">ingenium</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">("cleverness").</span><sup class="reference" id="cite_ref-3" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-3" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[3]</a></sup><sup class="reference" id="cite_ref-4" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-4" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[4]</a></sup></blockquote><div>So other than telling one again:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote><div>you should consider all of the technical aspect before even writing a single line of code. Then you should say:</div><blockquote class="tr_bq">My schedule is tight but I'll fix the issues that you suggested. I understand that delivering business value means writing a feature and making the technical progress as a company. This is what I'm paid for and what you are referring to is part of my duties.&nbsp;</blockquote>Unfortunately there is one problem with this approach...<br /><br /><h4>Are you an engineer that has a say? You're gonna get fired!</h4><br />Yes, if you start caring in a corporate enterprise you will eventually get fired. Business prefers people who nod their heads and agree to everything. After some time quality becomes a burden for the management. It becomes a cost that doesn't bring "business value".<br /><br />So you will start fighting for the quality because this is the very meaning of your programming life. Deliver quality software that satisfies the business requirements, bearing in mind technical consequences. You will defend your developers against the growing pressure from the business to deliver features at a larger pace. The corporate axe will come closer to your neck with every single fight to defend the very meaning of being an engineer.<br /><br />In the meantime your fellow developers that don't agree with your permanent interference in the key tapping due to buzzwords like "resilience", "fail-fast", "latency" or "tests" will continue to dislike you. They will constantly show their lack of support to what you're doing. Their mediocrity and lack of willingness to stand to what they believe in will allow them to remain in the company for years to come.<br /><br />Then one day you will have to pack your stuff in a box and you will be escorted out of the office because you will get fired. The reason will be simple: "not delivering business value".<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s1600/guillotine.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="230" src="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s320/guillotine.gif" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">But... don't worry! That's actually good. Someone is doing you a favor! In the long run you will definitely profit from being fired. You will gain respect because you stood for your values. You will be able to stand in the mirror, look at yourself and say that you've done everything your power to do things properly with high quality.</div><div class="separator" style="clear: both; text-align: center;"><br /></div><h4>Epilogue</h4><div class="" style="clear: both; text-align: left;"><br /></div><div class="" style="clear: both; text-align: left;">Hopefully my apocalyptic vision is too harsh but that's what I see when talking to people in the industry. There is a light at the end of the tunnel though (and it's not a freight train).&nbsp;</div><div class="" style="clear: both; text-align: left;">There are companies that value good engineers and value quality. If you get fired (or you're getting close to that) just file a CV there. You can be shocked that the very sense of caring and eagerness to learn drastically boosts your chances of getting hired.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div style="text-align: center;"><a href="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s1600/the_end.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="212" src="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s320/the_end.gif" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><h4>Additional reading</h4><div class="" style="clear: both;"><br /><ul><li><a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877">Living in the age of software fuckery</a></li><li><a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/">Don't call yourself a programmer</a></li></ul><br /><br /></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito Instant - My Book Has Finally Been Published!]]></title>
    <link href="http://toomuchcoding.com/blog/2013/08/28/mockito-instant-my-book-has-finally/"/>
    <updated>2013-08-28T01:20:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2013/08/28/mockito-instant-my-book-has-finally</id>
    <content type="html"><![CDATA[<div class='post'>
I am very pleased to announce that my book about Mockito entitled "Mockito Instant" has finally been published! You can buy it at&nbsp;<a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Packt Publishing online shop</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hamcrest Matchers, Guava Predicate and Builder Design Pattern]]></title>
    <link href="http://toomuchcoding.com/blog/2013/01/03/hamcrest-matchers-guava-predicate-and/"/>
    <updated>2013-01-03T16:35:00-08:00</updated>
    <id>http://toomuchcoding.com/blog/2013/01/03/hamcrest-matchers-guava-predicate-and</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Hi coding addicts :)<br /><br />Often, while coding we have to deal with some POJO objects that have dozens of fields in them. Many times we initialize those classes through a constructor having dozens of arguments which is terrible in any possibly imaginable way :) Apart from that the functions that use those constructors are hardly testable. Let's take a closer look at using a Builder to change that situation, together with Hamcrest matchers and Guava Predicates to unit test it.<br />
<!--more-->
<br />Let's start off with taking a look at the POJO class.<br /><br /><br /><a name='more'></a><br /><br /><b>SomeBigPojo.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.pojo;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 21:05<br /> */<br />public class SomeBigPojo {<br />    private String stringField0;<br />    private Integer integerField0;<br />    private Boolean booleanField0;<br />    private String stringField1;<br />    private Integer integerField1;<br />    private Boolean booleanField1;<br />    private String stringField2;<br />    private Integer integerField2;<br />    private Boolean booleanField2;<br />    private String stringField3;<br />    private Integer integerField3;<br />    private Boolean booleanField3;<br />    private String stringField4;<br />    private Integer integerField4;<br />    private Boolean booleanField4;<br />    private String stringField5;<br />    private Integer integerField5;<br />    private Boolean booleanField5;<br />    private String stringField6;<br />    private Integer integerField6;<br />    private Boolean booleanField6;<br />    private String stringField7;<br />    private String stringField8;<br />    private String stringField9;<br /><br />    public SomeBigPojo(String stringField0, Integer integerField0, Boolean booleanField0, String stringField1, Integer integerField1, Boolean booleanField1, String stringField2, Integer integerField2, Boolean booleanField2, String stringField3, Integer integerField3, Boolean booleanField3, String stringField4, Integer integerField4, Boolean booleanField4, String stringField5, Integer integerField5, Boolean booleanField5, String stringField6, Integer integerField6, Boolean booleanField6, String stringField7, String stringField8, String stringField9) {<br />        this.stringField0 = stringField0;<br />        this.integerField0 = integerField0;<br />        this.booleanField0 = booleanField0;<br />        this.stringField1 = stringField1;<br />        this.integerField1 = integerField1;<br />        this.booleanField1 = booleanField1;<br />        this.stringField2 = stringField2;<br />        this.integerField2 = integerField2;<br />        this.booleanField2 = booleanField2;<br />        this.stringField3 = stringField3;<br />        this.integerField3 = integerField3;<br />        this.booleanField3 = booleanField3;<br />        this.stringField4 = stringField4;<br />        this.integerField4 = integerField4;<br />        this.booleanField4 = booleanField4;<br />        this.stringField5 = stringField5;<br />        this.integerField5 = integerField5;<br />        this.booleanField5 = booleanField5;<br />        this.stringField6 = stringField6;<br />        this.integerField6 = integerField6;<br />        this.booleanField6 = booleanField6;<br />        this.stringField7 = stringField7;<br />        this.stringField8 = stringField8;<br />        this.stringField9 = stringField9;<br />    }<br /><br />    public String getStringField0() {<br />        return stringField0;<br />    }<br /><br />    public void setStringField0(String stringField0) {<br />        this.stringField0 = stringField0;<br />    }<br /><br />    public Integer getIntegerField0() {<br />        return integerField0;<br />    }<br /><br />    public void setIntegerField0(Integer integerField0) {<br />        this.integerField0 = integerField0;<br />    }<br /><br />    public Boolean getBooleanField0() {<br />        return booleanField0;<br />    }<br /><br />    public void setBooleanField0(Boolean booleanField0) {<br />        this.booleanField0 = booleanField0;<br />    }<br /><br />    public String getStringField1() {<br />        return stringField1;<br />    }<br /><br />    public void setStringField1(String stringField1) {<br />        this.stringField1 = stringField1;<br />    }<br /><br />    public Integer getIntegerField1() {<br />        return integerField1;<br />    }<br /><br />    public void setIntegerField1(Integer integerField1) {<br />        this.integerField1 = integerField1;<br />    }<br /><br />    public Boolean getBooleanField1() {<br />        return booleanField1;<br />    }<br /><br />    public void setBooleanField1(Boolean booleanField1) {<br />        this.booleanField1 = booleanField1;<br />    }<br /><br />    public String getStringField2() {<br />        return stringField2;<br />    }<br /><br />    public void setStringField2(String stringField2) {<br />        this.stringField2 = stringField2;<br />    }<br /><br />    public Integer getIntegerField2() {<br />        return integerField2;<br />    }<br /><br />    public void setIntegerField2(Integer integerField2) {<br />        this.integerField2 = integerField2;<br />    }<br /><br />    public Boolean getBooleanField2() {<br />        return booleanField2;<br />    }<br /><br />    public void setBooleanField2(Boolean booleanField2) {<br />        this.booleanField2 = booleanField2;<br />    }<br /><br />    public String getStringField3() {<br />        return stringField3;<br />    }<br /><br />    public void setStringField3(String stringField3) {<br />        this.stringField3 = stringField3;<br />    }<br /><br />    public Integer getIntegerField3() {<br />        return integerField3;<br />    }<br /><br />    public void setIntegerField3(Integer integerField3) {<br />        this.integerField3 = integerField3;<br />    }<br /><br />    public Boolean getBooleanField3() {<br />        return booleanField3;<br />    }<br /><br />    public void setBooleanField3(Boolean booleanField3) {<br />        this.booleanField3 = booleanField3;<br />    }<br /><br />    public String getStringField4() {<br />        return stringField4;<br />    }<br /><br />    public void setStringField4(String stringField4) {<br />        this.stringField4 = stringField4;<br />    }<br /><br />    public Integer getIntegerField4() {<br />        return integerField4;<br />    }<br /><br />    public void setIntegerField4(Integer integerField4) {<br />        this.integerField4 = integerField4;<br />    }<br /><br />    public Boolean getBooleanField4() {<br />        return booleanField4;<br />    }<br /><br />    public void setBooleanField4(Boolean booleanField4) {<br />        this.booleanField4 = booleanField4;<br />    }<br /><br />    public String getStringField5() {<br />        return stringField5;<br />    }<br /><br />    public void setStringField5(String stringField5) {<br />        this.stringField5 = stringField5;<br />    }<br /><br />    public Integer getIntegerField5() {<br />        return integerField5;<br />    }<br /><br />    public void setIntegerField5(Integer integerField5) {<br />        this.integerField5 = integerField5;<br />    }<br /><br />    public Boolean getBooleanField5() {<br />        return booleanField5;<br />    }<br /><br />    public void setBooleanField5(Boolean booleanField5) {<br />        this.booleanField5 = booleanField5;<br />    }<br /><br />    public String getStringField6() {<br />        return stringField6;<br />    }<br /><br />    public void setStringField6(String stringField6) {<br />        this.stringField6 = stringField6;<br />    }<br /><br />    public Integer getIntegerField6() {<br />        return integerField6;<br />    }<br /><br />    public void setIntegerField6(Integer integerField6) {<br />        this.integerField6 = integerField6;<br />    }<br /><br />    public Boolean getBooleanField6() {<br />        return booleanField6;<br />    }<br /><br />    public void setBooleanField6(Boolean booleanField6) {<br />        this.booleanField6 = booleanField6;<br />    }<br /><br />    public String getStringField7() {<br />        return stringField7;<br />    }<br /><br />    public void setStringField7(String stringField7) {<br />        this.stringField7 = stringField7;<br />    }<br /><br />    public String getStringField8() {<br />        return stringField8;<br />    }<br /><br />    public void setStringField8(String stringField8) {<br />        this.stringField8 = stringField8;<br />    }<br /><br />    public String getStringField9() {<br />        return stringField9;<br />    }<br /><br />    public void setStringField9(String stringField9) {<br />        this.stringField9 = stringField9;<br />    }<br /><br />    @Override<br />    public String toString() {<br />        final StringBuilder sb = new StringBuilder();<br />        sb.append("SomeBigPojo");<br />        sb.append("{stringField0='").append(stringField0).append('\'');<br />        sb.append(", integerField0=").append(integerField0);<br />        sb.append(", booleanField0=").append(booleanField0);<br />        sb.append(", stringField1='").append(stringField1).append('\'');<br />        sb.append(", integerField1=").append(integerField1);<br />        sb.append(", booleanField1=").append(booleanField1);<br />        sb.append(", stringField2='").append(stringField2).append('\'');<br />        sb.append(", integerField2=").append(integerField2);<br />        sb.append(", booleanField2=").append(booleanField2);<br />        sb.append(", stringField3='").append(stringField3).append('\'');<br />        sb.append(", integerField3=").append(integerField3);<br />        sb.append(", booleanField3=").append(booleanField3);<br />        sb.append(", stringField4='").append(stringField4).append('\'');<br />        sb.append(", integerField4=").append(integerField4);<br />        sb.append(", booleanField4=").append(booleanField4);<br />        sb.append(", stringField5='").append(stringField5).append('\'');<br />        sb.append(", integerField5=").append(integerField5);<br />        sb.append(", booleanField5=").append(booleanField5);<br />        sb.append(", stringField6='").append(stringField6).append('\'');<br />        sb.append(", integerField6=").append(integerField6);<br />        sb.append(", booleanField6=").append(booleanField6);<br />        sb.append(", stringField7='").append(stringField7).append('\'');<br />        sb.append(", stringField8='").append(stringField8).append('\'');<br />        sb.append(", stringField9='").append(stringField9).append('\'');<br />        sb.append('}');<br />        return sb.toString();<br />    }<br />}<br /><br /></pre>Now take a look at the builder class that was used in order to get rid of usage of the humongous constructor. What is more you can set whatever you want to without the need to enter nulls for the undesired fields.<br /><br /><b>SomeBigPojoBuilder.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static com.google.common.base.Preconditions.checkNotNull;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 21:08<br /> */<br />public class SomeBigPojoBuilder {<br />    /** A field with some default value */<br />    private String stringField0 = "defaultValueForString0";<br />    /** A field with some default value */<br />    private Integer integerField0 = 100;<br />    /** A field with some default value */<br />    private Boolean booleanField0 = true;<br />    private String stringField1;<br />    private Integer integerField1;<br />    private Boolean booleanField1;<br />    private String stringField2;<br />    private Integer integerField2;<br />    private Boolean booleanField2;<br />    private String stringField3;<br />    private Integer integerField3;<br />    private Boolean booleanField3;<br />    private String stringField4;<br />    private Integer integerField4;<br />    private Boolean booleanField4;<br />    private String stringField5;<br />    private Integer integerField5;<br />    private Boolean booleanField5;<br />    private String stringField6;<br />    private Integer integerField6;<br />    private Boolean booleanField6;<br />    private String stringField7;<br />    private String stringField8;<br />    private String stringField9;<br /><br />    public SomeBigPojoBuilder setStringField0(String stringField0) {<br />        this.stringField0 = stringField0;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField0(Integer integerField0) {<br />        this.integerField0 = integerField0;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField0(Boolean booleanField0) {<br />        this.booleanField0 = booleanField0;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField1(String stringField1) {<br />        this.stringField1 = stringField1;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField1(Integer integerField1) {<br />        this.integerField1 = integerField1;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField1(Boolean booleanField1) {<br />        this.booleanField1 = booleanField1;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField2(String stringField2) {<br />        this.stringField2 = stringField2;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField2(Integer integerField2) {<br />        this.integerField2 = integerField2;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField2(Boolean booleanField2) {<br />        this.booleanField2 = booleanField2;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField3(String stringField3) {<br />        this.stringField3 = stringField3;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField3(Integer integerField3) {<br />        this.integerField3 = integerField3;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField3(Boolean booleanField3) {<br />        this.booleanField3 = booleanField3;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField4(String stringField4) {<br />        this.stringField4 = stringField4;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField4(Integer integerField4) {<br />        this.integerField4 = integerField4;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField4(Boolean booleanField4) {<br />        this.booleanField4 = booleanField4;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField5(String stringField5) {<br />        this.stringField5 = stringField5;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField5(Integer integerField5) {<br />        this.integerField5 = integerField5;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField5(Boolean booleanField5) {<br />        this.booleanField5 = booleanField5;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField6(String stringField6) {<br />        this.stringField6 = stringField6;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField6(Integer integerField6) {<br />        this.integerField6 = integerField6;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField6(Boolean booleanField6) {<br />        this.booleanField6 = booleanField6;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField7(String stringField7) {<br />        this.stringField7 = stringField7;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField8(String stringField8) {<br />        this.stringField8 = stringField8;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField9(String stringField9) {<br />        this.stringField9 = stringField9;<br />        return this;<br />    }<br /><br />    /**<br />     * Some function checking the state of our POJO<br />     */<br />    private void checkState(){<br />        checkNotNull(stringField1, "StringField1 must not be null!");<br />    }<br /><br />    public SomeBigPojo createSomeBigPojoWithBuilder() {<br />        checkState();<br />        return new SomeBigPojo(stringField0, integerField0, booleanField0, stringField1, integerField1, booleanField1, stringField2, integerField2, booleanField2, stringField3, integerField3, booleanField3, stringField4, integerField4, booleanField4, stringField5, integerField5, booleanField5, stringField6, integerField6, booleanField6, stringField7, stringField8, stringField9);<br />    }<br />}<br /></pre><br />Take a look at the function checkState that verifies whether the object is of a desired state. In this way we may disallow the creation of an object if some conditions where not fullfiled. For that case we are using the Guava's Predicate - checkNotNull method. <br /><br />Note that the concept behind the Builder pattern is to delegate creation of an object to a Builder. In fact in the pure Builder design pattern implementation we would have to have a Director, some abstraction over a Builder and the concrete implementation of the Builder as such. In our case we have a simplification of that pattern - I used the refactoring option of IntelliJ. What can be done to make it look even better is to remove the constructor from the POJO and pass the values only by setters (that's what in fact I did in one of my projects ;) ) <br /><br />Now let's take a look at some usage examples: <br /><b><br /></b><b>SomeServiceImpl.java </b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.service;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static java.lang.String.format;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 21:25<br /> */<br />public class SomeServiceImpl implements SomeService {<br />    private static final Logger LOGGER = LoggerFactory.getLogger(SomeServiceImpl.class);<br /><br />    /** Could be an abstraction of builders injected by a setter - possible to mock */<br />    private SomeBigPojoBuilder someBigPojoBuilder;<br /><br />    /**<br />     * Hard to unit test<br />     */<br />    @Override<br />    public void someLogicForAPojoWithoutBuilder() {<br />        LOGGER.debug("SomeLogicForAPojoWithoutBuilder executed");<br />        SomeBigPojo someBigPojo = new SomeBigPojo("string", 1, false, "other string", 123, true, "something else", 321, false, "yet another string", 111, true, "something", 2, false, "More", 3, true, "String", 12, false, "some", "value", "ofString");<br />        // Any chance of knowing what is the value of stringField8 basing on the constructor?<br />        LOGGER.debug(format("StringField8 is equal [%s]%n", someBigPojo.getStringField8()));<br />        // Print the object<br />        LOGGER.debug(someBigPojo.toString());<br />    }<br /><br />    @Override<br />    public void someLogicForAPojoWithBuilder() {<br />        LOGGER.debug("SomeLogicForAPojoWithBuilder executed");<br />        SomeBigPojo someBigPojo = someBigPojoBuilder<br />                .setStringField0("string")<br />                .setIntegerField0(1)<br />                .setBooleanField0(false)<br />                .setStringField1("other string")<br />                .setIntegerField1(123)<br />                .setBooleanField1(true)<br />                .setStringField2("something else")<br />                .setIntegerField2(321)<br />                .setBooleanField2(false)<br />                .setStringField3("yet another string")<br />                .setIntegerField3(111)<br />                .setBooleanField3(false)<br />                .setStringField4("something")<br />                .setIntegerField4(2)<br />                .setBooleanField4(false)<br />                .setStringField5("More")<br />                .setIntegerField5(3)<br />                .setBooleanField5(true)<br />                .setStringField6("String")<br />                .setIntegerField6(12)<br />                .setBooleanField6(false)<br />                .setStringField7("some")<br />                .setStringField8("value")<br />                .setStringField9("ofString")<br />                .createSomeBigPojoWithBuilder();<br />        // Looking at the builder now I guess it's obvious what the value of StringField8<br />        LOGGER.debug(format("StringField8 is equal [%s]%n", someBigPojo.getStringField8()));<br />        // Print the object<br />        LOGGER.debug(someBigPojo.toString());<br />    }<br /><br />    @Override<br />    public void someLogicForAPojoWithBuilderBadArgument() {<br />        LOGGER.debug("someLogicForAPojoWithBuilderBadArgument executed");<br />        SomeBigPojo someBigPojo = someBigPojoBuilder<br />                .setStringField0("string")<br />                .setIntegerField0(1)<br />                .setBooleanField0(true)<br />                .setIntegerField1(123)<br />                .setBooleanField1(true)<br />                .setStringField2("something else")<br />                .setIntegerField2(321)<br />                .setBooleanField2(false)<br />                .setStringField3("yet another string")<br />                .setIntegerField3(111).setBooleanField3(false)<br />                .setStringField4("something")<br />                .setIntegerField4(2)<br />                .setBooleanField4(false)<br />                .setStringField5("More")<br />                .setIntegerField5(3)<br />                .setBooleanField5(true)<br />                .setStringField6("String")<br />                .setIntegerField6(12)<br />                .setBooleanField6(false)<br />                .setStringField7("some")<br />                .setStringField8("value")<br />                .setStringField9("ofString")<br />                .createSomeBigPojoWithBuilder();<br />        // Print the object - will we even see an output<br />        LOGGER.debug(someBigPojo.toString());<br />    }<br /><br />    public void setSomeBigPojoBuilder(SomeBigPojoBuilder someBigPojoBuilder) {<br />        this.someBigPojoBuilder = someBigPojoBuilder;<br />    }<br />}<br /><br /><br /></pre><br /><br />Notice how clear it is now to create an object and how easy is to define if a field has been set or not. <br /><br />Let's move on to Hamcrest matchers that will help us in unit testing of our classes. I will not try to do the complete, 100% code coverage - the idea behind this post is to show how Hamcrest Matchers can become an addition to your unit tests. <br /><br />Often unit tests are quite unclear and look like this:<br /><b><br /></b><b>SomeBigPojoBuilderNoMatchersAndNoRefactoringTest.java </b><br /><b><br /></b><br /><pre class="brush:java"></pre><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import org.junit.Before;<br />import org.junit.Test;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static junit.framework.Assert.assertTrue;<br />import static org.apache.commons.lang.StringUtils.isNumeric;<br />import static pl.grzejszczak.marcin.junit.matchers.pojo.SomePojoConstants.*;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 23:02<br /> */<br />public class SomeBigPojoBuilderNoMatchersAndNoRefactoringTest {<br /><br />    private SomeBigPojoBuilder objectUnderTest;<br /><br />    @Before<br />    public void setUp() {<br />        objectUnderTest = new SomeBigPojoBuilder();<br />    }<br /><br />    @Test<br />    public void testCreateSomeBigPojoWithBuilder() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setBooleanField1(true)<br />                .setStringField0("1")<br />                .setStringField1("12")<br />                .setStringField2("123")<br />                .setStringField3("1234")<br />                .setStringField4("12345")<br />                .setStringField5("123456")<br />                .setStringField6("1234567")<br />                .setStringField7("12345678")<br />                .setStringField8("123456789")<br />                .setStringField9("1234567890")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    @Test(expected = AssertionError.class)<br />    public void testCreateSomeBigPojoWithBuilderWrongFields() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setStringField0("0")<br />                .setStringField1("Too long")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    private void isPojoProperlyBuilt(SomeBigPojo someBigPojo) {<br />        assertTrue(someBigPojo.getStringField0().length() == STRING_FIELD_0_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField1().length() == STRING_FIELD_1_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField2().length() == STRING_FIELD_2_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField3().length() == STRING_FIELD_3_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField4().length() == STRING_FIELD_4_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField5().length() == STRING_FIELD_5_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField6().length() == STRING_FIELD_6_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField7().length() == STRING_FIELD_7_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField8().length() == STRING_FIELD_8_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField9().length() == STRING_FIELD_9_LENGTH);<br /><br />    }<br />}<br /><br /></pre><br />Simple refactoring can make them look nicer... <br /><br /><b>SomeBigPojoBuilderNoMatchersTest.java </b><br /><b><br /></b><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import org.junit.Before;<br />import org.junit.Test;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static junit.framework.Assert.assertNotNull;<br />import static junit.framework.Assert.assertTrue;<br />import static org.apache.commons.lang.StringUtils.isNumeric;<br />import static pl.grzejszczak.marcin.junit.matchers.pojo.SomePojoConstants.*;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 23:02<br /> */<br />public class SomeBigPojoBuilderNoMatchersTest {<br /><br />    private SomeBigPojoBuilder objectUnderTest;<br /><br />    @Before<br />    public void setUp() {<br />        objectUnderTest = new SomeBigPojoBuilder();<br />    }<br /><br />    @Test<br />    public void testCreateSomeBigPojoWithBuilder() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setBooleanField1(true)<br />                .setStringField0("1")<br />                .setStringField1("12")<br />                .setStringField2("123")<br />                .setStringField3("1234")<br />                .setStringField4("12345")<br />                .setStringField5("123456")<br />                .setStringField6("1234567")<br />                .setStringField7("12345678")<br />                .setStringField8("123456789")<br />                .setStringField9("1234567890")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    @Test(expected = AssertionError.class)<br />    public void testCreateSomeBigPojoWithBuilderWrongFields() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setStringField0("0")<br />                .setStringField1("too long")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    private void isPojoProperlyBuilt(SomeBigPojo someBigPojo) {<br />        isOfGivenLength(someBigPojo.getStringField0(), STRING_FIELD_0_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField1(), STRING_FIELD_1_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField2(), STRING_FIELD_2_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField3(), STRING_FIELD_3_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField4(), STRING_FIELD_4_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField5(), STRING_FIELD_5_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField6(), STRING_FIELD_6_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField7(), STRING_FIELD_7_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField8(), STRING_FIELD_8_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField9(), STRING_FIELD_9_LENGTH);<br /><br />    }<br /><br />    private void isOfGivenLength(String pojo, final Integer expectedLength) {<br />        assertNotNull(pojo);<br />        assertTrue(expectedLength == pojo.length());<br />    }<br /><br />    private void isFieldOfNumericValue(String field) {<br />        assertTrue(isNumeric(field));<br />    }<br />}<br /><br /></pre><br /><br />That looks nice, doesn't it? :) And how about using Matchers instead of functions? <br /><br /><b>SomeBigPojoBuilderTest.kava </b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import org.hamcrest.BaseMatcher;<br />import org.hamcrest.Description;<br />import org.hamcrest.Matcher;<br />import org.junit.Before;<br />import org.junit.Test;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static java.lang.String.format;<br />import static junit.framework.Assert.assertTrue;<br />import static org.apache.commons.lang.StringUtils.isNumeric;<br />import static org.junit.Assert.assertThat;<br />import static pl.grzejszczak.marcin.junit.matchers.pojo.SomePojoConstants.*;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 23:02<br /> */<br />public class SomeBigPojoBuilderTest {<br /><br />    private SomeBigPojoBuilder objectUnderTest;<br /><br />    @Before<br />    public void setUp(){<br />        objectUnderTest = new SomeBigPojoBuilder();<br />    }<br /><br />    @Test<br />    public void testCreateSomeBigPojoWithBuilder() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setBooleanField1(true)<br />                .setStringField0("1")<br />                .setStringField1("12")<br />                .setStringField2("123")<br />                .setStringField3("1234")<br />                .setStringField4("12345")<br />                .setStringField5("123456")<br />                .setStringField6("1234567")<br />                .setStringField7("12345678")<br />                .setStringField8("123456789")<br />                .setStringField9("1234567890")<br />                .createSomeBigPojoWithBuilder();<br /><br />        assertThat(someBigPojo, isPojoProperlyBuilt());<br />    }<br /><br />    @Test(expected = AssertionError.class)<br />    public void testCreateSomeBigPojoWithBuilderWrongFields() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setStringField0("0")<br />                .setStringField1("Too long")<br />                .createSomeBigPojoWithBuilder();<br /><br />        assertThat(someBigPojo, isPojoProperlyBuilt());<br />    }<br /><br />    /**<br />     * Let us assume that there is a specific business case that we have to take into consideration regarding some particular field<br />     *<br />     * @return<br />     */<br />    private static Matcher isPojoProperlyBuilt() {<br /><br />        return new BaseMatcher() {<br /><br />            @Override<br />            public boolean matches(Object o) {<br />                assertTrue(o instanceof SomeBigPojo);<br />                SomeBigPojo someBigPojo = (SomeBigPojo) o;<br />                assertThat(someBigPojo.getStringField0(), isOfGivenLength(STRING_FIELD_0_LENGTH));<br />                assertThat(someBigPojo.getStringField0(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField1(), isOfGivenLength(STRING_FIELD_1_LENGTH));<br />                assertThat(someBigPojo.getStringField1(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField2(), isOfGivenLength(STRING_FIELD_2_LENGTH));<br />                assertThat(someBigPojo.getStringField2(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField3(), isOfGivenLength(STRING_FIELD_3_LENGTH));<br />                assertThat(someBigPojo.getStringField3(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField4(), isOfGivenLength(STRING_FIELD_4_LENGTH));<br />                assertThat(someBigPojo.getStringField4(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField5(), isOfGivenLength(STRING_FIELD_5_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField6(), isOfGivenLength(STRING_FIELD_6_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField7(), isOfGivenLength(STRING_FIELD_7_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField8(), isOfGivenLength(STRING_FIELD_8_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField9(), isOfGivenLength(STRING_FIELD_9_LENGTH));<br /><br />                return true;<br />            }<br /><br />            @Override<br />            public void describeTo(Description description) {<br />                description.appendText("Lengths of fields are limited and the first 4 fields are numeric");<br />            }<br />        };<br />    }<br /><br />    private static Matcher isOfGivenLength(final Integer expectedLength) {<br /><br />        return new BaseMatcher() {<br /><br />            public boolean matches(Object o) {<br />                assertTrue(o instanceof String);<br />                return expectedLength == String.valueOf(o).length();<br />            }<br /><br />            public void describeTo(Description description) {<br />                description.appendText(format("String's length should be equal to [%d]", expectedLength));<br />            }<br />        };<br />    }<br /><br />    private static Matcher isFieldOfNumericValue() {<br /><br />        return new BaseMatcher() {<br /><br />            public boolean matches(Object o) {<br />                assertTrue(o instanceof String);<br />                return isNumeric(String.valueOf(o));<br />            }<br /><br />            public void describeTo(Description description) {<br />                description.appendText("The value of the field should be numeric");<br />            }<br />        };<br />    }<br />}<br /><br /></pre><br />The following main method executes the functions of the Service:<br /><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers;<br /><br />import pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder;<br />import pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 22:38<br /> */<br />public class MatcherMain {<br />    public static void main(String[] args){<br />        SomeServiceImpl someService = new SomeServiceImpl();<br /><br />        someService.setSomeBigPojoBuilder(new SomeBigPojoBuilder());<br />        someService.someLogicForAPojoWithoutBuilder();<br /><br />        someService.setSomeBigPojoBuilder(new SomeBigPojoBuilder());<br />        someService.someLogicForAPojoWithBuilder();<br /><br />        someService.setSomeBigPojoBuilder(new SomeBigPojoBuilder());<br />        someService.someLogicForAPojoWithBuilderBadArgument();<br />    }<br />}<br /><br /></pre><br />And the logs are:<br /><br /><br /><pre class="brush:xml">pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:27 SomeLogicForAPojoWithoutBuilder executed<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:30 StringField8 is equal [value]<br /><br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:32 SomeBigPojo{stringField0='string', integerField0=1, booleanField0=false, stringField1='other string', integerField1=123, booleanField1=true, stringField2='something else', integerField2=321, booleanField2=false, stringField3='yet another string', integerField3=111, booleanField3=true, stringField4='something', integerField4=2, booleanField4=false, stringField5='More', integerField5=3, booleanField5=true, stringField6='String', integerField6=12, booleanField6=false, stringField7='some', stringField8='value', stringField9='ofString'}<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:37 SomeLogicForAPojoWithBuilder executed<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:65 StringField8 is equal [value]<br /><br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:67 SomeBigPojo{stringField0='string', integerField0=1, booleanField0=false, stringField1='other string', integerField1=123, booleanField1=true, stringField2='something else', integerField2=321, booleanField2=false, stringField3='yet another string', integerField3=111, booleanField3=false, stringField4='something', integerField4=2, booleanField4=false, stringField5='More', integerField5=3, booleanField5=true, stringField6='String', integerField6=12, booleanField6=false, stringField7='some', stringField8='value', stringField9='ofString'}<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:72 someLogicForAPojoWithBuilderBadArgument executed<br />Exception in thread "main" java.lang.NullPointerException: StringField1 must not be null!<br /> at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:208)<br /> at pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder.checkState(SomeBigPojoBuilder.java:166)<br /> at pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder.createSomeBigPojoWithBuilder(SomeBigPojoBuilder.java:170)<br /> at pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl.someLogicForAPojoWithBuilderBadArgument(SomeServiceImpl.java:73)<br /> at pl.grzejszczak.marcin.junit.matchers.MatcherMain.main(MatcherMain.java:23)<br /> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br /> at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br /> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br /> at java.lang.reflect.Method.invoke(Method.java:597)<br /> at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)</pre><br />In my opinion that looks really nice :) And what is yours?<br /><br /><a href="https://bitbucket.org/gregorin1987/too-much-coding/src/36becc07728e/Unit%20Testing%20-%20Matchers?at=default">Sources are available here at Too Much Codings code repository.</a><br /><br /><h2>UPDATE</h2><br />I've made some code changes and cleaning (not much though cause I didn't have too much time) and the code is available at github -&nbsp;<a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit_Testing_-_Matchers">https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit_Testing_-_Matchers</a><br /><br /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Interesting Articles]]></title>
    <link href="http://toomuchcoding.com/blog/2012/10/24/more-interesting-articles/"/>
    <updated>2012-10-24T06:25:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2012/10/24/more-interesting-articles</id>
    <content type="html"><![CDATA[<div class='post'>
Next portion of interesting articles from dZone<br /><br /><a href="http://architects.dzone.com/articles/understanding-jvm-internals">Understanding JVM internals</a><br /><a href="http://architects.dzone.com/articles/how-analyze-java-thread-dumps">How to analyze Java thread dumps</a><br /><a href="http://java.dzone.com/articles/practicing-code-java-and">Practicing Code, Java, and Databases</a><br /><a href="http://java.dzone.com/articles/10-things-i-never-want-see">10 Things I Never Want to See a Java Developer Do Again</a><br /><a href="http://architects.dzone.com/articles/jquery-kwicks-sexy-sliding">jQuery Kwicks - Sexy Sliding Panels And Navigational Interaction</a><br /><a href="http://java.dzone.com/articles/why-do-bad-things-happen-good">Why Do Bad Things Happen to Good Code?</a><br /><br />and sth about <a href="http://java.dzone.com/articles/open-source-integration-apache">Apache Camel</a></div>

]]></content>
  </entry>
  
</feed>
