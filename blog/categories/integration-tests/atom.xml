<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Integration Tests | TOO MUCH CODING]]></title>
  <link href="http://toomuchcoding.com/blog/categories/integration-tests/atom.xml" rel="self"/>
  <link href="http://toomuchcoding.com/"/>
  <updated>2018-08-31T16:07:37+02:00</updated>
  <id>http://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON Assert Lib Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/02/27/json-assert-lib-released/"/>
    <updated>2016-02-27T14:20:00-08:00</updated>
    <id>http://toomuchcoding.com/blog/2016/02/27/json-assert-lib-released</id>
    <content type="html"><![CDATA[<div class='post'>
I'm really happy to present the <a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>&nbsp;-&nbsp;over-the-weekend project that came out from the <a href="https://github.com/Codearte/accurest">AccuREST library</a>. This post will describe the rationale behind creating this tool and how to use it.<br /><br /><br /><a name='more'></a>
<!--more-->
<br /><br /><h4>Rationale</h4>In AccuREST (the Consumer Driven Contracts implementation library) we're creating tests of the server side. For more information on what is AccuREST and what Consumer Driven Contracts is check the <a href="https://github.com/Codearte/accurest/wiki">AccurREST wiki</a>. Anyways, we're checking if the response from the server matches the one described in the contract.<br /><br />So having such a Groovy DSL:<br /><br /><pre style="background: #fff; color: black;">io.codearte.accurest.dsl.GroovyDsl<span style="color: #0100b6; font-weight: 700;">.</span>make {<br />    priority <span style="color: #cd0000; font-style: italic;">1</span><br />    request {<br />        method <span style="color: #d80800;">'POST'</span><br />        url <span style="color: #d80800;">'/users/password'</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">email</span>: $(stub(optional(regex(email()))), test(<span style="color: #d80800;">'abc@abc.com'</span>)),<br />                <span style="color: #c5060b; font-style: italic;">callback_url</span>: $(stub(regex(hostname())), test(<span style="color: #d80800;">'http://partners.com'</span>))<br />        )<br />    }<br />    response {<br />        status <span style="color: #cd0000; font-style: italic;">404</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">code</span>: value(stub(<span style="color: #d80800;">"123123"</span>), test(optional(<span style="color: #d80800;">"123123"</span>))),<br />                <span style="color: #c5060b; font-style: italic;">message</span>: <span style="color: #d80800;">"User not found by email = [<span style="color: #26b31a;">${value(test(regex(email())), stub('not.existing@user.com'))}</span>]"</span><br />        )<br />    }<br />}<br /></pre><br />Resulted in creation of the following server side response verification<br /><br /><pre style="background: #fff; color: black;"><span style="color: #c5060b; font-style: italic;">given</span>:<br />  def request <span style="color: #0100b6; font-weight: 700;">=</span> given()<br />    .header(<span style="color: #d80800;">'Content-Type'</span>, <span style="color: #d80800;">'application/json'</span>)<br />    .body(<span style="color: #d80800;">'{"email":"abc@abc.com","callback_url":"http://partners.com"}'</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">when</span>:<br />  def response <span style="color: #0100b6; font-weight: 700;">=</span> given()<span style="color: #0100b6; font-weight: 700;">.</span>spec(request)<br />    .post(<span style="color: #d80800;">"/users/password"</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">then</span>:<br />  response<span style="color: #0100b6; font-weight: 700;">.</span>statusCode <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #cd0000; font-style: italic;">404</span><br />  response<span style="color: #0100b6; font-weight: 700;">.</span>header(<span style="color: #d80800;">'Content-Type'</span>)  <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #d80800;">'application/json'</span><br /> <span style="color: #c5060b; font-style: italic;">and</span>:<br />  DocumentContext parsedJson <span style="color: #0100b6; font-weight: 700;">=</span> JsonPath<span style="color: #0100b6; font-weight: 700;">.</span>parse(response<span style="color: #0100b6; font-weight: 700;">.</span>body<span style="color: #0100b6; font-weight: 700;">.</span>asString())<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /><br /></pre><br />AccuREST users stated that their biggest problem is this part:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /></pre><br />They said that JSON Paths are too difficult for them to read.<br /><br />That's why I've created the&nbsp;<a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>. So that instead of the aforementioned code one gets sth like this:<br /><br /><pre style="background: #fff; color: black;">  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'code'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'123123?'</span>)<br />  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'message'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'</span>);<br /></pre><br /><h4>How to add it to your project</h4><br />If your using Gradle just add (<a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.blogspot.toomuchcoding%22%20a%3A%22jsonassert%22">check the latest version number</a>):<br /><br /><pre style="background: #fff; color: black;"> testCompile `com<span style="color: #0100b6; font-weight: 700;">.</span>blogspot<span style="color: #0100b6; font-weight: 700;">.</span><span style="color: #c5060b; font-style: italic;">toomuchcoding</span>:<span style="color: #c5060b; font-style: italic;">jsonassert</span>:<span style="color: #cd0000; font-style: italic;">0.1</span><span style="color: #cd0000; font-style: italic;">.2</span>`<br /></pre><br />and if Maven just add:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">dependency</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">groupId</span>&gt;</span>com.blogspot.toomuchcoding<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">groupId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">artifactId</span>&gt;</span>jsonassert<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">artifactId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">version</span>&gt;</span>0.1.2<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">version</span>&gt;</span><br /><span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">dependency</span>&gt;</span><br /></pre><h4><br />How to use it</h4><br />Since almost everything in JSON Assert is package scoped you have access to two public classes. One of which is the &nbsp;<span style="font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;"><a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonAssertion.java">JsonAssertion</a></span> class. It gives you a couple of public methods that give you the entry point to the fluent interface of the library.<br /><br />You can check the JavaDocs of the <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonVerifiable.java">JsonVerifiable</a> interface in order to see what kind of methods can be used.<br /><br /><h4>Examples</h4><div><br />Best examples are <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/test/groovy/com/blogspot/toomuchcoding/jsonassert/JsonAssertionSpec.groovy">tests</a>. I'll show you a couple of them here.<br /><br /><br /><b>Example 1</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">[ {<br />                                <span style="color: #d80800;">"some"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}, {<span style="color: #d80800;">"anothernested"</span>: { <span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name3"</span>} }<br />                                        ]<br />                                    }<br />                                }<br />                            },<br />                            {<br />                                <span style="color: #d80800;">"someother"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}<br />                                        ]<br />                                    }<br />                                }<br />                            }<br />                        ]<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$[<span style="color: #0100b6; font-weight: 700;">*</span>].some.nested.withlist[<span style="color: #0100b6; font-weight: 700;">*</span>].anothernested[<span style="color: #0100b6; font-weight: 700;">?</span>(@.name == <span style="color: #d80800;">'name3'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array()<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"some"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"nested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"withlist"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"anothernested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"name"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"name3"</span>)<br /></pre><br /><b>Example 2</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">{<br />    <span style="color: #d80800;">"property1"</span>: [<br />        { <span style="color: #d80800;">"property2"</span>: <span style="color: #d80800;">"test1"</span>},<br />        { <span style="color: #d80800;">"property3"</span>: <span style="color: #d80800;">"test2"</span>}<br />    ]<br />}<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$.property1[<span style="color: #0100b6; font-weight: 700;">*</span>][<span style="color: #0100b6; font-weight: 700;">?</span>(@.property2 == <span style="color: #d80800;">'test1'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"property1"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>contains(<span style="color: #d80800;">"property2"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"test1"</span>)<br /></pre><br /></div><h4>Future plans</h4><br />It would be nice to:<br /><br /><ul><li>integrate with <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li><li>add more <a href="https://github.com/jayway/JsonPath#functions">JSON Path features</a> (functions, filters etc.)</li></ul><div><br /></div><h4>Links</h4><ul><li><a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert</a></li><li><a href="https://github.com/Codearte/accurest/wiki">AccuREST</a></li><li><a href="https://www.youtube.com/watch?v=daafmTYFoDU">Video about AccuREST </a>by <a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li><li><a href="https://github.com/jayway/JsonPath">Jayway JSON Path</a></li><li><a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li></ul><br /><br /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito InvocationOnMock - Checking an Argument]]></title>
    <link href="http://toomuchcoding.com/blog/2012/10/24/mockito-invocationonmock-checking/"/>
    <updated>2012-10-24T14:22:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2012/10/24/mockito-invocationonmock-checking</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Hi!<br /><br />In one of my projects we had a very interesting situation in terms of testing. We couldn't mock an invocation of a static method due to the fact that PowerMock was not allowed to be used so there were plenty of objects and dependencies being initialized. What is more we were using a custom made dependency injection system that had a possibility of injecting a mock.<br />
<!--more-->
<br />The problem was such that during a test we wanted to assert whether one of the objects was in a very precise state. This object was created using the new operator so we couldn't mock it (again no PowerMock allowed). Fortunately this object got passed to a method of an object that we could mock...<br /><br />As presented below <span style="font-family: 'Courier New', Courier, monospace;">timeConsumingExternalService</span> is an object that we could mock via the custom dependency injection system whereas the <span style="font-family: 'Courier New', Courier, monospace;">SomePojo</span> class is an object whose state we would like to verify. <br /><br /><pre class="brush:java">timeConsumingExternalService.processSomeObject(new SomePojo("name", "surname", 1, 1.0));<br /></pre><br />So what we did was that in our mock to which the object got passed we created a new <span style="font-family: 'Courier New', Courier, monospace;">Answer&nbsp;</span>(the same <span style="font-family: 'Courier New', Courier, monospace;">Answer</span> that I spoke of <a href="http://toomuchcoding.blogspot.com/2012/10/simulation-of-time-consuming-actions-in.html">here</a>). Due to which we could access the <span style="font-family: 'Courier New', Courier, monospace;">InvocationOnMock</span> and the arguments passed to the method as such. <br /><br /><pre class="brush:java">Mockito.doAnswer(new Answer&lt;Object&gt;() {<br />   public Object answer(InvocationOnMock invocation) throws Throwable {<br />    Object[] object = invocation.getArguments();<br /><br />      if (object.length &gt; 0) {<br />          SomePojo somePojo = (SomePojo) object[0];<br /><br />          Assert.assertEquals("name", somePojo.getName());<br />          LOGGER.debug("Names are equal");<br />          Assert.assertEquals("surname", somePojo.getSurname());<br />          LOGGER.debug("Surnames are equal");<br />          Assert.assertTrue(1 == somePojo.getIntValue());<br />          LOGGER.debug("Ints are equal");<br />          Assert.assertTrue(1.0 == somePojo.getDoubleValue());<br />          LOGGER.debug("Doubles are equal");<br /><br />          LOGGER.debug("Object being an argument of the function [" + String.valueOf(somePojo) + "]");<br />  }<br />    return null;<br />   }<br />  }).when(timeConsumingExternalServiceMock).processSomeObject(Mockito.any(SomePojo.class));<br /></pre><br />Of course the logs regarding the equalities are unnecessary since if they wouldn't be equal we would have an assertion exception - I left them for the purpose of this post.<br /><br />And in the logs we can find: <br /><br /><pre class="brush:xml">pl.grzejszczak.marcin.ServiceIntegrationTest:48 Names are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:50 Surnames are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:52 Ints are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:54 Doubles are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:56 Object being an argument of the function [SomePojo [name=name, surname=surname, intValue=1, doubleValue=1.0]]<br /></pre><br />So in this way something that seems impossible to be verified can get verified :)<br /><br /><b><u>Update! </u></b><br /><br />Thanks to Holger's suggestion I took a look at the <span style="font-family: 'Courier New', Courier, monospace;">ArgumentCaptor</span> object and that is true that it is an elegant solution to retrieve information about the arguments executed on a method. Where <span style="font-family: 'Courier New', Courier, monospace;">InvocationOnMock</span> can give you much more information and possibilities (for instance regarding the method being executed or just execute the real method) for this particular case a much more elegant, easier and faster way of dealing with the issue would be:<br /><br /><br /><pre class="brush:java">  //service that executes the external service<br />  executorService.execute(someTask);<br /><br />  final ArgumentCaptor&lt;SomePojo&gt; argumentCaptor = ArgumentCaptor.forClass(SomePojo.class);<br />  Mockito.verify(timeConsumingExternalServiceMock).processSomeObject(argumentCaptor.capture());<br />  SomePojo somePojo = argumentCaptor.getValue();<br />  Assert.assertEquals("name", somePojo.getName());<br />  LOGGER.debug("Names are equal");<br />  Assert.assertEquals("surname", somePojo.getSurname());<br />  LOGGER.debug("Surnames are equal");<br />  Assert.assertTrue(1 == somePojo.getIntValue());<br />  LOGGER.debug("Ints are equal");<br />  Assert.assertTrue(1.0 == somePojo.getDoubleValue());<br />  LOGGER.debug("Doubles are equal");<br /></pre><br />The logs: <br /><pre class="brush:xml">pl.grzejszczak.marcin.junit.SomeTask:26 Before processing an object<br />pl.grzejszczak.marcin.junit.SomeTask:28 After processing an object<br />pl.grzejszczak.marcin.ServiceIntegrationTest:75 Names are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:77 Surnames are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:79 Ints are equal<br />pl.grzejszczak.marcin.ServiceIntegrationTest:81 Doubles are equal<br /></pre><br />Thanks again Holger!</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulation of Time Consuming Actions in Integration Tests]]></title>
    <link href="http://toomuchcoding.com/blog/2012/10/07/simulation-of-time-consuming-actions-in/"/>
    <updated>2012-10-07T13:47:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2012/10/07/simulation-of-time-consuming-actions-in</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Hi!<br /><br />Quite recently in one of my projects I had a situation in which I needed to create an integration test for the application. That's not very odd isn't it? :)<br /><br />What was interesting was the fact that the logic of the app involved some concurrency issues and one of the components had to connect to an external service which would take a couple of seconds. Since in the integration test there was no need to make the actual connection, the component needed to be mocked. What about the simulation of the time consuming action? Well, let's take a look at the way I did it...<br />
<!--more-->
<br /><b>The task.</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />/**<br /> * Service that does some things including processing of the external service<br /> * <br /> * @author marcin<br /> * <br /> */<br />public class SomeTask implements Runnable {<br /><br /> private static final Logger LOGGER = LoggerFactory.getLogger(SomeTask.class);<br /><br /> // Service is injected via a dependency injection system<br /> private Processable timeConsumingExternalService;<br /><br /> private void methodThatConnectsToExternalServices() {<br />  // connects to an external service and spends a couple of seconds there<br />  LOGGER.debug("Before processing");<br />  timeConsumingExternalService.process();<br />  LOGGER.debug("After processing");<br />  // some other things to do<br /> }<br /><br /> public void run() {<br />  methodThatConnectsToExternalServices();<br /> }<br /><br /> public void setTimeConsumingExternalService(Processable timeConsumingExternalService) {<br />  this.timeConsumingExternalService = timeConsumingExternalService;<br /> }<br /><br />}</pre><b>The integration test.</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin;<br /><br />import java.util.concurrent.ExecutorService;<br />import java.util.concurrent.Executors;<br /><br />import org.mockito.Mockito;<br />import org.mockito.invocation.InvocationOnMock;<br />import org.mockito.stubbing.Answer;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class ServiceIntegrationTest {<br /><br /> private static final Logger LOGGER = LoggerFactory.getLogger(ServiceIntegrationTest.class);<br /><br /> private ExecutorService executorService = Executors.newCachedThreadPool();<br /> private Processable timeConsumingExternalServiceMock = Mockito.mock(Processable.class);<br /> private SomeTask someTask = new SomeTask();<br /><br /> public ServiceIntegrationTest() {<br />  initializeMocks();<br /> }<br /><br /> private void initializeMocks() {<br />  Mockito.doAnswer(new Answer&lt;Object&gt;() {<br />   public Object answer(InvocationOnMock invocation) throws Throwable {<br />    // Simulation of connection to external services<br />    LOGGER.debug("Sleeping");<br />    Thread.sleep(5000);<br />    LOGGER.debug("Stopped Sleeping");<br />    return null;<br />   }<br />  }).when(timeConsumingExternalServiceMock).process();<br />  // Inject the mock to the Task - in any possible way<br />  someTask.setTimeConsumingExternalService(timeConsumingExternalServiceMock);<br /> }<br /><br /> public void executeTest() {<br />  executorService.execute(someTask);<br /> }<br /><br /> public static void main(String args[]) {<br />  ServiceIntegrationTest integrationTest = new ServiceIntegrationTest();<br />  integrationTest.executeTest();<br /> }<br />}<br /></pre><br /><br />And the output to the console:<br /><br />2012-10-07 22:42:37,378 DEBUG pl.grzejszczak.marcin.SomeTask:21 Before processing<br />2012-10-07 22:42:37,389 DEBUG pl.grzejszczak.marcin.ServiceIntegrationTest:28 Sleeping<br />2012-10-07 22:42:42,390 DEBUG pl.grzejszczak.marcin.ServiceIntegrationTest:30 Stopped Sleeping<br />2012-10-07 22:42:42,392 DEBUG pl.grzejszczak.marcin.SomeTask:23 After processing<br /><br />Let's take a closer look at the most important part in which an Answer for the execution of the service is being created  <br /><pre class="brush:java">Mockito.doAnswer(new Answer&lt;Object&gt;() {<br />   public Object answer(InvocationOnMock invocation) throws Throwable {<br />    // Simulation of connection to external services<br />    LOGGER.debug("Sleeping");<br />    Thread.sleep(5000);<br />    LOGGER.debug("Stopped Sleeping");<br />    return null;<br />   }<br />  }).when(timeConsumingExternalServiceMock).process();<br /></pre><br />This piece of code changes the default action that should be done by the given object on a given method execution. In this particular case we had to mock a method that returns void - that's why we start with doAnswer(...) and finish with when(...).process(). <br /><br />That is how inside the integration test I managed to create a simulation of waiting for the service to finish. If you have any ideas or comments on how you would do it in another way please feel free to post a comment below :) </div>

]]></content>
  </entry>
  
</feed>
