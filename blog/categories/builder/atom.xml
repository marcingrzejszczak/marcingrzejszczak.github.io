<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Builder | TOO MUCH CODING]]></title>
  <link href="http://toomuchcoding.com/blog/categories/builder/atom.xml" rel="self"/>
  <link href="http://toomuchcoding.com/"/>
  <updated>2018-12-08T22:22:19+01:00</updated>
  <id>http://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Execution of Groovy Scripts From Java - XmlSlurper and MarkupBuilder in Mapping Issues]]></title>
    <link href="http://toomuchcoding.com/blog/2013/03/30/execution-of-groovy-scripts-from-java/"/>
    <updated>2013-03-30T15:09:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2013/03/30/execution-of-groovy-scripts-from-java</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><h2>Problem with mappings</h2><br />In our project we came across a really big problem related to mapping. Having two systems that initially were defined by the BA to be somehwat simillar we have chosen the simple XSLT (done through Altova Mapforce) of the input message to the output one.<br />
<!--more-->
<br />Afterwards it turned out that the functions required to perform a mapping are becoming enormous. An example of such a mapping is:<br /><blockquote class="tr_bq">From the input message take a list of Cars iterate over it and find a Car whose field "prodcutionDate" is the lowest and the attribute "make" is equal to "Honda" and as the output return the "saleDate"</blockquote>So in order to map it we decided to move to JBoss Drools. The <a href="http://toomuchcoding.blogspot.com/2013/02/drools-decision-tables-with-camel-and.html">decision tables</a> were out of question since the logic was to complex and customized to be placed in the spreadsheet so we coded everything in the DRL files. Soon the rules got really big and some of our developers were forced to spend plenty of time on constant recreation of rules stated by the BA.<br /><br />Out of frustration and after having seen all the amazing things at the&nbsp;<a href="http://2013.33degree.org/">33rd degree conference</a> I decided to start finding solutions to my problems which were:<br /><br /><a name='more'></a><br /><ol><li>The DRL files are big and started to become unmaintainable (for a single field we had for example 4 rules)</li><li>Since the BA has never coded a single Drools rule / XSLT &nbsp;in his life adding a simple if... else... statement for him is not a problem</li><li>The BA has to wait for the mapping implementation by the devs until he can test it</li><li>The devs are spending far too much time on coding the mapping rules instead of developing other features</li></ol><div>After stating these problems a research regarding mapping frameworks took place and one of the concepts that I began working on was trying to create the mapping in Groovy. Since Groovy (thanks to for example PropertyMissing and MethodMissing) is a perfect language for creating a DSL I decided to start right away. The only two things I had to remember about were:</div><div><ol><li>The current application is written purely in Java</li><li>The mapping code (in order to perform fast testing) has to be detached from the application as such - it can't be compiled during deployment because we want to have the possibility of frequent substitutions of the mappings</li></ol><div><h2>Project structure&nbsp;</h2><br />Having defined the language, the constraints I created the following solution:</div></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s1600/Project+structure.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s320/Project+structure.png" width="255" /></a></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">The project structure</div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">As you can see the project structure is very simple. To begin with it is built in <b>Gradle</b>. The main function can be found in the <b>XmlTransformer.java</b>. The flow is such that the <b>TransformerFactory</b>&nbsp;creates a <b>Transformer</b>&nbsp;basing on the Groovy script that came out of the <b>ScriptFactory </b>(in our project for different types of products that we distinguish by a field in the XML file, we have different DRL files). The Groovy scripts are residing in the classpath in the <b>/groovy/</b> folder (of course at the end of the day those scripts should be placed outside any jars).&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">In the <b>build.gradle</b>&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">apply plugin: 'java'<br /><br />group = 'com.blogspot.toomuchcoding'<br />version = '1.0'<br /><br />repositories {<br />    mavenCentral()<br />}<br /><br />dependencies {<br />    compile 'org.codehaus.groovy:groovy-all:2.0.5'<br />    compile 'org.slf4j:slf4j-log4j12:1.7.2'<br />    compile 'log4j:log4j:1.2.16'<br />    compile 'com.google.guava:guava:14.0'<br /><br />    testCompile group: 'junit', name: 'junit', version: '4.+'<br />}<br /><br />task(executeMain, dependsOn: 'classes', type: JavaExec) {<br />    main = 'com.blogspot.toomuchcoding.XmlTransformer'<br />    classpath = sourceSets.main.runtimeClasspath<br />}<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">we can see that there is no groovy plugin -&nbsp;it has been done deliberately since we don't want our scripts to be compiled. Now let's take a look at the logic behind the TransformerFactory that compiles the Groovy script. What is really important is the fact that our Groovy class implements an interface created in our Java project - we want from the Java point of view to have no problems with execution of the Groovy code.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><b>TransformerFactoryImpl.java</b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:java">package com.blogspot.toomuchcoding.factory;<br /><br />import com.blogspot.toomuchcoding.transformer.Transformer;<br />import com.google.common.io.Resources;<br />import groovy.util.GroovyScriptEngine;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />import java.io.File;<br />import java.net.URL;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 22.03.13<br /> * Time: 23:54<br /> */<br />public class TransformerFactoryImpl implements TransformerFactory&lt;String, String&gt; {<br />    private static final String GROOVY_SCRIPTS_CLASSPATH = "groovy/";<br />    private static Logger LOGGER = LoggerFactory.getLogger(TransformerFactoryImpl.class);<br /><br />    private ScriptFactory scriptFactory;<br />    private GroovyScriptEngine groovyScriptEngine;<br /><br />    public TransformerFactoryImpl(ScriptFactory scriptFactory) {<br />        this.scriptFactory = scriptFactory;<br />        try {<br />            groovyScriptEngine = new GroovyScriptEngine(GROOVY_SCRIPTS_CLASSPATH);<br />        } catch (IOException e) {<br />            LOGGER.error("Exception occurred while trying to create the Groovy script engine", e);<br />            throw new RuntimeException(e);<br />        }<br />    }<br /><br />    @Override<br />    public Transformer&lt;String, String&gt; createTransformer() {<br />        Transformer&lt;String, String&gt; transformerFromScript = null;<br />        try {<br />            File scriptFile = scriptFactory.createScript();<br />            URL scriptAsAClasspathResource = Resources.getResource(GROOVY_SCRIPTS_CLASSPATH + scriptFile.getName());<br />            Class classFromScript = groovyScriptEngine.loadScriptByName(scriptAsAClasspathResource.getFile());<br />            transformerFromScript = (Transformer&lt;String, String&gt;) classFromScript.newInstance();<br />        } catch (Exception e) {<br />            LOGGER.error("Exception occurred while trying to execute Groovy script", e);<br />        }<br />        return transformerFromScript;<br />    }<br /><br />}<br /><br /></pre><div class="separator" style="clear: both; text-align: left;">A <b>GroovyScriptEngine</b>&nbsp;is used to load a script by name. I chose the <a href="http://docs.codehaus.org/display/GROOVY/Embedding+Groovy">GroovyScriptEngine</a> (hopefully I used it in a good way ;) ) &nbsp;because:</div><blockquote class="tr_bq"><span style="background-color: white; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 17.328125px;">The most complete solution for people who want to embed groovy scripts into their servers and have them reloaded on modification is the GroovyScriptEngine. You initialize the GroovyScriptEngine with a set of CLASSPATH like roots that can be URLs or directory names. You can then execute any Groovy script within those roots. The GSE will also track dependencies between scripts so that if any dependent script is modified the whole tree will be recompiled and reloaded.</span></blockquote><div class="separator" style="clear: both; text-align: left;">I wanted to have some way of caching the compiled classes in order not to have any issues with PermGen.</div><div class="separator" style="clear: both; text-align: left;">Anyway you can see that I am doing some conversions to have the URL of the classpath Groovy script resource. At the end we are extracting a class from the Groovy script and we are casting it to the Transformer.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><b>AbstractGroovyXmlTransformer.groovy</b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">package groovy<br /><br />import com.blogspot.toomuchcoding.transformer.Transformer<br />import groovy.util.slurpersupport.NodeChildren<br />import groovy.xml.MarkupBuilder<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 23.03.13<br /> * Time: 02:16<br /> */<br />abstract class AbstractGroovyXmlTransformer implements Transformer&lt;String, String&gt; {<br /><br />    static Map&lt;String, Object&gt; MISSING_PROPERTIES = ["convertDate": new DateConverter(), "map": new Mapper()]<br /><br />    @Override<br />    String transform(String input) {<br />        def inputXml = new XmlSlurper().parseText input<br />        def writer = new StringWriter()<br />        def outputXml = new MarkupBuilder(writer)<br />        doTransform inputXml, outputXml<br />        writer.toString()<br />    }<br /><br />    abstract void doTransform(inputXml, outputXml)<br /><br />    def propertyMissing(String name) {<br />        Object property = MISSING_PROPERTIES[name]<br />        assert property != null, "There is no function like [$name]. The ones that are supported are ${MISSING_PROPERTIES.keySet()}"<br />        property<br />    }<br /><br /><br /><br />    protected static class Mapper {<br />        private Map&lt;String, String&gt; inputParameters<br /><br />        Mapper given(Map inputParameters) {<br />            this.inputParameters = inputParameters<br />            this<br />        }<br /><br />        String from(NodeChildren nodeChildren) {<br />            assert inputParameters != null, "The mapping can't be null!"<br />            assert nodeChildren != null, "Node can't be null!"<br />            String nodeText = nodeChildren.text()<br />            String mappedValue = inputParameters[nodeText]<br />            mappedValue ?: inputParameters.default<br />        }<br /><br />        static Mapper map(Map&lt;String, String&gt; inputParameters) {<br />            return new Mapper(inputParameters)<br />        }<br />    }<br /><br />    protected static class DateConverter {<br />        private String inputDate<br />        private String inputDateFormat<br /><br />        DateConverter from(NodeChildren nodeChildren) {<br />            this.inputDate = nodeChildren.text()<br />            this<br />        }<br /><br />        DateConverter havingDateFormat(String inputDateFormat) {<br />            this.inputDateFormat = inputDateFormat<br />            this<br />        }<br /><br />        String toOutputDateFormat(String outputDateFormat) {<br />            assert inputDate != null, "The input date for which you are trying to do the conversion can't be null"<br />            assert inputDateFormat != null, "The input date format for which you are trying to do the conversion can't be null"<br />            assert outputDateFormat != null, "The output date format for which you are trying to do the conversion can't be null"<br />            Date.parse(inputDateFormat, inputDate).format(outputDateFormat)<br />        }<br /><br />        static DateConverter convertDate() {<br />            new DateConverter()<br />        }<br />    }<br />}</pre><pre class="brush:groovy"></pre><div class="separator" style="clear: both; text-align: left;">In this abstract Groovy class I decided to place all the logic that could blur the image for the BA. In addition to that I created some helper classes and methods. In order to fully use the Groovy's DSL capabilities I used the propertyMissing method to map the words <b>"map"</b> and <b>"convertDate"</b>&nbsp;to create the instances of the helper classes which are used in the <b>Builder</b> design pattern way:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">convertDate.from(inputXml.InputSystemContext.InputDate).havingDateFormat("dd/MM/yyyy").toOutputDateFormat("yy/MM/dd")<br /><br />or<br /><br />map.given("Some_action" : "Some_output_action", "default" : "something else").from(inputXml.AdditionalData.TypeOfAction)<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">If there is no such "function" (for example a BA makes a typo or sth) then an assertion error is being thrown and a list of supported "function" (which in reality are properties - but they are functions from the BA's perspective) is being printed.&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Now let's move to the script that would be used by the BA.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><b>GroovyXmlTransformer.groovy</b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">package groovy<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 22.03.13<br /> * Time: 23:59<br /> *<br /> * additional functions:<br /> *<br /> * convertDate.from(Node).havingDateFormat("DateFormat").toOutputDateFormat("AnotherDateFormat")<br /> * map.given("Value to be mapped from" : "Value to be mapped to", "default" : "default value").from(Node)<br /> *<br /> */<br />class GroovyXmlTransformer extends AbstractGroovyXmlTransformer {<br /><br />    @Override<br />    void doTransform(inputXml, outputXml) {<br />        outputXml.OutputSystemEnvelope() {<br />            OutputSystemContext {<br />                ResponseID(inputXml.InputSystemContext.RequestID.text().reverse())<br />                OutputSource('OUTPUT_SYSTEM')<br />                OutputDate(convertDate.from(inputXml.InputSystemContext.InputDate).havingDateFormat("dd/MM/yyyy").toOutputDateFormat("yy/MM/dd"))<br />            }<br />            OutputAdditionalData {<br />                OutputReferenceNo("SOME_PREFIX_${inputXml.AdditionalData.ReferenceNo.text()}_SOME_SUFIX")<br />                OutputTypeOfAction(map.given("Some_action" : "Some_output_action", "default" : "something else").from(inputXml.AdditionalData.TypeOfAction))<br />                OutputTransactions {<br />                    inputXml.AdditionalData.Transactions.Transaction.each {<br />                        OutputTransaction(Client: it.Client, ProductType: it.ProductType, 'Done')<br />                    }<br />                }<br />                OutputProducts {<br />                    def minProduct = inputXml.AdditionalData.Products.Product.list().min { it.Value.text() }<br />                    def maxProduct = inputXml.AdditionalData.Products.Product.list().max { it.Value.text() }<br />                    MinProduct(name: minProduct.Name.text(), minProduct.Value.text())<br />                    MaxProduct(name: maxProduct.Name.text(), maxProduct.Value.text())<br />                }<br />            }<br />        }<br />    }<br />}<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">This piece of code does the following mapping (You can check the <b>/xml/SampleXml.xml</b> ):</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="datagrid"><table><thead><tr><th>Mapped from</th><th>Mapped to</th></tr></thead><tbody><tr><td>InputSystemEnvelope</td><td>OutputSystemEnvelope</td></tr><tr class="alt"><td>InputSystemContex</td><td>OutputSystemContex</td></tr><tr><td>RequestId</td><td>ResponseId (the Id should be reverted)</td></tr><tr class="alt"><td>InputSource</td><td>OutputSoutce (constant "UTPUT_SYSTEM")</td></tr><tr><td>InputDate</td><td>OutputDate (converted from dd/MM/yyyy to yy/MM/dd) </td></tr><tr class="alt"><td>InputAdditionalData</td><td>OutputAdditionalData</td></tr><tr><td>InputReferenceNo</td><td>OutputReferenceNo ( "SOME_PREFIX_" + value from InputReferenceNo + "_SOME_SUFIX") </td></tr><tr class="alt"><td>InputTypeOfAction</td><td>OutputTypeOfAction (mapped in such a way that if InputTypeOfAction is equal to "Some_action" then we will have "Some_output_action". Otherwise we get "something else")</td></tr><tr><td>Transactions</td><td>OutputTransactions</td></tr><tr class="alt"><td>Transaction</td><td>OutputTransaction ( Attribute Client from Transaction.Client, Attribute ProductType from Transaction.ProductType, and the value "Done")</td></tr><tr><td>Products</td><td>OutputProducts</td></tr><tr class="alt"><td>Product having min value</td><td>MinProduct</td></tr><tr><td>Product having max value</td><td>MaxProduct</td></tr></tbody></table></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h2>The output</h2><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:xml">Converted from [&lt;InputSystemEnvelope&gt;<br />    &lt;InputSystemContext&gt;<br />        &lt;RequestID&gt;1234567890&lt;/RequestID&gt;<br />        &lt;InputSource&gt;INPUT_SYSTEM&lt;/InputSource&gt;<br />        &lt;InputDate&gt;22/03/2013&lt;/InputDate&gt;<br />    &lt;/InputSystemContext&gt;<br />    &lt;AdditionalData&gt;<br />        &lt;ReferenceNo&gt;Ref1234567&lt;/ReferenceNo&gt;<br />        &lt;TypeOfAction&gt;Some_action&lt;/TypeOfAction&gt;<br />        &lt;Transactions&gt;<br />            &lt;Transaction&gt;<br />                &lt;Client&gt;ACME&lt;/Client&gt;<br />                &lt;ProductType&gt;IRS&lt;/ProductType&gt;<br />            &lt;/Transaction&gt;<br />            &lt;Transaction&gt;<br />                &lt;Client&gt;Oracle&lt;/Client&gt;<br />                &lt;ProductType&gt;DB&lt;/ProductType&gt;<br />            &lt;/Transaction&gt;<br />        &lt;/Transactions&gt;<br />        &lt;Products&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Book&lt;/Name&gt;<br />                &lt;Value&gt;1&lt;/Value&gt;<br />            &lt;/Product&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Car&lt;/Name&gt;<br />                &lt;Value&gt;10000&lt;/Value&gt;<br />            &lt;/Product&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Boat&lt;/Name&gt;<br />                &lt;Value&gt;100000000&lt;/Value&gt;<br />            &lt;/Product&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Spaceship&lt;/Name&gt;<br />                &lt;Value&gt;1000000000000000000&lt;/Value&gt;<br />            &lt;/Product&gt;<br />        &lt;/Products&gt;<br />    &lt;/AdditionalData&gt;<br />&lt;/InputSystemEnvelope&gt;]<br /><br /> to<br /><br />[&lt;OutputSystemEnvelope&gt;<br />  &lt;OutputSystemContext&gt;<br />    &lt;ResponseID&gt;0987654321&lt;/ResponseID&gt;<br />    &lt;OutputSource&gt;OUTPUT_SYSTEM&lt;/OutputSource&gt;<br />    &lt;OutputDate&gt;13/03/22&lt;/OutputDate&gt;<br />  &lt;/OutputSystemContext&gt;<br />  &lt;OutputAdditionalData&gt;<br />    &lt;OutputReferenceNo&gt;SOME_PREFIX_Ref1234567_SOME_SUFIX&lt;/OutputReferenceNo&gt;<br />    &lt;OutputTypeOfAction&gt;Some_output_action&lt;/OutputTypeOfAction&gt;<br />    &lt;OutputTransactions&gt;<br />      &lt;OutputTransaction Client='ACME' ProductType='IRS'&gt;Done&lt;/OutputTransaction&gt;<br />      &lt;OutputTransaction Client='Oracle' ProductType='DB'&gt;Done&lt;/OutputTransaction&gt;<br />    &lt;/OutputTransactions&gt;<br />    &lt;OutputProducts&gt;<br />      &lt;MinProduct name='Book'&gt;1&lt;/MinProduct&gt;<br />      &lt;MaxProduct name='Spaceship'&gt;1000000000000000000&lt;/MaxProduct&gt;<br />    &lt;/OutputProducts&gt;<br />  &lt;/OutputAdditionalData&gt;<br />&lt;/OutputSystemEnvelope&gt;]<br /></pre><div><h2>Pros and cons</h2>The pros and cons of this approach are as follows:<br /><br />Pros:<br /><ul><li>The mapping is done sequentialy - field by field (it is easier to debug the problem)</li><li>The mapping consists of vocabulary understandable by the BA</li><li>Most of mappings could be done by the BA</li><li>The majority of non-mapping grammar is hidden in the abstraction</li><li>The compilation of the Groovy script is faster than creation of KnowledgeBases and compilation of Drools scripts</li><li>Independence on the XML schema (each change of the schema would require the recompilation of the JAXB classes)</li></ul><div>Cons:</div><div><ul><li>The BA would have to have some knowledge from the domain of computer science</li><li>No parallel mapping</li><li>The mapping might get less readable due to the fact that it is highly probable that the BA (out of lack of time) won't create a single function - all the logic will end up in the closures for a given Node.</li><li>There might be some memory issues with parsing and recompilation of the Groovy scripts</li><li>No XML schema may lead to improper output / input XML path setting</li></ul><h2>Summary</h2></div><div>The problem with mapping that we encountered in our project turned out to be a very interesting issue to deal with. The example shown in this post is only a proposition of solving the issue and hopefully could be a starting point to a further discussion on the topic. If you have any ideas or opinions on this topic please leave a comment under <a href="http://toomuchcoding.blogspot.com/2013/03/execution-of-groovy-scripts-from-java.html">this article</a>.</div><div><br /></div><div>The sources can be found on the <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/69f4b59e4452e630670c71150d125e7ea86170aa/Groovy/Mappings?at=default">Too Much Coding BitBucket repository</a> and on <a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Groovy/Mappings">GitHub</a>.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hamcrest Matchers, Guava Predicate and Builder Design Pattern]]></title>
    <link href="http://toomuchcoding.com/blog/2013/01/03/hamcrest-matchers-guava-predicate-and/"/>
    <updated>2013-01-03T16:35:00-08:00</updated>
    <id>http://toomuchcoding.com/blog/2013/01/03/hamcrest-matchers-guava-predicate-and</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Hi coding addicts :)<br /><br />Often, while coding we have to deal with some POJO objects that have dozens of fields in them. Many times we initialize those classes through a constructor having dozens of arguments which is terrible in any possibly imaginable way :) Apart from that the functions that use those constructors are hardly testable. Let's take a closer look at using a Builder to change that situation, together with Hamcrest matchers and Guava Predicates to unit test it.<br />
<!--more-->
<br />Let's start off with taking a look at the POJO class.<br /><br /><br /><a name='more'></a><br /><br /><b>SomeBigPojo.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.pojo;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 21:05<br /> */<br />public class SomeBigPojo {<br />    private String stringField0;<br />    private Integer integerField0;<br />    private Boolean booleanField0;<br />    private String stringField1;<br />    private Integer integerField1;<br />    private Boolean booleanField1;<br />    private String stringField2;<br />    private Integer integerField2;<br />    private Boolean booleanField2;<br />    private String stringField3;<br />    private Integer integerField3;<br />    private Boolean booleanField3;<br />    private String stringField4;<br />    private Integer integerField4;<br />    private Boolean booleanField4;<br />    private String stringField5;<br />    private Integer integerField5;<br />    private Boolean booleanField5;<br />    private String stringField6;<br />    private Integer integerField6;<br />    private Boolean booleanField6;<br />    private String stringField7;<br />    private String stringField8;<br />    private String stringField9;<br /><br />    public SomeBigPojo(String stringField0, Integer integerField0, Boolean booleanField0, String stringField1, Integer integerField1, Boolean booleanField1, String stringField2, Integer integerField2, Boolean booleanField2, String stringField3, Integer integerField3, Boolean booleanField3, String stringField4, Integer integerField4, Boolean booleanField4, String stringField5, Integer integerField5, Boolean booleanField5, String stringField6, Integer integerField6, Boolean booleanField6, String stringField7, String stringField8, String stringField9) {<br />        this.stringField0 = stringField0;<br />        this.integerField0 = integerField0;<br />        this.booleanField0 = booleanField0;<br />        this.stringField1 = stringField1;<br />        this.integerField1 = integerField1;<br />        this.booleanField1 = booleanField1;<br />        this.stringField2 = stringField2;<br />        this.integerField2 = integerField2;<br />        this.booleanField2 = booleanField2;<br />        this.stringField3 = stringField3;<br />        this.integerField3 = integerField3;<br />        this.booleanField3 = booleanField3;<br />        this.stringField4 = stringField4;<br />        this.integerField4 = integerField4;<br />        this.booleanField4 = booleanField4;<br />        this.stringField5 = stringField5;<br />        this.integerField5 = integerField5;<br />        this.booleanField5 = booleanField5;<br />        this.stringField6 = stringField6;<br />        this.integerField6 = integerField6;<br />        this.booleanField6 = booleanField6;<br />        this.stringField7 = stringField7;<br />        this.stringField8 = stringField8;<br />        this.stringField9 = stringField9;<br />    }<br /><br />    public String getStringField0() {<br />        return stringField0;<br />    }<br /><br />    public void setStringField0(String stringField0) {<br />        this.stringField0 = stringField0;<br />    }<br /><br />    public Integer getIntegerField0() {<br />        return integerField0;<br />    }<br /><br />    public void setIntegerField0(Integer integerField0) {<br />        this.integerField0 = integerField0;<br />    }<br /><br />    public Boolean getBooleanField0() {<br />        return booleanField0;<br />    }<br /><br />    public void setBooleanField0(Boolean booleanField0) {<br />        this.booleanField0 = booleanField0;<br />    }<br /><br />    public String getStringField1() {<br />        return stringField1;<br />    }<br /><br />    public void setStringField1(String stringField1) {<br />        this.stringField1 = stringField1;<br />    }<br /><br />    public Integer getIntegerField1() {<br />        return integerField1;<br />    }<br /><br />    public void setIntegerField1(Integer integerField1) {<br />        this.integerField1 = integerField1;<br />    }<br /><br />    public Boolean getBooleanField1() {<br />        return booleanField1;<br />    }<br /><br />    public void setBooleanField1(Boolean booleanField1) {<br />        this.booleanField1 = booleanField1;<br />    }<br /><br />    public String getStringField2() {<br />        return stringField2;<br />    }<br /><br />    public void setStringField2(String stringField2) {<br />        this.stringField2 = stringField2;<br />    }<br /><br />    public Integer getIntegerField2() {<br />        return integerField2;<br />    }<br /><br />    public void setIntegerField2(Integer integerField2) {<br />        this.integerField2 = integerField2;<br />    }<br /><br />    public Boolean getBooleanField2() {<br />        return booleanField2;<br />    }<br /><br />    public void setBooleanField2(Boolean booleanField2) {<br />        this.booleanField2 = booleanField2;<br />    }<br /><br />    public String getStringField3() {<br />        return stringField3;<br />    }<br /><br />    public void setStringField3(String stringField3) {<br />        this.stringField3 = stringField3;<br />    }<br /><br />    public Integer getIntegerField3() {<br />        return integerField3;<br />    }<br /><br />    public void setIntegerField3(Integer integerField3) {<br />        this.integerField3 = integerField3;<br />    }<br /><br />    public Boolean getBooleanField3() {<br />        return booleanField3;<br />    }<br /><br />    public void setBooleanField3(Boolean booleanField3) {<br />        this.booleanField3 = booleanField3;<br />    }<br /><br />    public String getStringField4() {<br />        return stringField4;<br />    }<br /><br />    public void setStringField4(String stringField4) {<br />        this.stringField4 = stringField4;<br />    }<br /><br />    public Integer getIntegerField4() {<br />        return integerField4;<br />    }<br /><br />    public void setIntegerField4(Integer integerField4) {<br />        this.integerField4 = integerField4;<br />    }<br /><br />    public Boolean getBooleanField4() {<br />        return booleanField4;<br />    }<br /><br />    public void setBooleanField4(Boolean booleanField4) {<br />        this.booleanField4 = booleanField4;<br />    }<br /><br />    public String getStringField5() {<br />        return stringField5;<br />    }<br /><br />    public void setStringField5(String stringField5) {<br />        this.stringField5 = stringField5;<br />    }<br /><br />    public Integer getIntegerField5() {<br />        return integerField5;<br />    }<br /><br />    public void setIntegerField5(Integer integerField5) {<br />        this.integerField5 = integerField5;<br />    }<br /><br />    public Boolean getBooleanField5() {<br />        return booleanField5;<br />    }<br /><br />    public void setBooleanField5(Boolean booleanField5) {<br />        this.booleanField5 = booleanField5;<br />    }<br /><br />    public String getStringField6() {<br />        return stringField6;<br />    }<br /><br />    public void setStringField6(String stringField6) {<br />        this.stringField6 = stringField6;<br />    }<br /><br />    public Integer getIntegerField6() {<br />        return integerField6;<br />    }<br /><br />    public void setIntegerField6(Integer integerField6) {<br />        this.integerField6 = integerField6;<br />    }<br /><br />    public Boolean getBooleanField6() {<br />        return booleanField6;<br />    }<br /><br />    public void setBooleanField6(Boolean booleanField6) {<br />        this.booleanField6 = booleanField6;<br />    }<br /><br />    public String getStringField7() {<br />        return stringField7;<br />    }<br /><br />    public void setStringField7(String stringField7) {<br />        this.stringField7 = stringField7;<br />    }<br /><br />    public String getStringField8() {<br />        return stringField8;<br />    }<br /><br />    public void setStringField8(String stringField8) {<br />        this.stringField8 = stringField8;<br />    }<br /><br />    public String getStringField9() {<br />        return stringField9;<br />    }<br /><br />    public void setStringField9(String stringField9) {<br />        this.stringField9 = stringField9;<br />    }<br /><br />    @Override<br />    public String toString() {<br />        final StringBuilder sb = new StringBuilder();<br />        sb.append("SomeBigPojo");<br />        sb.append("{stringField0='").append(stringField0).append('\'');<br />        sb.append(", integerField0=").append(integerField0);<br />        sb.append(", booleanField0=").append(booleanField0);<br />        sb.append(", stringField1='").append(stringField1).append('\'');<br />        sb.append(", integerField1=").append(integerField1);<br />        sb.append(", booleanField1=").append(booleanField1);<br />        sb.append(", stringField2='").append(stringField2).append('\'');<br />        sb.append(", integerField2=").append(integerField2);<br />        sb.append(", booleanField2=").append(booleanField2);<br />        sb.append(", stringField3='").append(stringField3).append('\'');<br />        sb.append(", integerField3=").append(integerField3);<br />        sb.append(", booleanField3=").append(booleanField3);<br />        sb.append(", stringField4='").append(stringField4).append('\'');<br />        sb.append(", integerField4=").append(integerField4);<br />        sb.append(", booleanField4=").append(booleanField4);<br />        sb.append(", stringField5='").append(stringField5).append('\'');<br />        sb.append(", integerField5=").append(integerField5);<br />        sb.append(", booleanField5=").append(booleanField5);<br />        sb.append(", stringField6='").append(stringField6).append('\'');<br />        sb.append(", integerField6=").append(integerField6);<br />        sb.append(", booleanField6=").append(booleanField6);<br />        sb.append(", stringField7='").append(stringField7).append('\'');<br />        sb.append(", stringField8='").append(stringField8).append('\'');<br />        sb.append(", stringField9='").append(stringField9).append('\'');<br />        sb.append('}');<br />        return sb.toString();<br />    }<br />}<br /><br /></pre>Now take a look at the builder class that was used in order to get rid of usage of the humongous constructor. What is more you can set whatever you want to without the need to enter nulls for the undesired fields.<br /><br /><b>SomeBigPojoBuilder.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static com.google.common.base.Preconditions.checkNotNull;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 21:08<br /> */<br />public class SomeBigPojoBuilder {<br />    /** A field with some default value */<br />    private String stringField0 = "defaultValueForString0";<br />    /** A field with some default value */<br />    private Integer integerField0 = 100;<br />    /** A field with some default value */<br />    private Boolean booleanField0 = true;<br />    private String stringField1;<br />    private Integer integerField1;<br />    private Boolean booleanField1;<br />    private String stringField2;<br />    private Integer integerField2;<br />    private Boolean booleanField2;<br />    private String stringField3;<br />    private Integer integerField3;<br />    private Boolean booleanField3;<br />    private String stringField4;<br />    private Integer integerField4;<br />    private Boolean booleanField4;<br />    private String stringField5;<br />    private Integer integerField5;<br />    private Boolean booleanField5;<br />    private String stringField6;<br />    private Integer integerField6;<br />    private Boolean booleanField6;<br />    private String stringField7;<br />    private String stringField8;<br />    private String stringField9;<br /><br />    public SomeBigPojoBuilder setStringField0(String stringField0) {<br />        this.stringField0 = stringField0;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField0(Integer integerField0) {<br />        this.integerField0 = integerField0;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField0(Boolean booleanField0) {<br />        this.booleanField0 = booleanField0;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField1(String stringField1) {<br />        this.stringField1 = stringField1;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField1(Integer integerField1) {<br />        this.integerField1 = integerField1;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField1(Boolean booleanField1) {<br />        this.booleanField1 = booleanField1;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField2(String stringField2) {<br />        this.stringField2 = stringField2;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField2(Integer integerField2) {<br />        this.integerField2 = integerField2;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField2(Boolean booleanField2) {<br />        this.booleanField2 = booleanField2;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField3(String stringField3) {<br />        this.stringField3 = stringField3;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField3(Integer integerField3) {<br />        this.integerField3 = integerField3;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField3(Boolean booleanField3) {<br />        this.booleanField3 = booleanField3;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField4(String stringField4) {<br />        this.stringField4 = stringField4;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField4(Integer integerField4) {<br />        this.integerField4 = integerField4;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField4(Boolean booleanField4) {<br />        this.booleanField4 = booleanField4;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField5(String stringField5) {<br />        this.stringField5 = stringField5;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField5(Integer integerField5) {<br />        this.integerField5 = integerField5;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField5(Boolean booleanField5) {<br />        this.booleanField5 = booleanField5;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField6(String stringField6) {<br />        this.stringField6 = stringField6;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setIntegerField6(Integer integerField6) {<br />        this.integerField6 = integerField6;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setBooleanField6(Boolean booleanField6) {<br />        this.booleanField6 = booleanField6;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField7(String stringField7) {<br />        this.stringField7 = stringField7;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField8(String stringField8) {<br />        this.stringField8 = stringField8;<br />        return this;<br />    }<br /><br />    public SomeBigPojoBuilder setStringField9(String stringField9) {<br />        this.stringField9 = stringField9;<br />        return this;<br />    }<br /><br />    /**<br />     * Some function checking the state of our POJO<br />     */<br />    private void checkState(){<br />        checkNotNull(stringField1, "StringField1 must not be null!");<br />    }<br /><br />    public SomeBigPojo createSomeBigPojoWithBuilder() {<br />        checkState();<br />        return new SomeBigPojo(stringField0, integerField0, booleanField0, stringField1, integerField1, booleanField1, stringField2, integerField2, booleanField2, stringField3, integerField3, booleanField3, stringField4, integerField4, booleanField4, stringField5, integerField5, booleanField5, stringField6, integerField6, booleanField6, stringField7, stringField8, stringField9);<br />    }<br />}<br /></pre><br />Take a look at the function checkState that verifies whether the object is of a desired state. In this way we may disallow the creation of an object if some conditions where not fullfiled. For that case we are using the Guava's Predicate - checkNotNull method. <br /><br />Note that the concept behind the Builder pattern is to delegate creation of an object to a Builder. In fact in the pure Builder design pattern implementation we would have to have a Director, some abstraction over a Builder and the concrete implementation of the Builder as such. In our case we have a simplification of that pattern - I used the refactoring option of IntelliJ. What can be done to make it look even better is to remove the constructor from the POJO and pass the values only by setters (that's what in fact I did in one of my projects ;) ) <br /><br />Now let's take a look at some usage examples: <br /><b><br /></b><b>SomeServiceImpl.java </b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.service;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static java.lang.String.format;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 21:25<br /> */<br />public class SomeServiceImpl implements SomeService {<br />    private static final Logger LOGGER = LoggerFactory.getLogger(SomeServiceImpl.class);<br /><br />    /** Could be an abstraction of builders injected by a setter - possible to mock */<br />    private SomeBigPojoBuilder someBigPojoBuilder;<br /><br />    /**<br />     * Hard to unit test<br />     */<br />    @Override<br />    public void someLogicForAPojoWithoutBuilder() {<br />        LOGGER.debug("SomeLogicForAPojoWithoutBuilder executed");<br />        SomeBigPojo someBigPojo = new SomeBigPojo("string", 1, false, "other string", 123, true, "something else", 321, false, "yet another string", 111, true, "something", 2, false, "More", 3, true, "String", 12, false, "some", "value", "ofString");<br />        // Any chance of knowing what is the value of stringField8 basing on the constructor?<br />        LOGGER.debug(format("StringField8 is equal [%s]%n", someBigPojo.getStringField8()));<br />        // Print the object<br />        LOGGER.debug(someBigPojo.toString());<br />    }<br /><br />    @Override<br />    public void someLogicForAPojoWithBuilder() {<br />        LOGGER.debug("SomeLogicForAPojoWithBuilder executed");<br />        SomeBigPojo someBigPojo = someBigPojoBuilder<br />                .setStringField0("string")<br />                .setIntegerField0(1)<br />                .setBooleanField0(false)<br />                .setStringField1("other string")<br />                .setIntegerField1(123)<br />                .setBooleanField1(true)<br />                .setStringField2("something else")<br />                .setIntegerField2(321)<br />                .setBooleanField2(false)<br />                .setStringField3("yet another string")<br />                .setIntegerField3(111)<br />                .setBooleanField3(false)<br />                .setStringField4("something")<br />                .setIntegerField4(2)<br />                .setBooleanField4(false)<br />                .setStringField5("More")<br />                .setIntegerField5(3)<br />                .setBooleanField5(true)<br />                .setStringField6("String")<br />                .setIntegerField6(12)<br />                .setBooleanField6(false)<br />                .setStringField7("some")<br />                .setStringField8("value")<br />                .setStringField9("ofString")<br />                .createSomeBigPojoWithBuilder();<br />        // Looking at the builder now I guess it's obvious what the value of StringField8<br />        LOGGER.debug(format("StringField8 is equal [%s]%n", someBigPojo.getStringField8()));<br />        // Print the object<br />        LOGGER.debug(someBigPojo.toString());<br />    }<br /><br />    @Override<br />    public void someLogicForAPojoWithBuilderBadArgument() {<br />        LOGGER.debug("someLogicForAPojoWithBuilderBadArgument executed");<br />        SomeBigPojo someBigPojo = someBigPojoBuilder<br />                .setStringField0("string")<br />                .setIntegerField0(1)<br />                .setBooleanField0(true)<br />                .setIntegerField1(123)<br />                .setBooleanField1(true)<br />                .setStringField2("something else")<br />                .setIntegerField2(321)<br />                .setBooleanField2(false)<br />                .setStringField3("yet another string")<br />                .setIntegerField3(111).setBooleanField3(false)<br />                .setStringField4("something")<br />                .setIntegerField4(2)<br />                .setBooleanField4(false)<br />                .setStringField5("More")<br />                .setIntegerField5(3)<br />                .setBooleanField5(true)<br />                .setStringField6("String")<br />                .setIntegerField6(12)<br />                .setBooleanField6(false)<br />                .setStringField7("some")<br />                .setStringField8("value")<br />                .setStringField9("ofString")<br />                .createSomeBigPojoWithBuilder();<br />        // Print the object - will we even see an output<br />        LOGGER.debug(someBigPojo.toString());<br />    }<br /><br />    public void setSomeBigPojoBuilder(SomeBigPojoBuilder someBigPojoBuilder) {<br />        this.someBigPojoBuilder = someBigPojoBuilder;<br />    }<br />}<br /><br /><br /></pre><br /><br />Notice how clear it is now to create an object and how easy is to define if a field has been set or not. <br /><br />Let's move on to Hamcrest matchers that will help us in unit testing of our classes. I will not try to do the complete, 100% code coverage - the idea behind this post is to show how Hamcrest Matchers can become an addition to your unit tests. <br /><br />Often unit tests are quite unclear and look like this:<br /><b><br /></b><b>SomeBigPojoBuilderNoMatchersAndNoRefactoringTest.java </b><br /><b><br /></b><br /><pre class="brush:java"></pre><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import org.junit.Before;<br />import org.junit.Test;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static junit.framework.Assert.assertTrue;<br />import static org.apache.commons.lang.StringUtils.isNumeric;<br />import static pl.grzejszczak.marcin.junit.matchers.pojo.SomePojoConstants.*;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 23:02<br /> */<br />public class SomeBigPojoBuilderNoMatchersAndNoRefactoringTest {<br /><br />    private SomeBigPojoBuilder objectUnderTest;<br /><br />    @Before<br />    public void setUp() {<br />        objectUnderTest = new SomeBigPojoBuilder();<br />    }<br /><br />    @Test<br />    public void testCreateSomeBigPojoWithBuilder() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setBooleanField1(true)<br />                .setStringField0("1")<br />                .setStringField1("12")<br />                .setStringField2("123")<br />                .setStringField3("1234")<br />                .setStringField4("12345")<br />                .setStringField5("123456")<br />                .setStringField6("1234567")<br />                .setStringField7("12345678")<br />                .setStringField8("123456789")<br />                .setStringField9("1234567890")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    @Test(expected = AssertionError.class)<br />    public void testCreateSomeBigPojoWithBuilderWrongFields() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setStringField0("0")<br />                .setStringField1("Too long")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    private void isPojoProperlyBuilt(SomeBigPojo someBigPojo) {<br />        assertTrue(someBigPojo.getStringField0().length() == STRING_FIELD_0_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField1().length() == STRING_FIELD_1_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField2().length() == STRING_FIELD_2_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField3().length() == STRING_FIELD_3_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField4().length() == STRING_FIELD_4_LENGTH);<br />        assertTrue(isNumeric(someBigPojo.getStringField0()));<br /><br />        assertTrue(someBigPojo.getStringField5().length() == STRING_FIELD_5_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField6().length() == STRING_FIELD_6_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField7().length() == STRING_FIELD_7_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField8().length() == STRING_FIELD_8_LENGTH);<br /><br />        assertTrue(someBigPojo.getStringField9().length() == STRING_FIELD_9_LENGTH);<br /><br />    }<br />}<br /><br /></pre><br />Simple refactoring can make them look nicer... <br /><br /><b>SomeBigPojoBuilderNoMatchersTest.java </b><br /><b><br /></b><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import org.junit.Before;<br />import org.junit.Test;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static junit.framework.Assert.assertNotNull;<br />import static junit.framework.Assert.assertTrue;<br />import static org.apache.commons.lang.StringUtils.isNumeric;<br />import static pl.grzejszczak.marcin.junit.matchers.pojo.SomePojoConstants.*;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 23:02<br /> */<br />public class SomeBigPojoBuilderNoMatchersTest {<br /><br />    private SomeBigPojoBuilder objectUnderTest;<br /><br />    @Before<br />    public void setUp() {<br />        objectUnderTest = new SomeBigPojoBuilder();<br />    }<br /><br />    @Test<br />    public void testCreateSomeBigPojoWithBuilder() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setBooleanField1(true)<br />                .setStringField0("1")<br />                .setStringField1("12")<br />                .setStringField2("123")<br />                .setStringField3("1234")<br />                .setStringField4("12345")<br />                .setStringField5("123456")<br />                .setStringField6("1234567")<br />                .setStringField7("12345678")<br />                .setStringField8("123456789")<br />                .setStringField9("1234567890")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    @Test(expected = AssertionError.class)<br />    public void testCreateSomeBigPojoWithBuilderWrongFields() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setStringField0("0")<br />                .setStringField1("too long")<br />                .createSomeBigPojoWithBuilder();<br /><br />        isPojoProperlyBuilt(someBigPojo);<br />    }<br /><br />    private void isPojoProperlyBuilt(SomeBigPojo someBigPojo) {<br />        isOfGivenLength(someBigPojo.getStringField0(), STRING_FIELD_0_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField1(), STRING_FIELD_1_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField2(), STRING_FIELD_2_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField3(), STRING_FIELD_3_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField4(), STRING_FIELD_4_LENGTH);<br />        isFieldOfNumericValue(someBigPojo.getStringField0());<br /><br />        isOfGivenLength(someBigPojo.getStringField5(), STRING_FIELD_5_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField6(), STRING_FIELD_6_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField7(), STRING_FIELD_7_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField8(), STRING_FIELD_8_LENGTH);<br /><br />        isOfGivenLength(someBigPojo.getStringField9(), STRING_FIELD_9_LENGTH);<br /><br />    }<br /><br />    private void isOfGivenLength(String pojo, final Integer expectedLength) {<br />        assertNotNull(pojo);<br />        assertTrue(expectedLength == pojo.length());<br />    }<br /><br />    private void isFieldOfNumericValue(String field) {<br />        assertTrue(isNumeric(field));<br />    }<br />}<br /><br /></pre><br /><br />That looks nice, doesn't it? :) And how about using Matchers instead of functions? <br /><br /><b>SomeBigPojoBuilderTest.kava </b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers.builder;<br /><br />import org.hamcrest.BaseMatcher;<br />import org.hamcrest.Description;<br />import org.hamcrest.Matcher;<br />import org.junit.Before;<br />import org.junit.Test;<br />import pl.grzejszczak.marcin.junit.matchers.pojo.SomeBigPojo;<br /><br />import static java.lang.String.format;<br />import static junit.framework.Assert.assertTrue;<br />import static org.apache.commons.lang.StringUtils.isNumeric;<br />import static org.junit.Assert.assertThat;<br />import static pl.grzejszczak.marcin.junit.matchers.pojo.SomePojoConstants.*;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 23:02<br /> */<br />public class SomeBigPojoBuilderTest {<br /><br />    private SomeBigPojoBuilder objectUnderTest;<br /><br />    @Before<br />    public void setUp(){<br />        objectUnderTest = new SomeBigPojoBuilder();<br />    }<br /><br />    @Test<br />    public void testCreateSomeBigPojoWithBuilder() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setBooleanField1(true)<br />                .setStringField0("1")<br />                .setStringField1("12")<br />                .setStringField2("123")<br />                .setStringField3("1234")<br />                .setStringField4("12345")<br />                .setStringField5("123456")<br />                .setStringField6("1234567")<br />                .setStringField7("12345678")<br />                .setStringField8("123456789")<br />                .setStringField9("1234567890")<br />                .createSomeBigPojoWithBuilder();<br /><br />        assertThat(someBigPojo, isPojoProperlyBuilt());<br />    }<br /><br />    @Test(expected = AssertionError.class)<br />    public void testCreateSomeBigPojoWithBuilderWrongFields() throws Exception {<br />        SomeBigPojo someBigPojo = objectUnderTest<br />                .setStringField0("0")<br />                .setStringField1("Too long")<br />                .createSomeBigPojoWithBuilder();<br /><br />        assertThat(someBigPojo, isPojoProperlyBuilt());<br />    }<br /><br />    /**<br />     * Let us assume that there is a specific business case that we have to take into consideration regarding some particular field<br />     *<br />     * @return<br />     */<br />    private static Matcher isPojoProperlyBuilt() {<br /><br />        return new BaseMatcher() {<br /><br />            @Override<br />            public boolean matches(Object o) {<br />                assertTrue(o instanceof SomeBigPojo);<br />                SomeBigPojo someBigPojo = (SomeBigPojo) o;<br />                assertThat(someBigPojo.getStringField0(), isOfGivenLength(STRING_FIELD_0_LENGTH));<br />                assertThat(someBigPojo.getStringField0(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField1(), isOfGivenLength(STRING_FIELD_1_LENGTH));<br />                assertThat(someBigPojo.getStringField1(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField2(), isOfGivenLength(STRING_FIELD_2_LENGTH));<br />                assertThat(someBigPojo.getStringField2(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField3(), isOfGivenLength(STRING_FIELD_3_LENGTH));<br />                assertThat(someBigPojo.getStringField3(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField4(), isOfGivenLength(STRING_FIELD_4_LENGTH));<br />                assertThat(someBigPojo.getStringField4(), isFieldOfNumericValue());<br /><br />                assertThat(someBigPojo.getStringField5(), isOfGivenLength(STRING_FIELD_5_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField6(), isOfGivenLength(STRING_FIELD_6_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField7(), isOfGivenLength(STRING_FIELD_7_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField8(), isOfGivenLength(STRING_FIELD_8_LENGTH));<br /><br />                assertThat(someBigPojo.getStringField9(), isOfGivenLength(STRING_FIELD_9_LENGTH));<br /><br />                return true;<br />            }<br /><br />            @Override<br />            public void describeTo(Description description) {<br />                description.appendText("Lengths of fields are limited and the first 4 fields are numeric");<br />            }<br />        };<br />    }<br /><br />    private static Matcher isOfGivenLength(final Integer expectedLength) {<br /><br />        return new BaseMatcher() {<br /><br />            public boolean matches(Object o) {<br />                assertTrue(o instanceof String);<br />                return expectedLength == String.valueOf(o).length();<br />            }<br /><br />            public void describeTo(Description description) {<br />                description.appendText(format("String's length should be equal to [%d]", expectedLength));<br />            }<br />        };<br />    }<br /><br />    private static Matcher isFieldOfNumericValue() {<br /><br />        return new BaseMatcher() {<br /><br />            public boolean matches(Object o) {<br />                assertTrue(o instanceof String);<br />                return isNumeric(String.valueOf(o));<br />            }<br /><br />            public void describeTo(Description description) {<br />                description.appendText("The value of the field should be numeric");<br />            }<br />        };<br />    }<br />}<br /><br /></pre><br />The following main method executes the functions of the Service:<br /><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.junit.matchers;<br /><br />import pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder;<br />import pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 03.01.13<br /> * Time: 22:38<br /> */<br />public class MatcherMain {<br />    public static void main(String[] args){<br />        SomeServiceImpl someService = new SomeServiceImpl();<br /><br />        someService.setSomeBigPojoBuilder(new SomeBigPojoBuilder());<br />        someService.someLogicForAPojoWithoutBuilder();<br /><br />        someService.setSomeBigPojoBuilder(new SomeBigPojoBuilder());<br />        someService.someLogicForAPojoWithBuilder();<br /><br />        someService.setSomeBigPojoBuilder(new SomeBigPojoBuilder());<br />        someService.someLogicForAPojoWithBuilderBadArgument();<br />    }<br />}<br /><br /></pre><br />And the logs are:<br /><br /><br /><pre class="brush:xml">pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:27 SomeLogicForAPojoWithoutBuilder executed<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:30 StringField8 is equal [value]<br /><br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:32 SomeBigPojo{stringField0='string', integerField0=1, booleanField0=false, stringField1='other string', integerField1=123, booleanField1=true, stringField2='something else', integerField2=321, booleanField2=false, stringField3='yet another string', integerField3=111, booleanField3=true, stringField4='something', integerField4=2, booleanField4=false, stringField5='More', integerField5=3, booleanField5=true, stringField6='String', integerField6=12, booleanField6=false, stringField7='some', stringField8='value', stringField9='ofString'}<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:37 SomeLogicForAPojoWithBuilder executed<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:65 StringField8 is equal [value]<br /><br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:67 SomeBigPojo{stringField0='string', integerField0=1, booleanField0=false, stringField1='other string', integerField1=123, booleanField1=true, stringField2='something else', integerField2=321, booleanField2=false, stringField3='yet another string', integerField3=111, booleanField3=false, stringField4='something', integerField4=2, booleanField4=false, stringField5='More', integerField5=3, booleanField5=true, stringField6='String', integerField6=12, booleanField6=false, stringField7='some', stringField8='value', stringField9='ofString'}<br />pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl:72 someLogicForAPojoWithBuilderBadArgument executed<br />Exception in thread "main" java.lang.NullPointerException: StringField1 must not be null!<br /> at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:208)<br /> at pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder.checkState(SomeBigPojoBuilder.java:166)<br /> at pl.grzejszczak.marcin.junit.matchers.builder.SomeBigPojoBuilder.createSomeBigPojoWithBuilder(SomeBigPojoBuilder.java:170)<br /> at pl.grzejszczak.marcin.junit.matchers.service.SomeServiceImpl.someLogicForAPojoWithBuilderBadArgument(SomeServiceImpl.java:73)<br /> at pl.grzejszczak.marcin.junit.matchers.MatcherMain.main(MatcherMain.java:23)<br /> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br /> at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br /> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br /> at java.lang.reflect.Method.invoke(Method.java:597)<br /> at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)</pre><br />In my opinion that looks really nice :) And what is yours?<br /><br /><a href="https://bitbucket.org/gregorin1987/too-much-coding/src/36becc07728e/Unit%20Testing%20-%20Matchers?at=default">Sources are available here at Too Much Codings code repository.</a><br /><br /><h2>UPDATE</h2><br />I've made some code changes and cleaning (not much though cause I didn't have too much time) and the code is available at github -&nbsp;<a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit_Testing_-_Matchers">https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit_Testing_-_Matchers</a><br /><br /></div>

]]></content>
  </entry>
  
</feed>
