<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | TOO MUCH CODING]]></title>
  <link href="https://toomuchcoding.com/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="https://toomuchcoding.com/"/>
  <updated>2019-10-09T07:08:11-05:00</updated>
  <id>https://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UpToDate Gradle Plugin Migrated]]></title>
    <link href="https://toomuchcoding.com/blog/2016/04/11/uptodate-gradle-plugin-migrated/"/>
    <updated>2016-04-11T13:28:43+02:00</updated>
    <id>https://toomuchcoding.com/blog/2016/04/11/uptodate-gradle-plugin-migrated</id>
    <content type="html"><![CDATA[<p>Time for another release here at <a href="https://toomuchcoding.com">Too Much Coding blog</a>! This time it will be a short post :) I&rsquo;m happy to announce that the <a href="https://github.com/marcingrzejszczak/uptodate-gradle-plugin">UpToDate Gradle Plugin</a> has finally found a new home!</p>

<!-- more -->


<h2>Introduction</h2>

<p> Since my leaving the company owning the original UpToDate Gradle Plugin repository, the project is almost not maintained at all. For quite a long time any development was done mostly by me and actually I was the author of most of the its code (like in the case of <a href="/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a> ). That&rsquo;s why I&rsquo;ve decided to fork the code, repackage it and start versioning from 1.0.0.</p>

<h2>What is UpToDate Gradle Plugin?</h2>

<p> Gradle plugin that tells you what libs have new versions on Maven Central, so when you come back to a project, you know what you can update.</p>

<h2>How to use it?</h2>

<h3>Step 1: Add dependency to Maven Central and to the plugin</h3>

<pre><code class="`"> buildscript {
     repositories {
         mavenCentral()
     }
     dependencies {
         classpath 'com.toomuchcoding:uptodate-gradle-plugin:1.0.0'
     }
 }
</code></pre>

<h3>Step 2: Add the plugin to your build (gradle.build)</h3>

<pre><code class="`"> apply plugin: 'com.toomuchcoding.uptodate'
</code></pre>

<p> And now you can run the plugin with</p>

<pre><code class="`"> gradle uptodate
</code></pre>

<h3>Step 3: Read the readme ;)</h3>

<p>For more information just read the project&rsquo;s <a href="https://github.com/marcingrzejszczak/uptodate-gradle-plugin">Readme</a>.</p>

<h2>How to migrate to <code>com.toomuchcoding:uptodate-gradle-plugin</code>?</h2>

<p>If you&rsquo;re using the old version of the code just change</p>

<pre><code>com.ofg
</code></pre>

<p>into</p>

<pre><code>com.toomuchcoding
</code></pre>

<p>and that should be it :) Oh, and change the version. I&rsquo;m starting versioning from 1.0.0.</p>

<h2>I&rsquo;ve got questions - where to contact you?</h2>

<p>Talk to me at the <a href="https://gitter.im/marcingrzejszczak/uptodate-gradle-plugin">project&rsquo;s Gitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Speed Up Your Gradle Build From 90 to 8 Minutes]]></title>
    <link href="https://toomuchcoding.com/blog/2015/02/08/how-to-speed-up-your-gradle-build-from/"/>
    <updated>2015-02-08T10:24:00-08:00</updated>
    <id>https://toomuchcoding.com/blog/2015/02/08/how-to-speed-up-your-gradle-build-from</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="background-color: white; box-sizing: border-box; color: #262626; font-family: Georgia, serif; font-size: 19px; line-height: 27.55px;">Even though I was supposed to write a series of blog posts about&nbsp;<a href="https://toomuchcoding.blogspot.com/search/label/micro-infra-spring" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">micro-infra-spring</a>&nbsp;here at&nbsp;<a href="https://toomuchcoding.blogspot.com/" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Too Much Coding blog</a>, today I'll write about how we've managed to decrease our biggest project's build time from 90 to 8 minutes!<br /><br /><a name='more'></a>
<!--more-->
  <br style="box-sizing: border-box;" /><br /><br style="box-sizing: border-box;" />At one of the companies that I've been working we've faced a big problem related to pull request build times. We have one monolithic application that we are in progress of slicing into microservices but still until this process is finished we have to build that big app for each PR. We needed to change things to have really fast feedback from our build so that pull request builds don't get queued up endlessly in our CI. You can only imagine the frustration of developers who can't have their branches merged to master because of the waiting time.<br /><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Structure</strong></div>In that project we have over 200 Gradle modules and over a dozen big projects (countries) from which we can build some (really fat) fat-jars. We have also a core module that if we change then we would have to rebuild all the big projects to check if they weren't affected by the modifications. There are a few old countries that are using GWT compilers and we have some JS tasks executed too.<br /><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Initial stats</strong></div>Before we started to work on optimization of the process the whole application (all the countries) was built in about 1h 30 minutes.<br /><br style="box-sizing: border-box;" /><i style="box-sizing: border-box;">Current build time: ~90 minutes.</i></div><div style="background-color: white; box-sizing: border-box; color: #262626; font-family: Georgia, serif; font-size: 19px; line-height: 27.55px;"><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Profile your build</strong></div>First thing that we've done was to run the build with the&nbsp;--profile&nbsp;switch.<br /><br style="box-sizing: border-box;" />That way Gradle created awesome stats for our build. If you are doing any sort of optimization then it's crucial to gather measurements and statistics. Check out this&nbsp;<a href="https://gradle.org/docs/current/userguide/tutorial_gradle_command_line.html#sec:profiling_build" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Gradle page about profiling your build&nbsp;</a>for more info on that switch and features.</div><div style="background-color: white; box-sizing: border-box; color: #262626; font-family: Georgia, serif; font-size: 19px; line-height: 27.55px;"><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Exclude long running tasks in dev mode</strong></div><div style="box-sizing: border-box;"><span data-fr-verified="true" style="background-color: initial; box-sizing: border-box;"><span data-fr-verified="true" style="box-sizing: border-box; line-height: 1.45em;"><span data-fr-verified="true" style="box-sizing: border-box; font-size: 15px;"><span data-fr-verified="true" style="box-sizing: border-box; font-family: &quot;arial&quot; , &quot;helvetica&quot; , &quot;verdana&quot; , &quot;tahoma&quot; , sans-serif;">It turned out that we are spending a lot of time on JS minification and on GWT compilation. That's why we have added a custom property&nbsp;-PdevMode&nbsp;to disable some long running tasks in dev mode build. Those tasks were:</span></span></span></span></div><br style="box-sizing: border-box;" /><ul style="box-sizing: border-box; margin-bottom: 10px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">excluded JS minification</li><ul style="box-sizing: border-box; margin-bottom: 0px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">benefit: 13 countries * ~60 secs * at least 2 modules where minification occurred ~ 26 minutes</li></ul><li style="box-sizing: border-box; padding: 0px 0px 8px;">optimized GWT compilation:&nbsp;</li><ul style="box-sizing: border-box; margin-bottom: 0px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">have permutations done for only 1 browser (by default it's done for multiple browsers)</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">disable optimization of the compilation (-optimize 0)</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">add the -draftCompile switch to to compile quickly with minimal optimizations</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">benefit: about 2 minutes less on GWT compilation * sth like 5 projects with GWT ~ 10 minutes</li></ul></ul><i style="box-sizing: border-box;">Overall gain: ~ 40 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~50 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Check out your tests</strong></div>Together with the one and only&nbsp;<a href="https://github.com/achudzik" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Adam Chudzik</a>&nbsp;we have started to write our own&nbsp;<a href="https://github.com/marcingrzejszczak/gradle-test-profiler" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Gradle Test Profiler</a>&nbsp;(it's a super beta version ;) ) that created a single CSV with sorted tests by their execution time. We needed quick and easy gains without endless test refactoring and it turned out that it's really simple. One of our tests took 50 seconds to execute and it was testing a feature that has and will never be turned on on production. Of course there were plenty of other tests that we should take a look into (we'd have to look for test duplication, check out the test setup etc.) but it would involve more time, help of a QA and we needed quick gains.<br /><br style="box-sizing: border-box;" />Benefit: By simple disabling this test we gained about 1 minute.<br /><i style="box-sizing: border-box;">Overall gain: ~ 41 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~49 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Turn on the --parallel Gradle flag at least for the compilation</strong></div>Even though at this point our gains were more or less 40 minutes it was still unacceptable for us to wait 40 minutes for the pull request to be built.<br /><br style="box-sizing: border-box;" />That's why we decided to go parallel! Let's build the projects (over 200) in parallel and we'll gain a lot of time on that. When you execute the Gradle build with the --parallel flag Gradle calculates how many threads can be used to concurrently build the modules. For more info go to the&nbsp;<a href="https://gradle.org/docs/current/userguide/multi_project_builds.html#sec:parallel_execution" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Gradle's documentation on parallel project execution</a>.<br /><br style="box-sizing: border-box;" />It's an incubating feature so wen we started to get&nbsp;BindExceptions&nbsp;on port allocation we initially thought that most likely it's Gradle's fault. Then we had a chat with&nbsp;<a href="https://twitter.com/szczepiq" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Szczepan Faber</a>who worked for Gradleware and it turns out that the feature is actually really mature (thx Szczepan for the help BTW :) ).<br /><br style="box-sizing: border-box;" />We needed quick gains so instead of fixing the port binding stuff we decided only to compile everything in parallel and then run tests sequentially.</div><div style="box-sizing: border-box;"><br />Benefit: By doing this lame looking hack we gained ~4 mintues (on my 8 core laptop).<br /><i style="box-sizing: border-box;">Overall gain: ~ 45 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~45 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Don't be a jerk - just prepare your tests for parallelization</strong></div>This command seemed so lame that we couldn't even look at it. That's why we said - let's not be jerks and just fix the port issues.<br /><br style="box-sizing: border-box;" />So we went through the code, randomized all the fixed ports, patched&nbsp;<a href="https://github.com/4finance/micro-infra-spring" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">micro-infra-spring</a>&nbsp;so it does the same upon Wiremock and Zookeeper instantiation and just ran the building of the project like this:<br /><br style="box-sizing: border-box;" />We were sure that this is the killer feature that we were lacking and we're going to win the lottery. Much to our surprise the result was really disappointing.<br /><br style="box-sizing: border-box;" />Benefit: Concurrent project build decreased the time by ~5 minutes.<br /><i style="box-sizing: border-box;">Overall gain: ~ 50 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~40 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Check out your project structure</strong></div>You can only imagine the number of WTFs that were there in our office. How on earth is that possible?<br /><br style="box-sizing: border-box;" />We've opened up&nbsp;htop,&nbsp;iotop&nbsp;and all the possible tools including&nbsp;vmstat&nbsp; to see what the hell was going on. It turned out that context switching is at an acceptable level whereas at some point of the build only part of the cores are used as if sth was executed sequentially!<br /><br style="box-sizing: border-box;" />The answer to that mystery was pretty simple. We had a wrong project structure.<br /><br style="box-sizing: border-box;" />We had a module that ended up as a test-jar in&nbsp;testCompile&nbsp;dependency of other projects. That means that the vast majority of modules where waiting for this project to be built. Built means compiled and tested. It turned out that this test-jar module had also plenty of slow integration tests in it so only after those tests were executed could other modules be actually built!<br /><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Simple source moving can drastically increase your speed</strong></div>By simply moving those slow tests to a separate module we've unblocked the build of all modules that were previously waiting.<br /><br style="box-sizing: border-box;" />Now we could do further optimization - we've split the slow integration tests into two modules to make all the modules in the whole project be built in more or less equal time (around 3,5 minutes).<br />.<br />Benefit: Fixing the project structure decreased the time by ~10 minutes<br /><i style="box-sizing: border-box;">Overall gain: ~ 60 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~30 minutes.</em></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Don't save on machine power</strong></div><div style="box-sizing: border-box;"><span data-fr-verified="true" style="background-color: initial; box-sizing: border-box;"><span data-fr-verified="true" style="box-sizing: border-box; line-height: 1.45em;"><span data-fr-verified="true" style="box-sizing: border-box; font-size: 15px;"><span data-fr-verified="true" style="box-sizing: border-box; font-family: &quot;arial&quot; , &quot;helvetica&quot; , &quot;verdana&quot; , &quot;tahoma&quot; , sans-serif;">We've invested in some big AWS instance with 32 cores and 60 gb of RAM to really profit from the parallel build's possibilities. We're paying about 1.68$ per one hour of such machine's (c3.8xlarge) working time.</span></span></span></span></div><br style="box-sizing: border-box;" />If someone form the management tells you that that machine costs a lot of money and the company can't afford it you can actually do a fast calculation. You can ask this manager what is more expensive - paying for the machine or paying the developer for 77 minutes * number of builds of waiting?<br /><br style="box-sizing: border-box;" />Benefit: Paying for a really good machine on AWS decreased the build time by ~22 minutes<br /><i style="box-sizing: border-box;">Overall gain: ~ 82 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~8 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">What else can we do?</strong></div>Is that it? Can we decrease the time further on? Sure we can!<br /><br style="box-sizing: border-box;" />Possible solutions are:<br /><br style="box-sizing: border-box;" /><ul style="box-sizing: border-box; margin-bottom: 10px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">Go through all of the tests and check why some of them take so long to run</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">Go through the integration tests and check if don't duplicate the logic - we will remove them</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">We're using Liquibase for schema versioning and we haven't merged the changests for some time thus sth like 100 changesets are executed each time we boot up Spring context (it takes more or less 30 seconds)</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">We could limit the Spring context scope for different parts of our applications so that Spring boots up faster</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">Buy a more powerful machine ;)</li></ul><div style="box-sizing: border-box;">There is also another, better way ;)</div><div style="box-sizing: border-box;">SPLIT THE MONOLITH INTO MICROSERVICES AND GO TO PRODUCTION IN 5 MINUTES ;)</div><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Summary</strong></div>Hopefully I've managed to show you how you can really speed up your build process. The work to be done is difficult, sometimes really frustrating but as you can see very fruitful.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spock Subject Collaborators Extension 1.0.1 Released!]]></title>
    <link href="https://toomuchcoding.com/blog/2014/12/17/spock-subject-collaborators-extension/"/>
    <updated>2014-12-17T14:28:00-08:00</updated>
    <id>https://toomuchcoding.com/blog/2014/12/17/spock-subject-collaborators-extension</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />I'm really happy to say that I've just released a new version 1.0.1 of the <a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension">Spock Subject Collaborators Extension</a>.<br /><br />The changelog is as follows:<br /><br /><a name='more'></a><br />
<!--more-->
<h2 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.75em; line-height: 1.225; margin-bottom: 16px; margin-top: 0px !important; padding-bottom: 0.3em; position: relative;"><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/tree/1.0.1" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">1.0.1</a></h2><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Bug fixes:</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/issues/3" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">#3</a>&nbsp;Make plugin compatible with Spock 1.0.0-SNAPSHOT</div><h2 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.75em; line-height: 1.225; margin-bottom: 16px; margin-top: 1em; padding-bottom: 0.3em; position: relative;"><a aria-hidden="true" class="anchor" href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/blob/master/CHANGELOG.md#100" id="user-content-100" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; bottom: 0px; box-sizing: border-box; color: #4183c4; display: block; left: 0px; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"></a><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/tree/1.0.0" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">1.0.0</a></h2><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">New features:</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;"><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/issues/1" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">#1</a>&nbsp;Inject superclass fields - now you can inject fields to your superclass</div><br />As you can see now you'll be able to use this extension together with Spock in version 1.0.0 (assuming that nothing will change until then).<br /><br /><h2>How to get it?</h2><h3 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.5em; line-height: 1.43; margin-bottom: 16px; margin-top: 1em; position: relative;">For Maven:</h3><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add JCenter repository:</div><div class="highlight highlight-xml" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;">&lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repositories</span>&gt;<br />    &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repository</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">snapshots</span>&gt;<br />            &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">enabled</span>&gt;false&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">enabled</span>&gt;<br />        &lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">snapshots</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">id</span>&gt;central&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">id</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">name</span>&gt;bintray&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">name</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">url</span>&gt;https://jcenter.bintray.com&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">url</span>&gt;<br />    &lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repository</span>&gt;<br />&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repositories</span>&gt;</pre></div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add dependency:</div><div class="highlight highlight-xml" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;">&lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">dependency</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">groupId</span>&gt;com.blogspot.toomuchcoding&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">groupId</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">artifactId</span>&gt;spock-subjects-collaborators-extension&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">artifactId</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">version</span>&gt;1.0.1&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">version</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">scope</span>&gt;test&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">scope</span>&gt;<br />&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">dependency</span>&gt;</pre></div><h3 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.5em; line-height: 1.43; margin-bottom: 16px; margin-top: 1em; position: relative;"><a aria-hidden="true" class="anchor" href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/blob/master/README.md#for-gradle" id="user-content-for-gradle" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; bottom: 0px; box-sizing: border-box; color: #4183c4; display: block; left: 0px; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"></a>For Gradle:</h3><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add JCenter repository:</div><div class="highlight highlight-gradle" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"><span class="pl-en" style="box-sizing: border-box; color: #795da3;">repositories</span> {<br />    jcenter()<br />}</pre></div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add dependency:</div><div class="highlight highlight-gradle" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"><span class="pl-en" style="box-sizing: border-box; color: #795da3;">dependencies</span> {<br />    testCompile <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">'</span>com.blogspot.toomuchcoding:spock-subjects-collaborators-extension:1.0.1<span class="pl-pds" style="box-sizing: border-box;">'</span></span><br />}</pre></div><br /><h2>How to use it?</h2><div>Below you have an example of usage:</div><div><br /></div><div><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">package</span> <span class="pl-smp" style="box-sizing: border-box;">com.blogspot.toomuchcoding.spock.subjcollabs</span><br /><br /><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">import</span> <span class="pl-smi" style="box-sizing: border-box;">spock.lang.Specification</span><br /><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">import</span> <span class="pl-smi" style="box-sizing: border-box;">com.blogspot.toomuchcoding.spock.subjcollabs.Collaborator</span><br /><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">import</span> <span class="pl-smi" style="box-sizing: border-box;">com.blogspot.toomuchcoding.spock.subjcollabs.Subject</span><br /><br /><span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">class</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">ConstructorInjectionSpec</span> <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">extends</span> <span class="pl-e" style="box-sizing: border-box; color: #795da3;">Specification</span> {<br /><br />    <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">public</span> <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">static</span> <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">final</span> <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">String</span> <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">TEST_METHOD_1</span> <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">"</span>Test method 1<span class="pl-pds" style="box-sizing: border-box;">"</span></span><br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> someOtherClassNotToBeInjected <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">Mock</span>()<br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">@Collaborator</span><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> someOtherClass <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">Mock</span>()<br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">@Subject</span><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeClass</span> systemUnderTest<br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">def</span> <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">"</span>should inject collaborator into subject<span class="pl-pds" style="box-sizing: border-box;">"</span></span>() {<br />        <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">given</span>:<br />            someOtherClass<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someMethod() <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">&gt;&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">TEST_METHOD_1</span><br /><br />        <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">when</span>:<br />            <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">String</span> firstResult <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> systemUnderTest<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someOtherClass<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someMethod()<br /><br />        <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">then</span>:<br />            firstResult <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">==</span> <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">TEST_METHOD_1</span><br />            systemUnderTest<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someOtherClass <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">==</span> someOtherClass<br />    }<br /><br /><br />    <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">class</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">SomeClass</span> {<br />        <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> someOtherClass<br /><br />        <span class="pl-en" style="box-sizing: border-box; color: #795da3;">SomeClass</span>(<span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> <span class="pl-v" style="box-sizing: border-box; color: #df5000;">someOtherClass</span>) {<br />            <span class="pl-v" style="box-sizing: border-box; color: #df5000;">this</span><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someOtherClass <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> someOtherClass<br />        }<br />    }<br /><br />    <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">class</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">SomeOtherClass</span> {<br />        <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">String</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">someMethod</span>() {<br />            <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">"</span>Some other class<span class="pl-pds" style="box-sizing: border-box;">"</span></span><br />        }<br />    }<br /><br />}</pre></div><h2>Disclaimer</h2>Remember that if you're using this extension as a way to hack your way through an awful design of your application then you should do your best to fix your code in the first place! You've been warned ;)</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Execution of Groovy Scripts From Java - XmlSlurper and MarkupBuilder in Mapping Issues]]></title>
    <link href="https://toomuchcoding.com/blog/2013/03/30/execution-of-groovy-scripts-from-java/"/>
    <updated>2013-03-30T15:09:00-07:00</updated>
    <id>https://toomuchcoding.com/blog/2013/03/30/execution-of-groovy-scripts-from-java</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><h2>Problem with mappings</h2><br />In our project we came across a really big problem related to mapping. Having two systems that initially were defined by the BA to be somehwat simillar we have chosen the simple XSLT (done through Altova Mapforce) of the input message to the output one.<br />
<!--more-->
<br />Afterwards it turned out that the functions required to perform a mapping are becoming enormous. An example of such a mapping is:<br /><blockquote class="tr_bq">From the input message take a list of Cars iterate over it and find a Car whose field "prodcutionDate" is the lowest and the attribute "make" is equal to "Honda" and as the output return the "saleDate"</blockquote>So in order to map it we decided to move to JBoss Drools. The <a href="https://toomuchcoding.blogspot.com/2013/02/drools-decision-tables-with-camel-and.html">decision tables</a> were out of question since the logic was to complex and customized to be placed in the spreadsheet so we coded everything in the DRL files. Soon the rules got really big and some of our developers were forced to spend plenty of time on constant recreation of rules stated by the BA.<br /><br />Out of frustration and after having seen all the amazing things at the&nbsp;<a href="https://2013.33degree.org/">33rd degree conference</a> I decided to start finding solutions to my problems which were:<br /><br /><a name='more'></a><br /><ol><li>The DRL files are big and started to become unmaintainable (for a single field we had for example 4 rules)</li><li>Since the BA has never coded a single Drools rule / XSLT &nbsp;in his life adding a simple if... else... statement for him is not a problem</li><li>The BA has to wait for the mapping implementation by the devs until he can test it</li><li>The devs are spending far too much time on coding the mapping rules instead of developing other features</li></ol><div>After stating these problems a research regarding mapping frameworks took place and one of the concepts that I began working on was trying to create the mapping in Groovy. Since Groovy (thanks to for example PropertyMissing and MethodMissing) is a perfect language for creating a DSL I decided to start right away. The only two things I had to remember about were:</div><div><ol><li>The current application is written purely in Java</li><li>The mapping code (in order to perform fast testing) has to be detached from the application as such - it can't be compiled during deployment because we want to have the possibility of frequent substitutions of the mappings</li></ol><div><h2>Project structure&nbsp;</h2><br />Having defined the language, the constraints I created the following solution:</div></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s1600/Project+structure.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s320/Project+structure.png" width="255" /></a></div><div><br /></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">The project structure</div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">As you can see the project structure is very simple. To begin with it is built in <b>Gradle</b>. The main function can be found in the <b>XmlTransformer.java</b>. The flow is such that the <b>TransformerFactory</b>&nbsp;creates a <b>Transformer</b>&nbsp;basing on the Groovy script that came out of the <b>ScriptFactory </b>(in our project for different types of products that we distinguish by a field in the XML file, we have different DRL files). The Groovy scripts are residing in the classpath in the <b>/groovy/</b> folder (of course at the end of the day those scripts should be placed outside any jars).&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">In the <b>build.gradle</b>&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">apply plugin: 'java'<br /><br />group = 'com.blogspot.toomuchcoding'<br />version = '1.0'<br /><br />repositories {<br />    mavenCentral()<br />}<br /><br />dependencies {<br />    compile 'org.codehaus.groovy:groovy-all:2.0.5'<br />    compile 'org.slf4j:slf4j-log4j12:1.7.2'<br />    compile 'log4j:log4j:1.2.16'<br />    compile 'com.google.guava:guava:14.0'<br /><br />    testCompile group: 'junit', name: 'junit', version: '4.+'<br />}<br /><br />task(executeMain, dependsOn: 'classes', type: JavaExec) {<br />    main = 'com.blogspot.toomuchcoding.XmlTransformer'<br />    classpath = sourceSets.main.runtimeClasspath<br />}<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">we can see that there is no groovy plugin -&nbsp;it has been done deliberately since we don't want our scripts to be compiled. Now let's take a look at the logic behind the TransformerFactory that compiles the Groovy script. What is really important is the fact that our Groovy class implements an interface created in our Java project - we want from the Java point of view to have no problems with execution of the Groovy code.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><b>TransformerFactoryImpl.java</b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:java">package com.blogspot.toomuchcoding.factory;<br /><br />import com.blogspot.toomuchcoding.transformer.Transformer;<br />import com.google.common.io.Resources;<br />import groovy.util.GroovyScriptEngine;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />import java.io.File;<br />import java.net.URL;<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 22.03.13<br /> * Time: 23:54<br /> */<br />public class TransformerFactoryImpl implements TransformerFactory&lt;String, String&gt; {<br />    private static final String GROOVY_SCRIPTS_CLASSPATH = "groovy/";<br />    private static Logger LOGGER = LoggerFactory.getLogger(TransformerFactoryImpl.class);<br /><br />    private ScriptFactory scriptFactory;<br />    private GroovyScriptEngine groovyScriptEngine;<br /><br />    public TransformerFactoryImpl(ScriptFactory scriptFactory) {<br />        this.scriptFactory = scriptFactory;<br />        try {<br />            groovyScriptEngine = new GroovyScriptEngine(GROOVY_SCRIPTS_CLASSPATH);<br />        } catch (IOException e) {<br />            LOGGER.error("Exception occurred while trying to create the Groovy script engine", e);<br />            throw new RuntimeException(e);<br />        }<br />    }<br /><br />    @Override<br />    public Transformer&lt;String, String&gt; createTransformer() {<br />        Transformer&lt;String, String&gt; transformerFromScript = null;<br />        try {<br />            File scriptFile = scriptFactory.createScript();<br />            URL scriptAsAClasspathResource = Resources.getResource(GROOVY_SCRIPTS_CLASSPATH + scriptFile.getName());<br />            Class classFromScript = groovyScriptEngine.loadScriptByName(scriptAsAClasspathResource.getFile());<br />            transformerFromScript = (Transformer&lt;String, String&gt;) classFromScript.newInstance();<br />        } catch (Exception e) {<br />            LOGGER.error("Exception occurred while trying to execute Groovy script", e);<br />        }<br />        return transformerFromScript;<br />    }<br /><br />}<br /><br /></pre><div class="separator" style="clear: both; text-align: left;">A <b>GroovyScriptEngine</b>&nbsp;is used to load a script by name. I chose the <a href="https://docs.codehaus.org/display/GROOVY/Embedding+Groovy">GroovyScriptEngine</a> (hopefully I used it in a good way ;) ) &nbsp;because:</div><blockquote class="tr_bq"><span style="background-color: white; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 17.328125px;">The most complete solution for people who want to embed groovy scripts into their servers and have them reloaded on modification is the GroovyScriptEngine. You initialize the GroovyScriptEngine with a set of CLASSPATH like roots that can be URLs or directory names. You can then execute any Groovy script within those roots. The GSE will also track dependencies between scripts so that if any dependent script is modified the whole tree will be recompiled and reloaded.</span></blockquote><div class="separator" style="clear: both; text-align: left;">I wanted to have some way of caching the compiled classes in order not to have any issues with PermGen.</div><div class="separator" style="clear: both; text-align: left;">Anyway you can see that I am doing some conversions to have the URL of the classpath Groovy script resource. At the end we are extracting a class from the Groovy script and we are casting it to the Transformer.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><b>AbstractGroovyXmlTransformer.groovy</b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">package groovy<br /><br />import com.blogspot.toomuchcoding.transformer.Transformer<br />import groovy.util.slurpersupport.NodeChildren<br />import groovy.xml.MarkupBuilder<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 23.03.13<br /> * Time: 02:16<br /> */<br />abstract class AbstractGroovyXmlTransformer implements Transformer&lt;String, String&gt; {<br /><br />    static Map&lt;String, Object&gt; MISSING_PROPERTIES = ["convertDate": new DateConverter(), "map": new Mapper()]<br /><br />    @Override<br />    String transform(String input) {<br />        def inputXml = new XmlSlurper().parseText input<br />        def writer = new StringWriter()<br />        def outputXml = new MarkupBuilder(writer)<br />        doTransform inputXml, outputXml<br />        writer.toString()<br />    }<br /><br />    abstract void doTransform(inputXml, outputXml)<br /><br />    def propertyMissing(String name) {<br />        Object property = MISSING_PROPERTIES[name]<br />        assert property != null, "There is no function like [$name]. The ones that are supported are ${MISSING_PROPERTIES.keySet()}"<br />        property<br />    }<br /><br /><br /><br />    protected static class Mapper {<br />        private Map&lt;String, String&gt; inputParameters<br /><br />        Mapper given(Map inputParameters) {<br />            this.inputParameters = inputParameters<br />            this<br />        }<br /><br />        String from(NodeChildren nodeChildren) {<br />            assert inputParameters != null, "The mapping can't be null!"<br />            assert nodeChildren != null, "Node can't be null!"<br />            String nodeText = nodeChildren.text()<br />            String mappedValue = inputParameters[nodeText]<br />            mappedValue ?: inputParameters.default<br />        }<br /><br />        static Mapper map(Map&lt;String, String&gt; inputParameters) {<br />            return new Mapper(inputParameters)<br />        }<br />    }<br /><br />    protected static class DateConverter {<br />        private String inputDate<br />        private String inputDateFormat<br /><br />        DateConverter from(NodeChildren nodeChildren) {<br />            this.inputDate = nodeChildren.text()<br />            this<br />        }<br /><br />        DateConverter havingDateFormat(String inputDateFormat) {<br />            this.inputDateFormat = inputDateFormat<br />            this<br />        }<br /><br />        String toOutputDateFormat(String outputDateFormat) {<br />            assert inputDate != null, "The input date for which you are trying to do the conversion can't be null"<br />            assert inputDateFormat != null, "The input date format for which you are trying to do the conversion can't be null"<br />            assert outputDateFormat != null, "The output date format for which you are trying to do the conversion can't be null"<br />            Date.parse(inputDateFormat, inputDate).format(outputDateFormat)<br />        }<br /><br />        static DateConverter convertDate() {<br />            new DateConverter()<br />        }<br />    }<br />}</pre><pre class="brush:groovy"></pre><div class="separator" style="clear: both; text-align: left;">In this abstract Groovy class I decided to place all the logic that could blur the image for the BA. In addition to that I created some helper classes and methods. In order to fully use the Groovy's DSL capabilities I used the propertyMissing method to map the words <b>"map"</b> and <b>"convertDate"</b>&nbsp;to create the instances of the helper classes which are used in the <b>Builder</b> design pattern way:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">convertDate.from(inputXml.InputSystemContext.InputDate).havingDateFormat("dd/MM/yyyy").toOutputDateFormat("yy/MM/dd")<br /><br />or<br /><br />map.given("Some_action" : "Some_output_action", "default" : "something else").from(inputXml.AdditionalData.TypeOfAction)<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">If there is no such "function" (for example a BA makes a typo or sth) then an assertion error is being thrown and a list of supported "function" (which in reality are properties - but they are functions from the BA's perspective) is being printed.&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Now let's move to the script that would be used by the BA.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><b>GroovyXmlTransformer.groovy</b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:groovy">package groovy<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: mgrzejszczak<br /> * Date: 22.03.13<br /> * Time: 23:59<br /> *<br /> * additional functions:<br /> *<br /> * convertDate.from(Node).havingDateFormat("DateFormat").toOutputDateFormat("AnotherDateFormat")<br /> * map.given("Value to be mapped from" : "Value to be mapped to", "default" : "default value").from(Node)<br /> *<br /> */<br />class GroovyXmlTransformer extends AbstractGroovyXmlTransformer {<br /><br />    @Override<br />    void doTransform(inputXml, outputXml) {<br />        outputXml.OutputSystemEnvelope() {<br />            OutputSystemContext {<br />                ResponseID(inputXml.InputSystemContext.RequestID.text().reverse())<br />                OutputSource('OUTPUT_SYSTEM')<br />                OutputDate(convertDate.from(inputXml.InputSystemContext.InputDate).havingDateFormat("dd/MM/yyyy").toOutputDateFormat("yy/MM/dd"))<br />            }<br />            OutputAdditionalData {<br />                OutputReferenceNo("SOME_PREFIX_${inputXml.AdditionalData.ReferenceNo.text()}_SOME_SUFIX")<br />                OutputTypeOfAction(map.given("Some_action" : "Some_output_action", "default" : "something else").from(inputXml.AdditionalData.TypeOfAction))<br />                OutputTransactions {<br />                    inputXml.AdditionalData.Transactions.Transaction.each {<br />                        OutputTransaction(Client: it.Client, ProductType: it.ProductType, 'Done')<br />                    }<br />                }<br />                OutputProducts {<br />                    def minProduct = inputXml.AdditionalData.Products.Product.list().min { it.Value.text() }<br />                    def maxProduct = inputXml.AdditionalData.Products.Product.list().max { it.Value.text() }<br />                    MinProduct(name: minProduct.Name.text(), minProduct.Value.text())<br />                    MaxProduct(name: maxProduct.Name.text(), maxProduct.Value.text())<br />                }<br />            }<br />        }<br />    }<br />}<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">This piece of code does the following mapping (You can check the <b>/xml/SampleXml.xml</b> ):</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="datagrid"><table><thead><tr><th>Mapped from</th><th>Mapped to</th></tr></thead><tbody><tr><td>InputSystemEnvelope</td><td>OutputSystemEnvelope</td></tr><tr class="alt"><td>InputSystemContex</td><td>OutputSystemContex</td></tr><tr><td>RequestId</td><td>ResponseId (the Id should be reverted)</td></tr><tr class="alt"><td>InputSource</td><td>OutputSoutce (constant "UTPUT_SYSTEM")</td></tr><tr><td>InputDate</td><td>OutputDate (converted from dd/MM/yyyy to yy/MM/dd) </td></tr><tr class="alt"><td>InputAdditionalData</td><td>OutputAdditionalData</td></tr><tr><td>InputReferenceNo</td><td>OutputReferenceNo ( "SOME_PREFIX_" + value from InputReferenceNo + "_SOME_SUFIX") </td></tr><tr class="alt"><td>InputTypeOfAction</td><td>OutputTypeOfAction (mapped in such a way that if InputTypeOfAction is equal to "Some_action" then we will have "Some_output_action". Otherwise we get "something else")</td></tr><tr><td>Transactions</td><td>OutputTransactions</td></tr><tr class="alt"><td>Transaction</td><td>OutputTransaction ( Attribute Client from Transaction.Client, Attribute ProductType from Transaction.ProductType, and the value "Done")</td></tr><tr><td>Products</td><td>OutputProducts</td></tr><tr class="alt"><td>Product having min value</td><td>MinProduct</td></tr><tr><td>Product having max value</td><td>MaxProduct</td></tr></tbody></table></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h2>The output</h2><div class="separator" style="clear: both; text-align: left;"><br /></div><pre class="brush:xml">Converted from [&lt;InputSystemEnvelope&gt;<br />    &lt;InputSystemContext&gt;<br />        &lt;RequestID&gt;1234567890&lt;/RequestID&gt;<br />        &lt;InputSource&gt;INPUT_SYSTEM&lt;/InputSource&gt;<br />        &lt;InputDate&gt;22/03/2013&lt;/InputDate&gt;<br />    &lt;/InputSystemContext&gt;<br />    &lt;AdditionalData&gt;<br />        &lt;ReferenceNo&gt;Ref1234567&lt;/ReferenceNo&gt;<br />        &lt;TypeOfAction&gt;Some_action&lt;/TypeOfAction&gt;<br />        &lt;Transactions&gt;<br />            &lt;Transaction&gt;<br />                &lt;Client&gt;ACME&lt;/Client&gt;<br />                &lt;ProductType&gt;IRS&lt;/ProductType&gt;<br />            &lt;/Transaction&gt;<br />            &lt;Transaction&gt;<br />                &lt;Client&gt;Oracle&lt;/Client&gt;<br />                &lt;ProductType&gt;DB&lt;/ProductType&gt;<br />            &lt;/Transaction&gt;<br />        &lt;/Transactions&gt;<br />        &lt;Products&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Book&lt;/Name&gt;<br />                &lt;Value&gt;1&lt;/Value&gt;<br />            &lt;/Product&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Car&lt;/Name&gt;<br />                &lt;Value&gt;10000&lt;/Value&gt;<br />            &lt;/Product&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Boat&lt;/Name&gt;<br />                &lt;Value&gt;100000000&lt;/Value&gt;<br />            &lt;/Product&gt;<br />            &lt;Product&gt;<br />                &lt;Name&gt;Spaceship&lt;/Name&gt;<br />                &lt;Value&gt;1000000000000000000&lt;/Value&gt;<br />            &lt;/Product&gt;<br />        &lt;/Products&gt;<br />    &lt;/AdditionalData&gt;<br />&lt;/InputSystemEnvelope&gt;]<br /><br /> to<br /><br />[&lt;OutputSystemEnvelope&gt;<br />  &lt;OutputSystemContext&gt;<br />    &lt;ResponseID&gt;0987654321&lt;/ResponseID&gt;<br />    &lt;OutputSource&gt;OUTPUT_SYSTEM&lt;/OutputSource&gt;<br />    &lt;OutputDate&gt;13/03/22&lt;/OutputDate&gt;<br />  &lt;/OutputSystemContext&gt;<br />  &lt;OutputAdditionalData&gt;<br />    &lt;OutputReferenceNo&gt;SOME_PREFIX_Ref1234567_SOME_SUFIX&lt;/OutputReferenceNo&gt;<br />    &lt;OutputTypeOfAction&gt;Some_output_action&lt;/OutputTypeOfAction&gt;<br />    &lt;OutputTransactions&gt;<br />      &lt;OutputTransaction Client='ACME' ProductType='IRS'&gt;Done&lt;/OutputTransaction&gt;<br />      &lt;OutputTransaction Client='Oracle' ProductType='DB'&gt;Done&lt;/OutputTransaction&gt;<br />    &lt;/OutputTransactions&gt;<br />    &lt;OutputProducts&gt;<br />      &lt;MinProduct name='Book'&gt;1&lt;/MinProduct&gt;<br />      &lt;MaxProduct name='Spaceship'&gt;1000000000000000000&lt;/MaxProduct&gt;<br />    &lt;/OutputProducts&gt;<br />  &lt;/OutputAdditionalData&gt;<br />&lt;/OutputSystemEnvelope&gt;]<br /></pre><div><h2>Pros and cons</h2>The pros and cons of this approach are as follows:<br /><br />Pros:<br /><ul><li>The mapping is done sequentialy - field by field (it is easier to debug the problem)</li><li>The mapping consists of vocabulary understandable by the BA</li><li>Most of mappings could be done by the BA</li><li>The majority of non-mapping grammar is hidden in the abstraction</li><li>The compilation of the Groovy script is faster than creation of KnowledgeBases and compilation of Drools scripts</li><li>Independence on the XML schema (each change of the schema would require the recompilation of the JAXB classes)</li></ul><div>Cons:</div><div><ul><li>The BA would have to have some knowledge from the domain of computer science</li><li>No parallel mapping</li><li>The mapping might get less readable due to the fact that it is highly probable that the BA (out of lack of time) won't create a single function - all the logic will end up in the closures for a given Node.</li><li>There might be some memory issues with parsing and recompilation of the Groovy scripts</li><li>No XML schema may lead to improper output / input XML path setting</li></ul><h2>Summary</h2></div><div>The problem with mapping that we encountered in our project turned out to be a very interesting issue to deal with. The example shown in this post is only a proposition of solving the issue and hopefully could be a starting point to a further discussion on the topic. If you have any ideas or opinions on this topic please leave a comment under <a href="https://toomuchcoding.blogspot.com/2013/03/execution-of-groovy-scripts-from-java.html">this article</a>.</div><div><br /></div><div>The sources can be found on the <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/69f4b59e4452e630670c71150d125e7ea86170aa/Groovy/Mappings?at=default">Too Much Coding BitBucket repository</a> and on <a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Groovy/Mappings">GitHub</a>.</div></div></div>

]]></content>
  </entry>
  
</feed>
