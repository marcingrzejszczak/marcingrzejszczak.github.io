<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Generics | TOO MUCH CODING]]></title>
  <link href="http://toomuchcoding.com/blog/categories/generics/atom.xml" rel="self"/>
  <link href="http://toomuchcoding.com/"/>
  <updated>2018-11-15T15:05:11+01:00</updated>
  <id>http://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring BeanPostProcessor for a Specified Type]]></title>
    <link href="http://toomuchcoding.com/blog/2012/10/22/spring-beanpostprocessor-for-specified/"/>
    <updated>2012-10-22T15:36:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2012/10/22/spring-beanpostprocessor-for-specified</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />I was recently having a discussion how can one use a BeanPostProcessor to execute some logic for a specified class.<br />
<!--more-->
<br />Looking at the Javadoc for the BeanPostProcessor one can read that:<br /><blockquote class="tr_bq"><span style="background-color: white; font-family: Arial; font-size: 13px;">Factory hook that allows for custom modification of new bean instances, e.g. checking for marker interfaces or wrapping them with proxies.</span></blockquote>So how can one create in an easy way a BeanPostProcessor for a precise type without creating a cascade of ifs or instance ofs? This is my concept of solving this problem - perhaps you know an easier one? :)<br /><br /><b>SomeService.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />public interface SomeService {<br /> void methodA();<br /><br /> void methodB();<br />}<br /></pre><br /><b>SomeServiceImpl.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class SomeServiceImpl implements SomeService {<br /> private static final Logger LOGGER = LoggerFactory.getLogger(SomeServiceImpl.class);<br /><br /> public SomeServiceImpl() {<br />  LOGGER.debug("SomeServiceImpl - I'm created!");<br /> }<br /><br /> private void afterInit() {<br />  LOGGER.debug("SomeServiceImpl - After init!");<br /> }<br /><br /> private void destroyMethod() {<br />  LOGGER.debug("SomeServiceImpl - Destroy Method!");<br /> }<br /><br /> @Override<br /> public void methodA() {<br />  LOGGER.debug("SomeServiceImpl - Method A executed");<br /> }<br /><br /> @Override<br /> public void methodB() {<br />  LOGGER.debug("SomeServiceImpl - Method B executed");<br /> }<br /><br />}<br /></pre><br /><b>SomeOtherService.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />public interface SomeOtherService {<br /> void methodC();<br /><br /> void methodD();<br />}<br /></pre><br /><b>SomeOtherServiceImpl.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class SomeOtherServiceImpl implements SomeOtherService {<br /> private static final Logger LOGGER = LoggerFactory.getLogger(SomeOtherServiceImpl.class);<br /><br /> public SomeOtherServiceImpl() {<br />  LOGGER.debug("SomeOtherServiceImpl - I'm created!");<br /> }<br /><br /> private void afterInit() {<br />  LOGGER.debug("SomeOtherServiceImpl - After init!");<br /> }<br /><br /> private void destroyMethod() {<br />  LOGGER.debug("SomeOtherServiceImpl - Destroy Method!");<br /> }<br /><br /> @Override<br /> public void methodC() {<br />  LOGGER.debug("SomeOtherServiceImpl - Method C executed");<br /> }<br /><br /> @Override<br /> public void methodD() {<br />  LOGGER.debug("SomeOtherServiceImpl - Method D executed");<br /> }<br /><br />}<br /></pre><br /><b>AbstractBeanPostProcessor.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />import org.springframework.beans.BeansException;<br />import org.springframework.beans.factory.config.BeanPostProcessor;<br /><br />public abstract class AbstractBeanPostProcessor&lt;T&gt; implements BeanPostProcessor {<br /><br /> private Class&lt;T&gt; clazz;<br /><br /> public AbstractBeanPostProcessor(Class&lt;T&gt; clazz) {<br />  this.clazz = clazz;<br /> }<br /><br /> @Override<br /> public Object postProcessAfterInitialization(Object bean, String name) throws BeansException {<br />  checkConditions();<br /><br />  if (clazz.isAssignableFrom(bean.getClass())) {<br />   doAfter();<br />  }<br />  return bean;<br /> }<br /><br /> @Override<br /> public Object postProcessBeforeInitialization(Object bean, String name) throws BeansException {<br />  checkConditions();<br /><br />  if (clazz.isAssignableFrom(bean.getClass())) {<br />   doBefore();<br />  }<br />  return bean;<br /> }<br /><br /> private void checkConditions() {<br />  if (clazz == null) {<br />   throw new NullArgumentException("Provide the interface for the post processor");<br />  }<br /> }<br /><br /> public abstract void doBefore();<br /><br /> public abstract void doAfter();<br /><br />}<br /></pre><br /><b>SomeServicePostProcessor.java</b><br /><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.stereotype.Component;<br /><br />@Component<br />public class SomeServicePostProcessor extends AbstractBeanPostProcessor&lt;SomeService&gt; {<br /><br /> private static final Logger LOGGER = LoggerFactory.getLogger(SomeServicePostProcessor.class);<br /><br /> public SomeServicePostProcessor() {<br />  super(SomeService.class);<br /> }<br /><br /> @Override<br /> public void doBefore() {<br />  LOGGER.info("BEFORE it's init method has been executed but AFTER SomeServiceImpl has been instantiated I would like to do sth...");<br /> }<br /><br /> @Override<br /> public void doAfter() {<br />  LOGGER.info("AFTER SomeServiceImpl has executed its init method I would like to do sth more...");<br /> }<br />}<br /></pre><br /><b>SpringMain.java</b><br /><b><br /></b><br /><pre class="brush:java">package pl.grzejszczak.marcin.postprocessor;<br /><br />import org.springframework.context.ConfigurableApplicationContext;<br />import org.springframework.context.support.ClassPathXmlApplicationContext;<br /><br />public class SpringMain {<br /><br /> public static void main(String[] args) {<br />  ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");<br />  SomeService someService = context.getBean(SomeService.class);<br />  someService.methodA();<br />  someService.methodB();<br />  SomeOtherService someOtherService = context.getBean(SomeOtherService.class);<br />  someOtherService.methodC();<br />  someOtherService.methodD();<br />  context.close();<br /> }<br />}<br /></pre><br /><br /><b>ApplicationContext.xml</b><br /><br /><pre class="brush:xml"><beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"><br /><br /> &lt;bean class="pl.grzejszczak.marcin.postprocessor.SomeServiceImpl" destroy-method="destroyMethod" init-method="afterInit"/&gt;<br /> &lt;bean class="pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl" destroy-method="destroyMethod" init-method="afterInit"/&gt;<br /> &lt;bean class="pl.grzejszczak.marcin.postprocessor.SomeServicePostProcessor"/&gt;<br /></beans><br /></pre><br /><b>Logs</b><br /><br /><pre class="brush:xml">2012-10-23 00:20:38,863 INFO  [main] org.springframework.context.support.ClassPathXmlApplicationContext:495 Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@28d11816: startup date [Tue Oct 23 00:20:38 CEST 2012]; root of context hierarchy<br />2012-10-23 00:20:38,956 INFO  [main] org.springframework.beans.factory.xml.XmlBeanDefinitionReader:315 Loading XML bean definitions from class path resource [applicationContext.xml]<br />2012-10-23 00:20:39,213 INFO  [main] org.springframework.beans.factory.support.DefaultListableBeanFactory:557 Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@6bb4469: defining beans [pl.grzejszczak.marcin.postprocessor.SomeServiceImpl#0,pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl#0,pl.grzejszczak.marcin.postprocessor.SomeServicePostProcessor#0]; root of factory hierarchy<br />2012-10-23 00:20:39,214 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeServiceImpl:10 SomeServiceImpl - I'm created!<br />2012-10-23 00:20:39,215 INFO  [main] pl.grzejszczak.marcin.postprocessor.SomeServicePostProcessor:18 BEFORE its init method has been executed but AFTER SomeServiceImpl has been instantiated I would like to do sth...<br />2012-10-23 00:20:39,216 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeServiceImpl:14 SomeServiceImpl - After init!<br />2012-10-23 00:20:39,216 INFO  [main] pl.grzejszczak.marcin.postprocessor.SomeServicePostProcessor:23 AFTER SomeServiceImpl has executed its init method I would like to do sth more...<br />2012-10-23 00:20:39,220 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl:10 SomeOtherServiceImpl - I'm created!<br />2012-10-23 00:20:39,221 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl:14 SomeOtherServiceImpl - After init!<br />2012-10-23 00:20:39,225 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeServiceImpl:23 SomeServiceImpl - Method A executed<br />2012-10-23 00:20:39,241 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeServiceImpl:28 SomeServiceImpl - Method B executed<br />2012-10-23 00:20:39,242 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl:23 SomeOtherServiceImpl - Method C executed<br />2012-10-23 00:20:39,242 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl:28 SomeOtherServiceImpl - Method D executed<br />2012-10-23 00:20:39,242 INFO  [main] org.springframework.context.support.ClassPathXmlApplicationContext:1020 Closing org.springframework.context.support.ClassPathXmlApplicationContext@28d11816: startup date [Tue Oct 23 00:20:38 CEST 2012]; root of context hierarchy<br />2012-10-23 00:20:39,243 INFO  [main] org.springframework.beans.factory.support.DefaultListableBeanFactory:433 Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@6bb4469: defining beans [pl.grzejszczak.marcin.postprocessor.SomeServiceImpl#0,pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl#0,pl.grzejszczak.marcin.postprocessor.SomeServicePostProcessor#0]; root of factory hierarchy<br />2012-10-23 00:20:39,244 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeOtherServiceImpl:18 SomeOtherServiceImpl - Destroy Method!<br />2012-10-23 00:20:39,245 DEBUG [main] pl.grzejszczak.marcin.postprocessor.SomeServiceImpl:18 SomeServiceImpl - Destroy Method!<br /></pre>As you can see it is quite easy, using generics and the BeanPostProcessor, to specify certain behavors for a given type (generics and constructor of SomeServiceImpl) or a group of types of classes (generics and constructor of SomeService).</div>

]]></content>
  </entry>
  
</feed>
