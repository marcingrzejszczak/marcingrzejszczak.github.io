<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[TOO MUCH CODING]]></title>
  <link href="https://toomuchcoding.com/atom.xml" rel="self"/>
  <link href="https://toomuchcoding.com/"/>
  <updated>2021-03-11T15:41:34+01:00</updated>
  <id>https://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Sleuth 3.0.0 released]]></title>
    <link href="https://toomuchcoding.com/articles/2021/01/04/spring-cloud-sleuth-3-0-0-released/"/>
    <updated>2021-01-04T16:11:00+01:00</updated>
    <id>https://toomuchcoding.com/articles/2021/01/04/spring-cloud-sleuth-3-0-0-released</id>
    <content type="html"><![CDATA[<p>With the release of the Spring Cloud 2020.0.0 (aka Ilford) release train we’re more than happy to announce the general availability of Spring Cloud Sleuth 3.0.0. In this blog post I’ll describe the most notable released features (in order of their release dates).</p>

<!--more-->

<h2 id="removes-deprecated-modules">Removes Deprecated Modules</h2>

<p>Removes ribbon, zuul, hystrix and Spring Cloud Aws support. Check this <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1533">PR for more information</a>.</p>

<h2 id="removes-zipkin-dependencies-from-core">Removes Zipkin Dependencies from Core</h2>

<p>Zipkin is no longer a part of core of Sleuth. You can check out more in <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1649">this PR</a>.</p>

<h2 id="added-manual-reactor-instrumentation">Added MANUAL Reactor Instrumentation</h2>

<p>Up till now we’ve been supporting <code>ON_EACH</code> and <code>ON_LAST</code> Reactor instrumentation modes. That means that we would wrap every single Reactor operator (<code>ON_EACH</code>) or the last operator (<code>ON_LAST</code>). Those wrappings would do their best to put trace related entries in such a way that thread local based instrumentations would work out of the box (e.g. the MDC context, <code>Tracer.currentSpan()</code> etc.). The problem was that on each wrapping downgraded performance drastically and worked most of the time. The on last operator wrapping downgraded performance a lot and worked sometimes. Both had their issues when <code>flatMap</code> operators were called and thread switching took place.</p>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-sleuth/commit/bd149ce4a7c2154fe8526394d14b6ab89addd62e">this commit</a> we’ve introduced the manual way of instrumenting Reactor. We came to the conclusion that the thread local based paradigm doesn’t work well with Reactor. We can’t guess for the user what they really want to achieve and which operators should be wrapped. That’s why with the <code>MANUAL</code> instrumentation mode you can use the <code>WebFluxSleuthOperators</code> or <code>MessagingSleuthOperators</code> to provide a lambda that should have the tracing context set in thread local.</p>

<h2 id="manual-reactor-instrumentation-default-in-spring-cloud-gateway">MANUAL Reactor Instrumentation Default in Spring Cloud Gateway</h2>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/1710">this issue</a> we’re setting the manual instrumentation as the default one for Spring Cloud Gateway. The performance gets drastically improved and the tracing context still gets automatically propagated. If you need to do some customized logging etc. just use the <code>WebFluxSleuthOperators</code>.</p>

<h2 id="remove-the-legacy-mdc-entries">Remove The Legacy MDC Entries</h2>

<p><a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/1221">This issue</a> introduces a change in the MDC keys (no more <code>X-B3-...</code> entries in MDC).</p>

<p>Before</p>

<pre><code>2019-06-27 19:36:11,774 INFO {X-B3-SpanId=e30b6a75bcff782b, X-B3-TraceId=e30b6a75bcff782b, X-Span-Export=false, spanExportable=false, spanId=e30b6a75bcff782b, traceId=e30b6a75bcff782b} some log!
</code></pre>

<p>After</p>

<pre><code>2019-06-27 19:36:11,774 INFO {spanId=e30b6a75bcff782b, traceId=e30b6a75bcff782b} some log!
</code></pre>

<h2 id="code-refactoring">Code Refactoring</h2>

<h3 id="removing-zipkin-starter">Removing Zipkin Starter</h3>

<p>The <code>spring-cloud-starter-zipkin</code> dependency is removed. You need to add <code>spring-cloud-starter-sleuth</code> and the <code>spring-cloud-sleuth-zipkin</code> dependency.</p>

<h3 id="new-tracer-abstraction">New Tracer Abstraction</h3>

<p>OpenZipkin Brave was there in Sleuth’s code as the main abstraction since Sleuth 2.0.0. We’ve decided that with Sleuth 3.0.0 we can create our own abstraction (as we do in each Spring Cloud project) so that OpenZipkin Brave becomes one of the supported tracer implementations.</p>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1757">this PR</a> we’ve introduced a new abstraction that wraps Brave. We also added support for another tracer - <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/1497">OpenTelemetry</a>.</p>

<h3 id="aligning-with-spring-boot">Aligning with Spring Boot</h3>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1762">this PR</a> and <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1784">that PR</a> we’ve refactored Spring Cloud Sleuth to reflect Spring Boot’s module setup. We’ve split the project into API, instrumentations, auto-configurations etc. Also the documentation layout was updated to look in the same way the Spring Boot one does.</p>

<h2 id="opentelemetry-support">OpenTelemetry support</h2>

<p>Initially, with <a href="https://github.com/spring-cloud/spring-cloud-sleuth/commit/6e306e594d20361483fd19739e0f5f8e82354bf5">this commit</a>, we’ve added a <code>spring-cloud-sleuth-otel</code> module inside Spring Cloud Sleuth that introduced <a href="https://opentelemetry.io">OpenTelemetry</a> support.</p>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1802">this PR</a> we’ve decided to move Spring Cloud Sleuth and OpenTelemetry integration to an <a href="https://github.com/spring-cloud-incubator/spring-cloud-sleuth-otel/">incubator project</a>. Once OpenTelemetry &amp; OpenTelemetry Instrumentation projects become stable we will consider next steps.</p>

<h1 id="links">Links</h1>

<ul>
  <li><a href="https://docs.spring.io/spring-cloud-sleuth/docs/3.0.0/reference/html/">Spring Cloud Sleuth 3.0.0 docs</a></li>
  <li><a href="https://github.com/spring-cloud-incubator/spring-cloud-sleuth-otel/">Spring Cloud Sleuth OpenTelemetry project</a></li>
  <li><a href="https://spring-cloud-incubator.github.io/spring-cloud-sleuth-otel/docs/current/reference/html/index.html">Spring Cloud Sleuth OpenTelemetry docs</a></li>
  <li><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes#spring-cloud-sleuth">Spring Cloud Sleuth 3.0.0 release notes</a></li>
  <li><a href="https://github.com/spring-cloud/spring-cloud-sleuth/wiki/Spring-Cloud-Sleuth-3.0-Migration-Guide">Spring Cloud Sleuth 3.0.0 migration guide</a></li>
</ul>

<h2 id="stay-in-touch">Stay in touch!</h2>

<p>In case of any questions don’t hesitate to ping us</p>

<ul>
  <li>On <a href="https://github.com/spring-cloud/spring-cloud-sleuth/">Github</a></li>
  <li>On <a href="https://gitter.im/spring-cloud/spring-cloud-sleuth">Gitter</a></li>
  <li>On <a href="https://stackoverflow.com/questions/tagged/spring-cloud-sleuth">Stackoverflow</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 3.0.0 released]]></title>
    <link href="https://toomuchcoding.com/articles/2020/12/23/spring-cloud-contract-3-0-0-released/"/>
    <updated>2020-12-23T14:58:00+01:00</updated>
    <id>https://toomuchcoding.com/articles/2020/12/23/spring-cloud-contract-3-0-0-released</id>
    <content type="html"><![CDATA[<p>With the release of the Spring Cloud 2020.0.0 (aka Ilford) release train we’re more than happy to announce the general availability of Spring Cloud Contract 3.0.0. In this blog post I’ll describe the most notable released features (in order of their release dates).</p>

<!--more-->

<h2 id="incremental-test-generation-for-maven">Incremental Test Generation for Maven</h2>

<p>With the <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1361">Incremental Test Generation for Maven</a> we’re generating tests, stubs and stubs jar only if the contracts have changed. The feature is opt-out (enabled by default).</p>

<h2 id="resolves-credentials-from-settingsxml">Resolves Credentials from settings.xml</h2>

<p>With the <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1362">
support to resolve credentials from settings.xml</a> when using Aether based solution to fetch the contracts / stubs, we will reuse your <code>settings.xml</code> credentials for the given server id (via the <code>stubrunner.server-id </code> property).</p>

<h2 id="rewrite-groovy-to-java">Rewrite Groovy to Java</h2>

<p>It was fantastic to see so many people take part in rewriting the Spring Cloud Contract’s codebase from Groovy to Java. You can check <a href="https://github.com/spring-cloud/spring-cloud-contract/issues/1470">this issue</a> for more information.</p>

<h2 id="allow-to-extend-contract--stubs">Allow to Extend Contract &amp; Stubs</h2>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-contract/issues/1465">this issue</a> and this <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1466">pull request</a> we’ve added an option to provide <code>metadata</code> to your contracts. Since we didn’t want to map all WireMock properties to the core of our Contract definition, we’ve allowed passing of metadata under the <code>wiremock</code> key. The passed value can be an actual WireMock definition. We will map that part to the generated stub.</p>

<p>Example of adding delays:</p>

<pre><code class="language-groovy">Contract.make {
		request {
			method GET()
			url '/drunks'
		}
		response {
			status OK()
			body([
				count: 100
			])
			headers {
				contentType("application/json")
			}
		}
		metadata([wiremock: '''\
	{
		"response" : {
			"delayDistribution": {
                    "type": "lognormal",
                    "median": 80,
                    "sigma": 0.4
            }
		}
	}
'''
		])
</code></pre>

<p>That also means that you can provide your own metadata. You can read more about this in the documentation</p>

<ul>
  <li><a href="https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#contract-dsl-metadata">existing metadata entries</a></li>
  <li><a href="https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/htmlsingle/#customization-wiremock-from-metadata">customization of WireMock via metadata</a></li>
  <li><a href="https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/htmlsingle/#customization-wiremock-from-metadata-custom-processor">customization of WireMock via metadata &amp; custom post processor</a></li>
</ul>

<h2 id="new-custom-mode-of-test-generation">New [Custom] Mode of Test Generation</h2>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1511">this pr</a> we’ve introduced a new <code>custom</code> mode of test generation. You’re able to pass your own implementation of an HTTP client (you can reuse our <code>OkHttpHttpVerifier</code>), thanks to which you can e.g. use HTTP/2. This was a prerequisite for the GRPC task. Thanks to the Spring Cloud Contract Workshops and the following refactoring of Spring Cloud Contract it was quite easy to add this feature, so thanks everyone involved then!</p>

<p>You can read more about this in <a href="https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#features-custom-mode">the documentation</a>.</p>

<h2 id="experimental-grpc-support">Experimental GRPC Support</h2>

<p>With the custom mode in place we could add the experimental GRPC support. Why experimental? Due to GRPC’s tweaking of the HTTP/2 Header frames, it’s impossible to assert the <code>grpc-status</code> header. You can read more about the feature, the issue and workarounds in <a href="https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#features-grpc">the documentation</a>.</p>

<p>Here you can find an example of <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_grpc">GRPC producer</a> and of a <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/consumer_grpc">GRPC consumer</a>.</p>

<h2 id="graphql-support">GraphQL Support</h2>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1506">this PR</a> we’ve added GraphQL support. Since GraphQL is essentially POST to and endpoint with specific body, you can create such a contract and set the proper metadata. You can read more about this in <a href="https://docs.spring.io/spring-cloud-contract/docs/3.0.0/reference/html/project-features.html#features-graphql">the documentation</a>.</p>

<p>Here you can find an example of <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_graphql">GraphQL producer</a> and of a <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/blob/master/consumer/src/test/java/com/example/BeerControllerGraphQLTest.java">GraphQL consumer</a>.</p>

<h2 id="stub-runner-boot-thin-jar">Stub Runner Boot Thin JAR</h2>

<p>With <a href="https://github.com/spring-cloud/spring-cloud-contract/issues/1385">this issue</a> we’ve migrated the Stub Runner Boot application to be a thin jar based application. Not only have we managed to lower the size of the produced artifact, but also we’re able via properties turn on profiles (e.g. <code>kafka</code> or <code>rabbit</code> profiles) that would fetch additional dependencies at runtime.</p>

<h2 id="messaging-polyglot-support">Messaging Polyglot Support</h2>

<h3 id="pre-built-kafka-and-amqp-support">Pre-built kafka and amqp support</h3>

<p>With the thin jar rewrite and <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1472">this PR</a> and <a href="https://github.com/spring-cloud/spring-cloud-contract/issues/1468">this issue</a> we’re adding support for Kafka and AMQP based solutions with the Docker images.</p>

<p>You’ll have to have the following prerequisites met:</p>

<ul>
  <li>Middleware (e.g. RabbitMQ or Kafka) must be running before generating tests</li>
  <li>Your contract needs to call a method <code>triggerMessage(...)</code> with a String parameter that is equal to the contract’s label.</li>
  <li>Your application needs to have a HTTP endpoint via which we can trigger a message</li>
  <li>That endpoint should not be available on production (could be enabled via an environment variable)</li>
</ul>

<p>Your contract can leverage the <code>kafka</code> and <code>amqp</code> metadata sections like below:</p>

<pre><code class="language-yaml">description: 'Send a pong message in response to a ping message'
label: 'ping_pong'
input:
    # You have to provide the `triggerMessage` method with the `label`
    # as a String parameter of the method
    triggeredBy: 'triggerMessage("ping_pong")'
outputMessage:
    sentTo: 'output'
    body:
        message: 'pong'
metadata:
    amqp:
        outputMessage:
            connectToBroker:
                declareQueueWithName: "queue"
            messageProperties:
				receivedRoutingKey: '#'
</code></pre>

<h3 id="standalone-mode">Standalone mode</h3>

<p>There is legitimate reason to run your contract tests against existing middleware. Some
testing frameworks might give you false positive results - the test within your build
passes whereas on production the communication fails.</p>

<p>In Spring Cloud Contract docker images we give an option to connect to existing middleware.
As presented in previous subsections we do support Kafka and RabbitMQ out of the box. However,
via <a href="https://camel.apache.org/components/latest/index.html">Apache Camel Components</a> we can support
other middleware too. Let’s take a look at the following examples of usage.</p>

<p>Example of a contract connecting to a real RabbitMQ instance:</p>

<pre><code class="language-yaml">description: 'Send a pong message in response to a ping message'
label: 'standalone_ping_pong'
input:
  triggeredBy: 'triggerMessage("ping_pong")'
outputMessage:
  sentTo: 'rabbitmq:output'
  body:
    message: 'pong'
metadata:
  standalone:
    setup:
      options: rabbitmq:output?queue=output&amp;routingKey=#
    outputMessage:
	  additionalOptions: routingKey=#&amp;queue=output
</code></pre>

<p>You can read more about setting this up in <a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1472">this PR</a> under the <code>Documentation of the feature with standalone mode (aka with running middleware)</code> section.</p>

<h2 id="messaging-with-existing-middleware">Messaging with Existing Middleware</h2>

<p>Since it’s extremely easy to start a docker image with a broker via <a href="https://testcontainers.org">Testcontainers</a>, we’re suggesting to slowly migrate your messaging tests to such an approach. From the perspective of Spring Cloud Contract it’s also better since we won’t need to replicate in our code the special cases of how frameworks behave when calling a real broker. Here you can find an example of how you can connect to a JMS broker on <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_jms_middleware">the producer side</a> and <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/master/producer_jms_middleware">here how you can consume it</a>.</p>

<h2 id="gradle-plugin-rewrite">Gradle Plugin rewrite</h2>

<p>This one is fully done by the one and only <a href="https://github.com/shanman190">shanman190</a>. The whole work on the Gradle plugin was done by him so you should buy him a beer once you get to see him :) Anyways, there are various changes to the Gradle plugin that you can check out.</p>

<ul>
  <li><a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1464">Disable the stubs jar publication by default</a></li>
  <li><a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1558">Attempt to keep Kotlin off the classpath</a></li>
</ul>

<h2 id="stay-in-touch">Stay in touch!</h2>

<p>In case of any questions don’t hesitate to ping us</p>

<ul>
  <li>On <a href="https://github.com/spring-cloud/spring-cloud-contract/">Github</a></li>
  <li>On <a href="https://gitter.im/spring-cloud/spring-cloud-contract">Gitter</a></li>
  <li>On <a href="https://stackoverflow.com/questions/tagged/spring-cloud-contract">Stackoverflow</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmartTesting.pl]]></title>
    <link href="https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl/"/>
    <updated>2020-08-13T15:36:35+02:00</updated>
    <id>https://toomuchcoding.com/articles/2020/08/13/smarttesting-dot-pl</id>
    <content type="html"><![CDATA[<p>Wraz z Olgą Maciaszek-Sharmą i Maćkiem Aniserowiczem jesteśmy bardzo szczęsliwi mogąc ogłosić, że ruszyliśmy ze szkoleniem na temat testowania o nazwie SmartTesting! Więcej szczegółów dostępnych na stronie <a href="https://smarttesting.pl">smarttesting.pl</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract in the polyglot world]]></title>
    <link href="https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world/"/>
    <updated>2018-02-13T21:39:51+01:00</updated>
    <id>https://toomuchcoding.com/articles/2018/02/13/spring-cloud-contract-in-the-polyglot-world</id>
    <content type="html"><![CDATA[<p>I have just published a new article about Spring Cloud Contract in a polyglot world at the Spring Blog. <a href="https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world">You can check it out here!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery of a Startup]]></title>
    <link href="https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup/"/>
    <updated>2017-12-03T13:11:22+01:00</updated>
    <id>https://toomuchcoding.com/articles/2017/12/03/continuous-delivery-of-a-startup</id>
    <content type="html"><![CDATA[<p>Hi!</p>

<p>After a very long pause, finally I’ve managed to write a new blog post. It’s an interview with <a href="https://twitter.com/jkubrynski">Jakub Kubryński</a> about Continuous Delivery of a Startup. It’s published as part of the <a href="https://www.javaadvent.com/2017/12/cd-of-a-startup.html">Java Advent Calendar</a>.</p>

<p>Check it out <a href="https://www.javaadvent.com/2017/12/cd-of-a-startup.html">here!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Project - Spring Cloud Pipelines]]></title>
    <link href="https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines/"/>
    <updated>2016-10-18T19:29:24+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/10/18/new-project-spring-cloud-pipelines</id>
    <content type="html"><![CDATA[<p>I’ve just published an article at the Spring blog about the creation of a new project called <a href="https://spring.io/blog/2016/10/18/spring-cloud-pipelines">Spring Cloud Pipelines</a>.</p>

<h1 id="why">Why?</h1>

<p>Why a new project? Cause we’ve been all doing repetitive work. <a href="https://toomuchcoding.com/blog/2015/09/26/microservice-deployment/">Check out this post</a> where I write about creation of
a deployment pipeline. Every company does it and wastes money and resource on it. In Pivotal
our goal is to give developers tools they need to deliver features as fast as possible.</p>

<p><a href="https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html">Spring Cloud Pipelines</a> gives you an opinionated deployment pipeline. You can use it straight away, you can modify it. Do whatever you please :)</p>

<h1 id="demo">Demo</h1>

<p>The repo is setup with a demo for Concourse CI and Jenkins. Read the docs how to set it up for each of those tools. The deployment is done via Cloud Foundry. For the sake of demo we’re using PCF Dev.</p>

<h1 id="links">Links</h1>

<ul>
  <li><a href="https://cloud.spring.io/spring-cloud-pipelines/">Project page</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html">Project documentation</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#concourse">Concourse opinionated pipeline setup</a></li>
  <li><a href="https://concourse.ci">Concourse Website</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#jenkins">Jenkins opinionated pipeline setup</a></li>
  <li><a href="https://github.com/jenkinsci/job-dsl-plugin/wiki">Jenkins Job Dsl Plugin</a></li>
  <li><a href="https://gitter.im/spring-cloud/spring-cloud-pipelines">Spring Cloud Pipelines Gitter</a></li>
  <li><a href="https://github.com/spring-cloud/spring-cloud-pipelines">Spring Cloud Pipelines GitHub page</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract Podcast]]></title>
    <link href="https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast/"/>
    <updated>2016-10-07T23:14:36+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/10/07/spring-cloud-contract-podcast</id>
    <content type="html"><![CDATA[<p>A podcast with Michael Cote and me about Spring Cloud Contract was just published. <a href="https://soundcloud.com/pivotalconversations/037-microservices-governance-with-spring-cloud-contract-guest-marcin-grzejszczak">You can check it out here!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 1.0.0.RELEASE available!]]></title>
    <link href="https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/"/>
    <updated>2016-09-24T20:39:25+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available</id>
    <content type="html"><![CDATA[<p>I’ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/09/23/spring-cloud-contract-1-0-0-release-is-available">Spring Cloud Contract 1.0.0.RELEASE is available</a>.</p>

<p>I’m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal’s Spring Cloud branding. Let’s look at some numbers:</p>

<ul>
  <li>first commit almost 2 years ago: <a href="https://github.com/spring-cloud/spring-cloud-contract/commit/dfaddaa98d645b818ba3947c9267ef7ac8ed9ba4">2014-12-06 18:20:29 by Jakub Kubrynski</a> - thanks to <a href="https://codearte.eu">Codearte</a> the authors of <a href="https://devskiller.com">DevSkiller</a> for their support!!!</li>
  <li><a href="https://github.com/spring-cloud/spring-cloud-contract/commits/master">1.152 commits</a></li>
  <li><a href="https://github.com/spring-cloud/spring-cloud-contract/graphs/contributors">20 contributors</a></li>
</ul>

<p>That’s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract.</p>

<!-- more -->

<h2 id="whats-new-in-comparison-to-accurest">What’s new in comparison to Accurest?</h2>

<p>Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes?</p>

<ul>
  <li>we’ve moved from Grapes to Aether to download stubs</li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_what_is_this_value_consumer_producer">we generate fake data when you provide either consumer or producer in the DSL</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts">Consumer Contract approach is there</a></li>
  <li>Spring Cloud Contract is available on <a href="https://start.spring.io">start.spring.io</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2">you can have more than one base class for your tests</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_additional_configuration">Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud</a></li>
  <li>the whole build was moved from Gradle to the standard Spring Cloud Maven setup</li>
</ul>

<p>These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_wiremock">Spring Cloud Contract WireMock support</a> and <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_generating_stubs_using_restdocs">Spring Cloud Contract RestDocs</a>. Thanks to the first one the integration with <a href="https://wiremock.org">WireMock</a> is much more efficient and thanks to the latter you don’t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test.</p>

<p>As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts">Consumer Contract support</a> and that <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2">you can have more than one base class for your tests</a>. Let’s take a closer look what’s there in the docs about them…</p>

<h3 id="consumer-contract-support">Consumer Contract support</h3>

<p>Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes.</p>

<h4 id="repo-structure">Repo structure</h4>

<p>Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here:</p>

<pre><code>├── com
│   └── example
│       └── server
│           ├── client1
│           │   └── expectation.groovy
│           ├── client2
│           │   └── expectation.groovy
│           ├── client3
│           │   └── expectation.groovy
│           └── pom.xml
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    └── assembly
        └── contracts.xml
</code></pre>
<p>As you can see the under the slash-delimited groupid / artifact id folder (<code>com/example/server</code>) you have expectations of the 3 consumers (<code>client1</code>, <code>client2</code> and <code>client3</code>). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo.</p>

<p>Example of a <code>pom.xml</code> inside the <code>server</code> folder.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="https://maven.apache.org/POM/4.0.0" xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;com.example&lt;/groupId&gt;
	&lt;artifactId&gt;server&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

	&lt;name&gt;Server Stubs&lt;/name&gt;
	&lt;description&gt;POM used to install locally stubs for consumer side&lt;/description&gt;

	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;1.4.0.BUILD-SNAPSHOT&lt;/version&gt;
		&lt;relativePath /&gt;
	&lt;/parent&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
		&lt;spring-cloud-contract.version&gt;1.0.1.BUILD-SNAPSHOT&lt;/spring-cloud-contract.version&gt;
		&lt;spring-cloud-dependencies.version&gt;Camden.BUILD-SNAPSHOT&lt;/spring-cloud-dependencies.version&gt;
	&lt;/properties&gt;

	&lt;dependencyManagement&gt;
		&lt;dependencies&gt;
			&lt;dependency&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
				&lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
				&lt;type&gt;pom&lt;/type&gt;
				&lt;scope&gt;import&lt;/scope&gt;
			&lt;/dependency&gt;
		&lt;/dependencies&gt;
	&lt;/dependencyManagement&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
				&lt;extensions&gt;true&lt;/extensions&gt;
				&lt;configuration&gt;
					&lt;!-- By default it would search under src/test/resources/ --&gt;
					&lt;contractsDirectory&gt;${project.basedir}&lt;/contractsDirectory&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;

	&lt;repositories&gt;
		&lt;repository&gt;
			&lt;id&gt;spring-snapshots&lt;/id&gt;
			&lt;name&gt;Spring Snapshots&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;true&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/repository&gt;
		&lt;repository&gt;
			&lt;id&gt;spring-milestones&lt;/id&gt;
			&lt;name&gt;Spring Milestones&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/repository&gt;
		&lt;repository&gt;
			&lt;id&gt;spring-releases&lt;/id&gt;
			&lt;name&gt;Spring Releases&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/repository&gt;
	&lt;/repositories&gt;
	&lt;pluginRepositories&gt;
		&lt;pluginRepository&gt;
			&lt;id&gt;spring-snapshots&lt;/id&gt;
			&lt;name&gt;Spring Snapshots&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;true&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/pluginRepository&gt;
		&lt;pluginRepository&gt;
			&lt;id&gt;spring-milestones&lt;/id&gt;
			&lt;name&gt;Spring Milestones&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/pluginRepository&gt;
		&lt;pluginRepository&gt;
			&lt;id&gt;spring-releases&lt;/id&gt;
			&lt;name&gt;Spring Releases&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/pluginRepository&gt;
	&lt;/pluginRepositories&gt;

&lt;/project&gt;
</code></pre>

<p>As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run <code>mvn clean install -DskipTests</code> to locally install stubs of the producer project.</p>

<p>The <code>pom.xml</code> in the root folder can look like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="https://maven.apache.org/POM/4.0.0" xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
	&lt;artifactId&gt;contracts&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

	&lt;name&gt;Contracts&lt;/name&gt;
	&lt;description&gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&lt;/description&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
	&lt;/properties&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
				&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
				&lt;executions&gt;
					&lt;execution&gt;
						&lt;id&gt;contracts&lt;/id&gt;
						&lt;phase&gt;prepare-package&lt;/phase&gt;
						&lt;goals&gt;
							&lt;goal&gt;single&lt;/goal&gt;
						&lt;/goals&gt;
						&lt;configuration&gt;
							&lt;attach&gt;true&lt;/attach&gt;
							&lt;descriptor&gt;${basedir}/src/assembly/contracts.xml&lt;/descriptor&gt;
							&lt;!-- If you want an explicit classifier remove the following line --&gt;
							&lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;
						&lt;/configuration&gt;
					&lt;/execution&gt;
				&lt;/executions&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;

&lt;/project&gt;
</code></pre>

<p>It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here:</p>

<pre><code>&lt;assembly xmlns="https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
		  xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="https://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd"&gt;
	&lt;id&gt;project&lt;/id&gt;
	&lt;formats&gt;
		&lt;format&gt;jar&lt;/format&gt;
	&lt;/formats&gt;
	&lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
	&lt;fileSets&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;${project.basedir}&lt;/directory&gt;
			&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;
			&lt;useDefaultExcludes&gt;true&lt;/useDefaultExcludes&gt;
			&lt;excludes&gt;
				&lt;exclude&gt;**/${project.build.directory}/**&lt;/exclude&gt;
				&lt;exclude&gt;mvnw&lt;/exclude&gt;
				&lt;exclude&gt;mvnw.cmd&lt;/exclude&gt;
				&lt;exclude&gt;.mvn/**&lt;/exclude&gt;
				&lt;exclude&gt;src/**&lt;/exclude&gt;
			&lt;/excludes&gt;
		&lt;/fileSet&gt;
	&lt;/fileSets&gt;
&lt;/assembly&gt;
</code></pre>

<h4 id="workflow">Workflow</h4>

<p>The workflow would look similar to the one presented in the <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_step_by_step_guide_to_cdc">Step by step guide to CDC</a>. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository.</p>

<h4 id="consumer">Consumer</h4>

<p>When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. <code>com/example/server</code>) and runs <code>mvn clean install -DskipTests</code> to install locally the stubs converted from the contracts.</p>

<p><strong>REMEMBER! You need to have Maven installed locally</strong></p>

<h4 id="producer">Producer</h4>

<p>As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts:</p>

<pre><code>&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;contractsRepositoryUrl&gt;https://link/to/your/nexus/or/artifactory/or/sth&lt;/contractsRepositoryUrl&gt;
		&lt;contractDependency&gt;
			&lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
			&lt;artifactId&gt;contracts&lt;/artifactId&gt;
		&lt;/contractDependency&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>With this setup the JAR with groupid <code>com.example.standalone</code> and artifactid contracts will be downloaded from <code>https://link/to/your/nexus/or/artifactory/or/sth</code>. It will be then unpacked in a local temporary folder and contracts present under the <code>com/example/server</code> will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done.</p>

<p>The rest of the flow looks the same.</p>

<h3 id="more-than-one-base-class">More than one base class</h3>

<p>That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That’s why we’ve added a possibility to map a contract to its test base class.</p>

<h4 id="gradle">Gradle</h4>

<p>If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options:</p>

<ul>
  <li>follow a convention by providing the <code>packageWithBaseClasses</code></li>
  <li>provide explicit mapping via <code>baseClassMappings</code></li>
</ul>

<h5 id="convention">Convention</h5>

<p>The convention is such that if you have a contract under e.g. <code>src/test/resources/contract/foo/bar/baz/</code> and provide the value of the <code>packageWithBaseClasses</code> property to <code>com.example.base</code> then we will assume that there is a <code>BarBazBase</code> class under <code>com.example.base</code> package. In other words we take last two parts of package if they exist and form a class with a <code>Base</code> suffix. Takes precedence over <code>baseClassForTests</code>. Example of usage in the contracts closure:</p>

<pre><code>packageWithBaseClasses = 'com.example.base'
</code></pre>

<h5 id="mapping">Mapping</h5>

<p>You can manually map a regular expression of the contract’s <em>package</em> (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example:</p>

<pre><code>baseClassForTests = "com.example.FooBase"
baseClassMappings {
	baseClassMapping('.*com.*', 'com.example.ComBase')
	baseClassMapping('.*bar.*':'com.example.BarBase')
}
</code></pre>

<p>Let’s assume that you have contracts under</p>

<ul>
  <li><code>src/test/resources/contract/com/</code></li>
  <li><code>src/test/resources/contract/foo/</code></li>
</ul>

<p>By providing the <code>baseClassForTests</code> we have a fallback in case mapping didn’t succeed (you could also provide the <code>packageWithBaseClasses</code> as fallback). That way the tests generated from <code>src/test/resources/contract/com/</code> contracts will be extending the <code>com.example.ComBase</code> whereas the rest of tests will extend <code>com.example.FooBase</code> cause they don’t match the base class mapping for <code>bar</code> folder.</p>

<h4 id="maven">Maven</h4>

<p>Let’s now look how it looks like for Maven.</p>

<h5 id="convention-1">Convention</h5>

<p>To accomplish the same result as the one presented for Gradle you’d have to set your configuration like this:</p>

<pre><code>&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;com.example.base&lt;/packageWithBaseClasses&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h5 id="mapping-1">Mapping</h5>

<p>You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list <code>baseClassMappings</code> of <code>baseClassMapping</code> that takes a <code>contractPackageRegex</code> to <code>baseClassFQN</code> mapping. Let’s take a look at the following example:</p>

<pre><code>&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;baseClassForTests&gt;com.example.FooBase&lt;/baseClassForTests&gt;
		&lt;baseClassMappings&gt;
			&lt;baseClassMapping&gt;
				&lt;contractPackageRegex&gt;.*com.*&lt;/contractPackageRegex&gt;
				&lt;baseClassFQN&gt;com.example.ComBase&lt;/baseClassFQN&gt;
			&lt;/baseClassMapping&gt;
  			&lt;baseClassMapping&gt;
  				&lt;contractPackageRegex&gt;.*bar.*&lt;/contractPackageRegex&gt;
  				&lt;baseClassFQN&gt;com.example.BarBase&lt;/baseClassFQN&gt;
  			&lt;/baseClassMapping&gt;
		&lt;/baseClassMappings&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h2 id="summary">Summary</h2>

<p>In this blog post we’ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We’ve also checked some history around Accurest to Spring Cloud Contract migration.</p>

<h2 id="links">Links</h2>

<p>Here you can find interesting links related to Spring Cloud Contract Verifier:</p>

<ul>
  <li><a href="https://github.com/spring-cloud/spring-cloud-contract/">Spring Cloud Contract Github Repository</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/">Spring Cloud Contract Main project page</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html">Spring Cloud Contract Documentation</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_stub_runner">Spring Cloud Contract Stub Runner Documentation</a></li>
  <li><a href="https://gitter.im/spring-cloud/spring-cloud-contract">Spring Cloud Contract Gitter</a></li>
  <li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/">Spring Cloud Contract Maven Plugin Documentation</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 1.0.0.M1 Released]]></title>
    <link href="https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/"/>
    <updated>2016-07-25T17:07:39+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released</id>
    <content type="html"><![CDATA[<p>I’ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/07/25/spring-cloud-contract-1-0-0-m1-released">Spring Cloud Contract 1.0.0.M1 Release</a>. Check out the new project formerly known as Accurest!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest becomes part of the Spring Cloud Contract]]></title>
    <link href="https://toomuchcoding.com/articles/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract/"/>
    <updated>2016-06-24T18:43:07+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract</id>
    <content type="html"><![CDATA[<p>I’m extremely happy to announce that we have successfully rebranded the <a href="https://codearte.github.io/accurest">Accurest project</a>. It’s officially become part of the <a href="https://github.com/spring-cloud/spring-cloud-contract">Spring Cloud Contract</a> initiative. Ladies and Gentlemen please welcome the new projects:</p>

<ul>
  <li><a href="https://codearte.github.io/accurest/">Spring Cloud Contract Verifier</a></li>
  <li><a href="https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner">Spring Cloud Contract Stub Runner</a></li>
</ul>

<!-- more -->

<h2 id="a-little-bit-of-history">A little bit of history</h2>

<p>Accurest was created because of lack of an easy-to-use tool for doing <a href="https://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a>. From our production experience the biggest problem was lack of verification that the defined contract actually does what it says it does. We wanted to ensure that from the contract automatically tests are generated so that we can have a proof that the stubs are reliable. Since there was no such tool the first commit of Accurest took place on 12/2014. The very idea and its implementation was initially set by <a href="https://www.kubrynski.com/">Jakub Kubrynski</a> and me. The last available version of Accurest was 1.1.0 released on 06/2016 (the docs for the old version are <a href="https://codearte.github.io/accurest/deprecated/">available here</a>). During these 19 months a lot of feedback has been gathered. The tool has received a lot of very good reception and that made us want to work even harder. Many times we have decided to decrease the time required for sleeping so as to fix a bug or develop a new feature in Accurest.</p>

<h2 id="notable-features">Notable features</h2>

<p>Speaking of features, especially quite a few of them definitely makes Accurest stand out on the “market” of Consumer Driven Contract (CDC) tooling. Out of many the most interesting are:</p>

<ul>
  <li>Possibility to do CDC with messaging</li>
  <li>Clear and easy to use, statically typed DSL</li>
  <li>Possibility to copy paste your current JSON file to the contract and only edit its elements</li>
  <li>Automatic generation of tests from the defined Contract</li>
  <li>Stub Runner functionality - the stubs are automatically downloaded at runtime from Nexus / Artifactory</li>
  <li>Spring Cloud integration - no discovery service is needed for integration tests</li>
</ul>

<p>For more information check out my posts about <a href="https://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a>, <a href="https://toomuchcoding.com/blog/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/">Accurest Messaging</a> or <a href="https://codearte.github.io/accurest/">just read the docs</a>.</p>

<h2 id="spring-cloud-contract">Spring Cloud Contract</h2>

<p>In Pivotal we came to the conclusion that Accurest could become an interesting addition to our Spring Cloud tooling. Due to the increased interest of the community in the Consumer Driven Contracts approach we’ve decided to start the <a href="https://github.com/spring-cloud/spring-cloud-contract">Spring Cloud Contract</a> initiative.</p>

<p>Accurest became <em>Spring Cloud Contract Verifier</em> (note: the name might change in the future) but for the time being will remain in the <a href="https://github.com/Codearte">Codearte repository</a>. It’s becoming the part of Spring Cloud tooling as a mature tool with a growing community around it. Some arguments for that are that it has:</p>

<ul>
  <li><a href="https://codearte.github.io/accurest/">a nice AsciiDoc documentation that was completely rewritten following users’ feedback</a></li>
  <li><a href="https://gitter.im/Codearte/accurest">active Gitter channel where we try to immediately answer any support questions</a></li>
  <li><a href="https://github.com/Codearte/accurest/stargazers">Over 80 stars on Github and counting ;)</a></li>
</ul>

<p>Since we believe very much in the Consumer Driven Contract approach we also want to do the library in a Client Driven way. That means that we (server side) are very open to your feedback (consumer side) and want you be the main driver of changes in the library.</p>

<h2 id="credits">Credits</h2>

<p>The Accurest project would never come to life without the hard work of the <a href="https://codearte.io">Codearte</a> developers (the order is random):</p>

<ul>
  <li><a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li>
  <li><a href="https://www.kubrynski.com">Jakub Kubrynski</a></li>
  <li><a href="https://solidsoft.wordpress.com/">Marcin Zajaczkowski</a></li>
  <li><a href="https://github.com/mariuszs">Mariusz Smykula</a></li>
</ul>

<p>and obviously everybody who has <a href="https://github.com/Codearte/accurest/graphs/contributors">ever commited something to the project</a>.</p>

<h2 id="links">Links</h2>

<p>If you want to read more about <em>Spring Cloud Contract Verifier</em> just check out the following links.</p>

<ul>
  <li><a href="https://github.com/Codearte/accurest">Spring Cloud Contract Verifier Github Repository</a></li>
  <li><a href="https://codearte.github.io/accurest">Spring Cloud Contract Verifier Documentation</a></li>
  <li><a href="https://codearte.github.io/accurest/deprecated">Accurest Legacy Documentation</a></li>
  <li><a href="https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner">Spring Cloud Contract Stub Runner Documentation</a></li>
  <li><a href="https://codearte.github.io/accurest/#stub-runner-for-messaging">Spring Cloud Contract Stub Runner Messaging Documentation</a></li>
  <li><a href="https://gitter.im/Codearte/accurest">Spring Cloud Contract Verifier Gitter</a></li>
  <li><a href="https://github.com/Codearte/accurest-maven-plugin">Spring Cloud Contract Verifier Maven Plugin</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero Downtime Deployment with a Database]]></title>
    <link href="https://toomuchcoding.com/articles/2016/05/31/zero-downtime-deployment-with-a-database/"/>
    <updated>2016-05-31T11:58:52+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/05/31/zero-downtime-deployment-with-a-database</id>
    <content type="html"><![CDATA[<p>I’ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database">Zero Downtime Deployment with a Database</a>. So if you’re planning on doing
zero downtime or blue/green deployment you’d better check out that article :) The code is available here on
<a href="https://github.com/spring-cloud-samples/zero-downtime-deployment">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest and Stub Runner 1.1.0.M3]]></title>
    <link href="https://toomuchcoding.com/articles/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/"/>
    <updated>2016-04-30T13:53:44+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3</id>
    <content type="html"><![CDATA[<p>Currently at the Spring Team we’re polishing our libraries for the upcoming final release of the Brixton train. It should happen soon :) Until then I’m spending a lot of my after work, free time on <a href="/blog/2016/04/25/accurest-docs-updated/">Accurest</a> and <a href="https://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a>.</p>

<p>Today’s post will be about the new stuff that you will be able to profit from in the upcoming <code>1.1.0</code> release of Accurest. Also you can profit from most of these features in the <code>1.1.0.M3</code> release.</p>

<p>I’ll just quickly go through the features but note that you can read about all of them in more depth in our <a href="https://codearte.github.io/accurest">documentation </a>.</p>

<!-- more -->

<h2 id="name-change">Name change</h2>

<p>AccuREST started as a library used to stub HTTP calls. In the upcoming <code>1.1.0</code> release you will be able to stub messaging functionality too. That’s why the name changes to Accurest. That’s a fantastic name isn’t it? ;)</p>

<p>Also since branding is important, now instead of calling <code>io.codearte.accurest.dsl.GroovyDsl</code> you can call <code>io.codearte.accurest.dsl.Accurest</code> :)</p>

<h2 id="messaging-support">Messaging support</h2>

<p>It took me quite some time to do this but it was worth it :) Several sleepless nights and now you can profit from defining contracts for messaging. In HTTP we had <code>client</code>/<code>stub</code> side and <code>server</code>/<code>test</code> side. For messaging we added methods to help discern the differences:</p>

<ul>
  <li><code>publisher</code> the side for which the tests will be generated</li>
  <li><code>consumer</code> the side for which the messaging endpoints will be stubbed</li>
</ul>

<h3 id="contract">Contract</h3>

<p>There are 3 use cases from the message <code>Producer</code>’s point of view.</p>

<ul>
  <li>something happens in my application and I’m producing an output message</li>
  <li>someone sends a message to destination (queue/topic), I’m listening to that message and will produce an output message somewhere else</li>
  <li>someone sends a message to destination (queue/topic), I’m listening to that message and will consume it without any message sending</li>
</ul>

<p>Here you can see examples of contracts for those three situations (you can read more about it in the  <a href="https://codearte.github.io/accurest/#messaging-top-level-elements">docs</a> ):</p>

<h4 id="output-triggered-by-a-method">Output triggered by a method</h4>

<p>The output message can be triggered by calling a method (e.g. a Scheduler was started and a message was sent)</p>

<pre><code class="language-groovy">def dsl = Accurest.make {
        // Human readable description
        description 'Some description'
        // Label by means of which the output message can be triggered
        label 'some_label'
        // input to the contract
        input {
                // the contract will be triggered by a method
                triggeredBy('bookReturnedTriggered()')
        }
        // output message of the contract
        outputMessage {
                // destination to which the output message will be sent
                sentTo('output')
                // the body of the output message
                body('''{ "bookName" : "foo" }''')
                // the headers of the output message
                headers {
                        header('BOOK-NAME', 'foo')
                }
        }
}
</code></pre>

<h4 id="output-triggered-by-a-message">Output triggered by a message</h4>

<p>The output message can be triggered by receiving a message.</p>

<pre><code class="language-groovy">def dsl = GroovyDsl.make {
        description 'Some Description'
        label 'some_label'
        // input is a message
        input {
                // the message was received from this destination
                messageFrom('input')
                // has the following body
                messageBody([
                        bookName: 'foo'
                ])
                // and the following headers
                messageHeaders {
                        header('sample', 'header')
                }
        }
        outputMessage {
                sentTo('output')
                body([
                        bookName: 'foo'
                ])
                headers {
                        header('BOOK-NAME', 'foo')
                }
        }
}
</code></pre>

<h4 id="no-output-only-input">No output, only input</h4>

<p>There can be only input without any output</p>

<pre><code class="language-groovy">def dsl = GroovyDsl.make {
        description 'Some Description'
        label 'some_label'
        // input is a message
        input {
                // the message was received from this destination
                messageFrom('input')
                // has the following body
                messageBody([
                        bookName: 'foo'
                ])
                // and the following headers
                messageHeaders {
                        header('sample', 'header')
                }
        }
}
</code></pre>

<h3 id="producer-side">Producer side</h3>

<p>Here you can see an example of a JUnit generated test for the producer for the input / output scenario:</p>

<pre><code>// given:
 AccurestMessage inputMessage = accurestMessaging.create(
  "{\\"bookName\\":\\"foo\\"}"
, headers()
  .header("sample", "header"));

// when:
 accurestMessaging.send(inputMessage, "input");

// then:
 AccurestMessage response = accurestMessaging.receiveMessage("output");
 assertThat(response).isNotNull();
 assertThat(response.getHeader("BOOK-NAME")).isEqualTo("foo");
// and:
 DocumentContext parsedJson = JsonPath.parse(accurestObjectMapper.writeValueAsString(response.getPayload()));
 assertThatJson(parsedJson).field("bookName").isEqualTo("foo");
</code></pre>

<p>We’re sending a message to a destination called <code>input</code>. next we’re checking if there’s a message at the <code>output</code> destination. If that’s the case
we’re checking if that message has proper headers and body.</p>

<h3 id="consumer-side">Consumer side</h3>

<p>It’s enough to provide the dependency to proper Stub Runner module (check the next section for more information) and tell it which stubs should be downloaded. Yup, that’s it! <a href="https://codearte.github.io/accurest/#stub-runner-for-messaging">Stub Runner will download the stubs and prepare stubbed routes</a>.</p>

<p>Sometimes you’ll need to trigger a message somehow in your tests. That’s why we’ve provided the <code>StubTrigger</code> interface that you can inject! If you’re already familiar with Stub Runner Spring then you could use the <code>StubFinder</code> bean to find the URL of your dependency. Now <code>StubFinder</code> also extends the <code>StubTrigger</code> interface thus you don’t have to inject any additional beans in your tests.</p>

<p>There are multiple ways in which you can trigger a message:</p>

<h4 id="trigger-by-label">Trigger by label</h4>

<pre><code>stubFinder.trigger('return_book_1')
</code></pre>

<h4 id="trigger-by-group-and-artifact-ids">Trigger by group and artifact ids</h4>

<pre><code>stubFinder.trigger('io.codearte.accurest.stubs:camelService', 'return_book_1')
</code></pre>

<h4 id="trigger-by-artifact-id">Trigger by artifact id</h4>

<pre><code>stubFinder.trigger('camelService', 'return_book_1')
</code></pre>

<h4 id="trigger-all-messages">Trigger all messages</h4>

<pre><code>stubFinder.trigger()
</code></pre>

<h3 id="integrations">Integrations</h3>

<p>We provide the following out of the box integrations:</p>

<ul>
  <li>Spring Integration</li>
  <li>Spring Cloud Stream</li>
  <li>Apache Camel</li>
</ul>

<p>Also we provide all the building blocks to provide a custom integration.</p>

<p>Just by providing the proper dependency</p>

<pre><code>// for Apache Camel
testCompile "io.codearte.accurest:accurest-messaging-camel:${accurestVersion}"
// for Spring Integration
testCompile "io.codearte.accurest:accurest-messaging-integration:${accurestVersion}"
// for Spring Cloud Stream
testCompile "io.codearte.accurest:accurest-messaging-stream:${accurestVersion}"
</code></pre>

<p>Your generated tests should just work.</p>

<h2 id="stub-runner-boot">Stub Runner Boot</h2>

<p>I’ve added a new module of <a href="https://codearte.github.io/accurest/#stub-runner-boot">Stub Runner</a> that operates on Spring Boot. Assuming that you’re using Spring Cloud Stream you can create a project that has 2 dependencies:</p>

<pre><code>compile "io.codearte.accurest:stub-runner-boot:${accurestVersion}"
compile "io.codearte.accurest:stub-runner-messaging-stream:${accurestVersion}"
</code></pre>

<p>Now if you pass the proper <a href="https://codearte.github.io/accurest/#common-properties-for-junit-and-spring">Stub Runner Spring configuration</a> e.g.:</p>

<pre><code>stubrunner.stubs.ids: io.codearte.accurest.stubs:streamService
</code></pre>

<p>You will have a running app that exposes HTTP endpoints to</p>

<ul>
  <li>trigger messages</li>
  <li>check the URLs of the registered WireMock stubs</li>
</ul>

<h2 id="accurest-maven-plugin">Accurest Maven Plugin</h2>

<p>Mariusz Smykuła has done a fantastic job by adding the <a href="https://codearte.github.io/accurest-maven-plugin/">Accurest Maven Plugin</a>. Now you can add Accurest to your project that runs with Maven. But that’s not all since the Maven Plugin allows you to run the Accurest stubs using the <code>accurest:run</code> command!</p>

<p>Read the <a href="https://codearte.github.io/accurest-maven-plugin/">docs</a> to know more!</p>

<h2 id="stub-runner-changes">Stub Runner changes</h2>

<h3 id="messaging">Messaging</h3>

<p>With messaging coming as a feature I’ve added a bunch of messaging modules. You can read more about the <a href="https://codearte.github.io/accurest/#stub-runner-for-messaging">Stub Runner messaging modules here</a></p>

<h3 id="fixed-ports-and-versions-of-stubs">Fixed ports and versions of stubs</h3>

<p>Another feature that was missing and is really valuable is that now you can explicitly say that you want a particular dependency to be started at a given port. This feature is available since version <code>1.0.7</code> but the stub id has been changed in <code>1.1.0.M4</code> so be warned ;)</p>

<p>The ids have changed because now you can provide the desired version of the stub that you want to download.</p>

<h4 id="via-properties">Via properties</h4>

<p>Now you can provide the id of a stub like this:</p>

<pre><code>groupId:artifactId:version:classifier:port
</code></pre>

<p>where version, classifier and port are optional.</p>

<ul>
  <li>If you don’t provide the port then a random one will be picked</li>
  <li>If you don’t provide the classifier then the default one will be taken.</li>
  <li>If you don’t provide the version then the + will be passed and the latest one will be downloaded</li>
</ul>

<p>Where port means the port of the WireMock server.</p>

<p>So if you provide your dependency like this:</p>

<pre><code>stubrunner.stubs.ids: io.codearte.accurest.stubs:streamService:0.0.1-SNAPSHOT:stubs:9090,io.codearte.accurest.stubs:anotherService:+:9095
</code></pre>

<p>It will make Stub Runner:</p>

<ul>
  <li>download a stub with groupId: <code>io.codearte.accurest.stubs</code>, artifactId: <code>streamService</code>, version: <code>0.0.1-SNAPSHOT</code>, classifier: <code>stubs</code> and register it at port 9090</li>
  <li>download a stub with groupId: <code>io.codearte.accurest.stubs</code>, artifactId: <code>anotherService</code>, latest version, default classifier (<code>stubs</code>) and register it at port 9095</li>
</ul>

<h4 id="via-fluent-api">Via fluent API</h4>

<p>When using the AccurestRule you can add a stub to download and then pass the port for the last downloaded stub.</p>

<pre><code>@ClassRule public static AccurestRule rule = new AccurestRule()
                .repoRoot(repoRoot())
                .downloadStub("io.codearte.accurest.stubs", "loanIssuance")
                .withPort(12345)
                .downloadStub("io.codearte.accurest.stubs:fraudDetectionServer:12346");
</code></pre>

<p>You can see that for this example the following test is valid:</p>

<pre><code>then(rule.findStubUrl("loanIssuance")).isEqualTo(URI.create("https://localhost:12345").toURL());
then(rule.findStubUrl("fraudDetectionServer")).isEqualTo(URI.create("https://localhost:12346").toURL());
</code></pre>

<h2 id="technical-changes">Technical changes</h2>

<p>Apart from features we’ve done some technical refactoring.</p>

<h3 id="grape---aether">Grape -&gt; Aether</h3>

<p>I’ve migrated the mechanism used to download dependencies from Groovy Grape to Aether. We had a lot of issues with Grape and Aether works very well for now. That’s a backwards incompatible change so if you had some custom Grape configuration then you’ll have to port it to Aether.</p>

<h3 id="dependencies-fixed">Dependencies fixed</h3>

<p>We had some problems with explicit and transitive dependencies that got fixed. The Accurest jars should be smaller.</p>

<h3 id="summary">Summary</h3>

<ul>
  <li>A lot work was done around Accurest and CDC</li>
  <li>Quite soon we’ll release the 1.1.0 version</li>
  <li>You can use stubs of your dependencies that communicate over messaging</li>
  <li>You can use fixed ports and versions for your dependencies</li>
  <li>If you like the project star it on <a href="https://github.com/Codearte/accurest">Github</a> :) That will give us additional boost of energy to spend on coding instead of sleeping ;)</li>
</ul>

<h3 id="links">Links</h3>

<ul>
  <li><a href="https://github.com/Codearte/accurest">Accurest Github Repository</a></li>
  <li><a href="https://codearte.github.io/accurest">Accurest Documentation</a></li>
  <li><a href="https://codearte.github.io/accurest/#stub-runner">Stub Runner Documentation</a></li>
  <li><a href="https://codearte.github.io/accurest/#stub-runner-for-messaging">Stub Runner Messaging Documentation</a></li>
  <li><a href="https://gitter.im/Codearte/accurest">Accurest Gitter</a></li>
  <li><a href="https://github.com/Codearte/accurest-maven-plugin">Accurest Maven Plugin</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest docs updated]]></title>
    <link href="https://toomuchcoding.com/articles/2016/04/25/accurest-docs-updated/"/>
    <updated>2016-04-25T21:49:59+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/04/25/accurest-docs-updated</id>
    <content type="html"><![CDATA[<p>After a lot of sleepless nights I’ve finally migrated the <a href="https://codearte.github.io/accurest/">Accurest Docs</a> from Github’s Wiki to Asciidoctor.
With that change the vast majority of our snippets is taken from the tests. Also thanks to that change it will be much easier to keep the docs up to date
since the documentation lives together with the code.</p>

<p>Quite frankly recently when I didn’t code <a href="https://github.com/spring-cloud/spring-cloud-sleuth">Spring Cloud Sleuth</a> I did a lot around <a href="https://codearte.github.io/accurest/">Accurest</a> and messaging so stay tuned! For sure there will be a new post about Consumer Driven Contracts and Messaging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert 0.4.0 released]]></title>
    <link href="https://toomuchcoding.com/articles/2016/04/14/json-assert-0-dot-4-0-released/"/>
    <updated>2016-04-14T05:10:51+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/04/14/json-assert-0-dot-4-0-released</id>
    <content type="html"><![CDATA[<p>I’m pleased to announce that JSON Assert version 0.4.0 got released! The following feature has been added</p>

<ul>
  <li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/8">Retrieving value basing on the JSON Path</a></li>
</ul>

<!-- more -->

<h2 id="retrieving-value-basing-on-the-json-path">Retrieving value basing on the JSON Path</h2>

<p>Wouldn’t it be great to retrieve the value from the JSON via the JSON Path? There you go!</p>

<pre><code class="language-groovy">given:
    String json = ''' [ {
                            "some" : {
                                "nested" : {
                                    "json" : "with value",
                                    "anothervalue": 4,
                                    "withlist" : [
                                        { "name" :"name1"} ,
                                        {"name": "name2"},
                                        {"anothernested": { "name": "name3"} }
                                    ]
                                }
                            }
                        },
                        {
                            "someother" : {
                                "nested" : {
                                    "json" : true,
                                    "anothervalue": 4,
                                    "withlist" : [
                                        { "name" :"name1"} , {"name": "name2"}
                                    ],
                                    "withlist2" : [
                                        "a", "b"
                                    ]
                                }
                            }
                        }
                    ]
'''
    expect:
        JsonPath.builder(json).array().field("some").field("nested").field("json").read(String) == 'with value'
        JsonPath.builder(json).array().field("some").field("nested").field("anothervalue").read(Integer) == 4
        assertThat(json).array().field("some").field("nested").array("withlist").field("name").read(List) == ['name1', 'name2']
        assertThat(json).array().field("someother").field("nested").array("withlist2").read(List) == ['a', 'b']
        assertThat(json).array().field("someother").field("nested").field("json").read(Boolean) == true
</code></pre>

<p>The <code>JsonVerifiable</code> extends the <code>JsonReader</code> that allows you to call the <code>read(Class&lt;T&gt; clazz)</code> method to retrieve the value from the JSON basing on the JSON Path.</p>

<h2 id="contact">Contact</h2>

<p>Remember that JSON Assert has its own <a href="https://gitter.im/marcingrzejszczak/jsonassert">Gitter channel</a> so in case of questions do not hesitate to contact me there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UpToDate Gradle Plugin migrated]]></title>
    <link href="https://toomuchcoding.com/articles/2016/04/11/uptodate-gradle-plugin-migrated/"/>
    <updated>2016-04-11T13:28:43+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/04/11/uptodate-gradle-plugin-migrated</id>
    <content type="html"><![CDATA[<p>Time for another release here at <a href="https://toomuchcoding.com">Too Much Coding blog</a>! This time it will be a short post :) I’m happy to announce that the <a href="https://github.com/marcingrzejszczak/uptodate-gradle-plugin">UpToDate Gradle Plugin</a> has finally found a new home!</p>

<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>Since my leaving the company owning the original UpToDate Gradle Plugin repository, the project is almost not maintained at all. For quite a long time any development was done mostly by me and actually I was the author of most of the its code (like in the case of <a href="/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a> ). That’s why I’ve decided to fork the code, repackage it and start versioning from 1.0.0.</p>

<h2 id="what-is-uptodate-gradle-plugin">What is UpToDate Gradle Plugin?</h2>

<p>Gradle plugin that tells you what libs have new versions on Maven Central, so when you come back to a project, you know what you can update.</p>

<h2 id="how-to-use-it">How to use it?</h2>

<h3 id="step-1-add-dependency-to-maven-central-and-to-the-plugin">Step 1: Add dependency to Maven Central and to the plugin</h3>

<pre><code> buildscript {
     repositories {
         mavenCentral()
     }
     dependencies {
         classpath 'com.toomuchcoding:uptodate-gradle-plugin:1.0.0'
     }
 }
</code></pre>

<h3 id="step-2-add-the-plugin-to-your-build-gradlebuild">Step 2: Add the plugin to your build (gradle.build)</h3>

<pre><code> apply plugin: 'com.toomuchcoding.uptodate'
</code></pre>

<p>And now you can run the plugin with</p>

<pre><code> gradle uptodate
</code></pre>

<h3 id="step-3-read-the-readme-">Step 3: Read the readme ;)</h3>

<p>For more information just read the project’s <a href="https://github.com/marcingrzejszczak/uptodate-gradle-plugin">Readme</a>.</p>

<h2 id="how-to-migrate-to-comtoomuchcodinguptodate-gradle-plugin">How to migrate to <code>com.toomuchcoding:uptodate-gradle-plugin</code>?</h2>

<p>If you’re using the old version of the code just change</p>

<pre><code>com.ofg
</code></pre>

<p>into</p>

<pre><code>com.toomuchcoding
</code></pre>

<p>and that should be it :) Oh, and change the version. I’m starting versioning from 1.0.0.</p>

<h2 id="ive-got-questions---where-to-contact-you">I’ve got questions - where to contact you?</h2>

<p>Talk to me at the <a href="https://gitter.im/marcingrzejszczak/uptodate-gradle-plugin">project’s Gitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AccuREST Stub Runner Released]]></title>
    <link href="https://toomuchcoding.com/articles/2016/04/06/accurest-stubrunner-released/"/>
    <updated>2016-04-06T11:05:58+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/04/06/accurest-stubrunner-released</id>
    <content type="html"><![CDATA[<p>It’s been a good release time recently! I’m blogging here at <a href="https://toomuchcoding.com">Too Much Coding blog</a> more about releases then about any concrete topics ;)</p>

<p>After releasing <a href="/blog/2016/03/25/spring-cloud-sleuth-rc1-deployed/">Spring Cloud Sleuth as a part of Brixton RC1</a> we have just released a version 1.0.4 of <a href="https://github.com/Codearte/accurest">AccuREST</a>. We’ve fixed a couple
of bugs but we’ve introduced a couple of big features including:</p>

<ul>
  <li><a href="https://github.com/Codearte/accurest-maven-plugin">Maven plugin support</a></li>
  <li><em>Stub Runner</em> functionality</li>
</ul>

<p>This post will describe the latter feature in more depth.</p>

<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>I’ve given quite a few talks about the library called <a href="https://github.com/4finance/micro-infra-spring">Micro-Infra-Spring</a> where I presented how you can profit from the <em>Stub Runner</em> functionality. Since my leaving the company owning that repository, the project is almost not maintained at all. For quite a long time any development was done mostly by me and actually I was the author of most of the <em>Stub Runner’s</em> code. Due to the aforementioned and the fact that <em>Stub Runner</em> is tightly coupled with AccuREST’s stub generation feature I’ve decided to migrate it to the AccuREST’s repository.</p>

<h2 id="accurest-recap">AccuREST recap</h2>

<p><em>Stub Runner</em> is tightly coupled with the concepts coming from AccuREST. For more information about AccuREST you can check my <a href="/blog/categories/accurest/">blog entries</a> or check <a href="https://github.com/Codearte/accurest">AccuREST project on Github</a>. If you don’t have a clue what that is I’ll try to do a very fast recap.</p>

<p>AccuREST is a <a href="https://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a> verifier in which you define the contract of your API via a Groovy DSL. From that DSL, on the server side, tests are created to check if your contract is telling the truth. From the <em>Stub Runner’s</em> perspective more interesting is the client side. For the client side AccuREST generates WireMock stubs from the provided DSL so that the clients of that API can be provided with reliable stubs.</p>

<h2 id="what-is-stub-runner">What is Stub Runner?</h2>

<p>Now that we remember what AccuREST does we can take a look in more depth at <em>Stub Runner</em>. Let’s assume that we have a following flow of services (btw. <a href="https://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">this is a screenshot from Zipkin integrated with Spring Cloud Sleuth</a> )</p>

<p><img src="/images/accurest/stubrunner/dependencies_accurest.png" alt="Dependencies" /></p>

<p>Let’s imagine ourselves as developers of the <em>service2</em> - the one that calls <em>service3</em> and <em>service4</em>. Since we’re doing the CDC (<a href="https://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a>) approach let’s assume that the stubs of <em>service3</em> and <em>service4</em> got already deployed to some Maven repository.</p>

<p>If I’m writing integration tests of <em>service2</em> I’ll for sure have some points of interaction with <em>service3</em> and <em>service4</em>. Most likely in the majority of cases I’ll just mock those interactions in my code but it would be valuable to have a real HTTP call done to the other application. Of course I don’t want to download both services and run them only for integration tests - that would be an overkill. That’s why the most preferable solution at this point would be to run the stubs of my collaborators.</p>

<p>Since I’m too lazy to do things manually I’d prefer the stubs to be automatically downloaded for me, the WireMock servers started and fed with the stub definitions.</p>

<p>And that’s exactly what <em>Stub Runner</em> can do for you!</p>

<h2 id="how-does-it-work">How does it work?</h2>

<h3 id="concept">Concept</h3>

<p><a href="https://github.com/Codearte/accurest/wiki/8.-Stub-Runner">Stub Runner</a> at its core is using Groovy’s Grape mechanism to download the stubs from a given Maven repository. Next it unpacks them to a temporary folder. Let’s assume that you have the following structure of your WireMock stubs inside the stub JAR (example for a <code>service3-stubs.jar</code>)</p>

<pre><code>├── META-INF
│   └── MANIFEST.MF
└── mappings
    └── service3
        ├── shouldMarkClientAsFraud.json
        ├── notAWireMockMapping.json
        └── shouldSayHello.json
</code></pre>

<p><em>Stub Runner</em> will scan the whole unpacked JAR for any <code>.json</code> files. There is a convention that stub definitions are placed under the <code>mappings</code> folder. So it will pick <code>shouldMarkClientAsFraud.json</code>, <code>notAWireMockMapping.json</code> and <code>shouldSayHello.json</code> files.</p>

<p>Next, a WireMock instance is started for each dependency and every found JSON is attempted to be parsed as a WireMock stub definition. Any exceptions at this point are ignored (so assuming that <code>notAWireMockMapping.json</code> is not a valid WireMock definition, the exception will be suppressed). In our scenario 2 WireMock servers will be started - one for <code>service3</code> and one for <code>service4</code>.</p>

<p>That way you don’t have to copy the stubs manually. The stubs are centralized since they are stored in a Maven repository. It’s extremely important cause <em>Stub Runner</em> downloads always the newest version of the stubs so you can be sure that your tests will break the moment someone does an incompatible change.</p>

<h3 id="api">API</h3>

<p>From the developer’s perspective there are only a handful of <em>Stub Runner’s</em> classes that should be used. In the majority of cases you will use the following ones:</p>

<h4 id="stubfinder">StubFinder</h4>

<p>An interface that allows you to find the URL of the started WireMock instance. You can find that URL by
passing the Ivy notation (<code>groupId:artifactId</code>) or just the <code>artifactId</code> - <em>Stub Runner</em> will try to take care of the rest.</p>

<pre><code class="language-groovy">interface StubFinder {
  /**
   * For the given groupId and artifactId tries to find the matching
   * URL of the running stub.
   *
   * @param groupId - might be null. In that case a search only via artifactId takes place
   * @return URL of a running stub or null if not found
   */
  URL findStubUrl(String groupId, String artifactId)

  /**
   * For the given Ivy notation {@code groupId:artifactId} tries to find the matching
   * URL of the running stub. You can also pass only {@code artifactId}.
   *
   * @param ivyNotation - Ivy representation of the Maven artifact
   * @return URL of a running stub or null if not found
   */
  URL findStubUrl(String ivyNotation)

  /**
   * Returns all running stubs
   */
  RunningStubs findAllRunningStubs()
}
</code></pre>

<h4 id="runningstubs">RunningStubs</h4>

<p>A structure representing the already running stubs. Give you some helper methods to retrieve Ivy representation of a particular stub, find a port for a stub etc.</p>

<p><img src="/images/accurest/stubrunner/running_stubs.png" alt="RunningStubs" /></p>

<h4 id="stubrunning">StubRunning</h4>

<p>A contract for classes that can run the stubs:</p>

<pre><code class="language-groovy">interface StubRunning extends Closeable, StubFinder {
  /**
   * Runs the stubs and returns the {@link RunningStubs}
   */
  RunningStubs runStubs()

}
</code></pre>

<h4 id="stubrunner">StubRunner</h4>

<p>Represents a single instance of ready-to-run stubs. It can run the stubs and will return the running instance of WireMock wrapped in <code>RunningStubs</code> class. Since it’s implementing <code>StubFinder</code> can also be queried if the current groupid and artifactid are matching the corresponding running stub.</p>

<h4 id="batchstubrunner">BatchStubRunner</h4>

<p>If you have multiple services for which you want to run the WireMocks with stubs it’s enough to use <code>BatchStubRunner</code>. It iterates over the given <code>Iterable</code> of <code>StubRunner</code> and executes the logic on each of them.</p>

<h2 id="running-stub-runner">Running Stub Runner</h2>

<p>In all the examples below let’s assume that the stubs are stored in the Maven repository available under <code>https://toomuchcoding.com</code> URL. As <em>service2</em> I’d like to download the stubs of <code>com.toomuchcoding:service3</code> and
<code>com.toomuchcoding:service4</code> services.</p>

<h3 id="stub-runner-as-a-fat-jar">Stub Runner as a fat JAR</h3>

<h4 id="how-to-use-it">How to use it?</h4>

<p><em>Stub Runner</em> comes with a main class (<code>io.codearte.accurest.stubrunner.StubRunnerMain</code>) which you can run with the following options:</p>

<pre><code> -maxp (--maxPort) N            : Maximum port value to be assigned to the
                                  Wiremock instance. Defaults to 15000
                                  (default: 15000)
 -minp (--minPort) N            : Minimal port value to be assigned to the
                                  Wiremock instance. Defaults to 10000
                                  (default: 10000)
 -s (--stubs) VAL               : Comma separated list of Ivy representation of
                                  jars with stubs. Eg. groupid:artifactid1,group
                                  id2:artifactid2:classifier
 -sr (--stubRepositoryRoot) VAL : Location of a Jar containing server where you
                                  keep your stubs (e.g. https://nexus.net/content
                                  /repositories/repository)
 -ss (--stubsSuffix) VAL        : Suffix for the jar containing stubs (e.g.
                                  'stubs' if the stub jar would have a 'stubs'
                                  classifier for stubs: foobar-stubs ).
                                  Defaults to 'stubs' (default: stubs)
 -wo (--workOffline)            : Switch to work offline. Defaults to 'false'
                                  (default: false)

</code></pre>

<p>You can run that main class from IDE or build yourself a fat JAR. To do that just call the following command:</p>

<pre><code>./gradlew stub-runner-root:stub-runner:shadowJar -PfatJar
</code></pre>

<p>Then inside the <code>build/lib</code> there will be a fat JAR with classifier <code>fatJar</code> waiting for you to execute.</p>

<p>Coming back to our example once the fat JAR is built I would just call the following command the retrieve the stubs of <em>service3</em> and <em>service4</em> from the Maven repository available at <code>https://toomuchcoding.com</code>.</p>

<pre><code>java -jar stub-runner-1.0.4-SNAPSHOT-fatJar.jar -sr https://toomuchcoding.com -s com.toomuchcoding:service3:stubs,com.toomuchcoding.service4
</code></pre>
<h4 id="when-to-use-it">When to use it?</h4>

<p>Running <em>Stub Runner</em> as a main class makes most sense when you’re running some fast smoke tests on a deployed application where you don’t want to download and run all the collaborators of that application. For more rationale behind such an approach you can check my article about <a href="/blog/2015/09/26/microservice-deployment/">Microservice Deployment</a></p>

<h3 id="stub-runner-junit-rule">Stub Runner JUnit Rule</h3>

<h4 id="how-to-use-it-1">How to use it?</h4>

<p>You can use the <em>Stub Runner’s</em> JUnit rule to automatically download and run the stubs during your tests. The <code>AccurestRule</code> implements the <code>StubFinder</code> interface thus you can easily find the URLs of the services that you’re interested in.</p>

<p>This is how you could do it with Spock:</p>

<pre><code class="language-groovy">class SomeSpec extends Specification {

  @ClassRule @Shared AccurestRule rule = new AccurestRule()
      .repoRoot('https://toomuchcoding.com')
      .downloadStub("com.toomuchcoding", "service3")
      .downloadStub("com.toomuchcoding:service4")

  def 'should do something useful when service3 is called'() {
        given:
            URL service3Url = rule.findStubUrl('com.toomuchcoding', 'service3')
        expect:
            somethingUseful(service3Url)
    }

  def 'should do something even more useful when service4 is called'() {
        given:
            URL service4Url = rule.findStubUrl('service4')
        expect:
            somethingMoreUseful(service4Url)
    }
}
</code></pre>

<p>or with plain Java JUnit:</p>

<pre><code>public class SomeTest {

  @ClassRule public static AccurestRule rule = new AccurestRule()
      .repoRoot("https://toomuchcoding.com")
      .downloadStub("com.toomuchcoding", "service3")
      .downloadStub("com.toomuchcoding:service4");

  @Test
  public void should_do_something_useful_when_service3_is_called() {
        URL service3Url = rule.findStubUrl("com.toomuchcoding", "service3");

        somethingUseful(service3Url);
  }

  @Test
  public void should_do_something_even_more_useful_when_service4_is_called() {
        URL service4Url = rule.findStubUrl("service4");

        somethingMoreUseful(service4Url);
  }
}
</code></pre>

<h4 id="when-to-use-it-1">When to use it?</h4>

<p>You can use this rule in any place you want to if we don’t provide any integration with an existing framework.</p>

<h3 id="stub-runner-spring">Stub Runner Spring</h3>

<h4 id="how-to-use-it-2">How to use it?</h4>

<p>You can use the <em>Stub Runner’s</em> Spring configuration to download the stubs of your collaborators and run the WireMock server upon Spring context booting. We’re providing the <code>StubRunnerConfiguration</code> that you can import in your tests. In that configuration we’re registering a <code>StubFinder</code> bean that you can autowire in your tests.</p>

<p>Having the following <code>application.yaml</code> file:</p>

<pre><code class="language-yml">stubrunner.stubs.repository.root: https://toomuchcoding.com
stubrunner.stubs.ids: com.toomuchcoding:service3:stubs,com.toomuchcoding.service4
</code></pre>

<p>This is how you could do it with Spock</p>

<pre><code class="language-groovy">@ContextConfiguration(classes = Config, loader = SpringApplicationContextLoader)
class StubRunnerConfigurationSpec extends Specification {

  @Autowired StubFinder stubFinder

  def 'should do something useful when service3 is called'() {
      given:
          URL service3Url = stubFinder.findStubUrl('com.toomuchcoding', 'service3')
      expect:
          somethingUseful(service3Url)
  }

  def 'should do something even more useful when service4 is called'() {
      given:
          URL service4Url = stubFinder.findStubUrl('service4')
      expect:
          somethingMoreUseful(service4Url)
  }

  @Configuration
  @Import(StubRunnerConfiguration)
  @EnableAutoConfiguration
  static class Config {}

}
</code></pre>

<h4 id="when-to-use-it-2">When to use it?</h4>

<p>In your tests if you have Spring and don’t have Spring Cloud. Also you can add it in compile time (of course you would have to add some Spring profiles so as not to run it on production) to profit from a “developer” mode of running microservices. That means that if you boot up your application to click around it - all the stubs around you would have already been downloaded and started.</p>

<h3 id="stub-runner-spring-cloud">Stub Runner Spring Cloud</h3>

<h4 id="how-to-use-it-3">How to use it?</h4>

<p>You can use the <em>Stub Runner’s</em> Spring Cloud configuration to profit from the stubbed collaborators when using Spring Cloud’s abstractions over service discovery and when you’re using Netflix Ribbon. <em>Stub Runner Spring Cloud</em> configuration is an <code>AutoConfiguration</code> so it’s automatically started for you.</p>

<p>Let’s assume that you’re referring to <em>service3</em> as <code>service3</code> in your code and to <em>service4</em> as <code>shouldMapThisNameToService4</code>. That means that you’re using for example the <code>@LoadBalanced</code> <code>RestTemplate</code> in the following way (don’t use field injection as I do in this example!!):</p>

<pre><code class="language-groovy">@Component
class SomeClass {

  @Autowired @LoadBalanced RestTemplate restTemplate

  void doSth() {
    // code...
    String service3Response = restTemplate.getForObject('https://service3/name', String)
    String service4Response = restTemplate.getForObject('https://shouldMapThisNameToService4/name', String)
    // more code...
  }

}
</code></pre>

<p>If the service Id that you’re using to call other services maps exactly to the name of the artifact Id in a Maven repository then you’re lucky and don’t have to do anything to find your running stubs. If however that’s not the case - don’t worry, you’ll just have to map it yourself.</p>

<p>The <code>stubrunner.stubs.idsToServiceIds</code> property is the root path to a map in which the <em>key</em> is the <em>artifactID</em> of the downloaded stub and the <em>value</em> is the <em>serviceId</em> used in the code.</p>

<p>Having the following <code>application.yaml</code> file:</p>

<pre><code class="language-yml">stubrunner.stubs.repository.root: https://toomuchcoding.com
stubrunner.stubs.ids: com.toomuchcoding:service3:stubs,com.toomuchcoding.service4

stubrunner.stubs.idsToServiceIds:
  service4: shouldMapThisNameToService4
</code></pre>

<p>This is how you could do it with Spock</p>

<pre><code class="language-groovy">@ContextConfiguration(classes = Config, loader = SpringApplicationContextLoader)
class StubRunnerConfigurationSpec extends Specification {

  @Autowired SomeClass someClass

  def 'should not explode'() {
      when:
          someClass.doSth()
      expect:
          noExceptionThrown()
  }

  @Configuration
  @EnableAutoConfiguration
  static class Config {}

}
</code></pre>

<h4 id="when-to-use-it-3">When to use it?</h4>

<p>When you’re using Spring Cloud. You can profit from <code>Stub Runner Spring Cloud</code> also in “developer” mode as presented in the <code>Stub Runner Spring</code> section.</p>

<h3 id="additional-configuration-options">Additional Configuration Options</h3>

<p>You can set the default value of the Maven repository by means of a system property:</p>

<pre><code>-Dstubrunner.stubs.repository.root=https://your.maven.repo.com
</code></pre>

<p>The list of configurable properties contains:</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Default value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>stubrunner.port.range.min</td>
      <td>10000</td>
      <td>Minimal value of a port for a WireMock server</td>
    </tr>
    <tr>
      <td>stubrunner.port.range.max</td>
      <td>15000</td>
      <td>Maximum value of a port for a WireMock server</td>
    </tr>
    <tr>
      <td>stubrunner.stubs.repository.root</td>
      <td> </td>
      <td>Address to your M2 repo (will point to local M2 repo if none is provided)</td>
    </tr>
    <tr>
      <td>stubrunner.stubs.classifier</td>
      <td>stubs</td>
      <td>Default classifier for the JARs containing stubs</td>
    </tr>
    <tr>
      <td>stubrunner.work-offline</td>
      <td>false</td>
      <td>Should try to connect to any repo to download stubs (useful if there’s no internet)</td>
    </tr>
    <tr>
      <td>stubrunner.stubs</td>
      <td> </td>
      <td>Default comma separated list of stubs to download</td>
    </tr>
  </tbody>
</table>

<h2 id="summary">Summary</h2>

<p><em>Stub Runner</em>:</p>

<ul>
  <li>Has already proven to be a very useful tool when doing CDC.</li>
  <li>Was battle tested and more companies are declaring their interest in using it.</li>
  <li>Helps you produce an API that should make both sides (server and the client) equally happy (or unhappy but still they’re both equal in their emotions ;) ).</li>
  <li>Is language / technology agnostic - you can run it as a fat JAR, use it with Spring, Guice or whatever you want.</li>
  <li>Helps you speed up the feedback cycle both from the API design and the compatibility perspective.</li>
</ul>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://github.com/Codearte/accurest">AccuREST Github Repository</a></li>
  <li><a href="https://github.com/Codearte/accurest/wiki/8.-Stub-Runner">Stub Runner WIKI</a></li>
  <li><a href="https://gitter.im/Codearte/accurest">AccuREST Gitter</a></li>
  <li><a href="https://github.com/Codearte/accurest-maven-plugin">AccuREST Maven Plugin</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert 0.3.0 released]]></title>
    <link href="https://toomuchcoding.com/articles/2016/03/27/json-assert-0-dot-3-0-released/"/>
    <updated>2016-03-27T23:17:21+02:00</updated>
    <id>https://toomuchcoding.com/articles/2016/03/27/json-assert-0-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>I’m pleased to announce that JSON Assert version 0.3.0 got released! The following features have been added</p>

<ul>
  <li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/6">Building String JSON Path</a></li>
  <li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/7">Pass fields as array of Strings</a></li>
</ul>

<p>and in 0.2.2 the <a href="https://github.com/marcingrzejszczak/jsonassert/issues/5">annoying warning message got removed</a></p>

<!-- more -->

<h2 id="building-string-json-path">Building String JSON Path</h2>

<p>Writing JSON Paths to assert JSON is no fun at all… That’s why JSON Assert was created in the first place.
One doesn’t always want to use this library to perform assertions though. But what one wants to profit from
is the fluent interface to create the JSON Path expression.</p>

<p>That’s why with 0.3.0 you can use the new class called <code>JsonPath</code>. It has a single static method <code>builder()</code>
with which you can… well… build the JSON Path. Remember to call <code>jsonPath()</code> to get its String value.</p>

<p>So for instance running this code:</p>

<p><code>JsonPath.builder().field("some").field("nested").field("anothervalue").isEqualTo(4).jsonPath()</code></p>

<p>would result in creating the following String JSON Path representation:</p>

<p><code>$.some.nested[?(@.anothervalue == 4)]</code></p>

<p>Other examples:</p>

<pre><code>JsonPath.builder().field("some").field("nested").array("withlist").contains("name").isEqualTo("name1").jsonPath() === '''$.some.nested.withlist[*][?(@.name == 'name1')]'''
JsonPath.builder().field("some").field("nested").field("json").isEqualTo("with \"val'ue").jsonPath() === '''$.some.nested[?(@.json == 'with "val\\'ue')]'''
JsonPath.builder().field("some", "nested", "json").isEqualTo("with \"val'ue").jsonPath() === '''$.some.nested[?(@.json == 'with "val\\'ue')]'''
</code></pre>

<h2 id="pass-fields-as-array-of-strings">Pass fields as array of Strings</h2>

<p>This is a small, handy feature that allows you to write less code. Often you iterate over a JSON that has plenty of fields. With the 0.3.0 release
instead of writing:</p>

<p><code>assertThat(json).field("some").field("nested").field("json").isEqualTo("with \"val'ue")</code></p>

<p>you can write</p>

<p><code>assertThat(json1).field("some", "nested", "json").isEqualTo("with \"val'ue")</code></p>

<p>You get a method that allows you to traverse the JSON fields by passing an array of field names.</p>

<h2 id="contact">Contact</h2>

<p>Remember that JSON Assert has its own <a href="https://gitter.im/marcingrzejszczak/jsonassert">Gitter channel</a> so in case of questions do not hesitate to contact me there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Sleuth RC1 deployed]]></title>
    <link href="https://toomuchcoding.com/articles/2016/03/25/spring-cloud-sleuth-rc1-deployed/"/>
    <updated>2016-03-25T14:18:22+01:00</updated>
    <id>https://toomuchcoding.com/articles/2016/03/25/spring-cloud-sleuth-rc1-deployed</id>
    <content type="html"><![CDATA[<p>On the 24.03.2016 we’ve managed to move our <a href="https://spring.io/blog/2016/03/24/spring-cloud-brixton-rc1-is-now-available">release train called Brixton to the next station: RC1</a>.
I’m really happy about this cause it cost us a lot of energy but it was worth it!</p>

<p>I’m recently mostly focusing on the <a href="https://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">Spring Cloud Sleuth project</a> and actually quite gigantic changes happened there since the M5 release. In this short post I’ll show you the rationale and describe briefly the features related to span naming and customizations related to span propagation.</p>

<!-- more -->

<h2 id="what-is-spring-cloud-sleuth">What is Spring Cloud Sleuth?</h2>

<p>For those who don’t know what Spring Cloud Sleuth is - it’s a library that implements a distributed tracing solution for Spring Cloud. You can check its code at <a href="https://github.com/spring-cloud/spring-cloud-sleuth">Github</a>.</p>

<p>We’re also trying to be aligned with the concepts, terminology and approaches present in the <a href="https://opentracing.io/">OpenTracing Project</a>.</p>

<h2 id="distributed-tracing-terminology">Distributed tracing terminology</h2>

<p>I’ll quote the <a href="https://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">documentation</a> to present some of the basic concepts of distributed tracing.</p>

<blockquote>
  <p><em>Span</em>: The basic unit of work. For example, sending an RPC is a new span, as is sending a response to an RPC. Span’s are identified by a unique 64-bit ID for the span and another 64-bit ID for the trace the span is a part of. Spans also have other data, such as descriptions, timestamped events, key-value annotations (tags), the ID of the span that caused them, and process ID’s (normally IP address).</p>

  <p>Spans are started and stopped, and they keep track of their timing information. Once you create a span, you must stop it at some point in the future.</p>

  <p><em>Trace</em>: A set of spans forming a tree-like structure. For example, if you are running a distributed big-data store, a trace might be formed by a put request.</p>

  <p><em>Annotation</em>: is used to record existence of an event in time. Some of the core annotations used to define the start and stop of a request are:</p>

  <ul>
    <li>
      <p><em>cs</em> - Client Sent - The client has made a request. This annotation depicts the start of the span.</p>
    </li>
    <li>
      <p><em>sr</em> - Server Received - The server side got the request and will start processing it. If one subtracts the cs timestamp from this timestamp one will receive the network latency.</p>
    </li>
    <li>
      <p><em>ss</em> - Server Sent - Annotated upon completion of request processing (when the response got sent back to the client). If one subtracts the sr timestamp from this timestamp one will receive the time needed by the server side to process the request.</p>
    </li>
    <li>
      <p><em>cr</em> - Client Received - Signifies the end of the span. The client has successfully received the response from the server side. If one subtracts the cs timestamp from this timestamp one will receive the whole time needed by the client to receive the response from the server.</p>
    </li>
  </ul>
</blockquote>

<p>Ok since now we’re on the same page with the terminology let’s see what’s new in Sleuth.</p>

<h2 id="span-creation-and-naming">Span creation and naming</h2>

<h3 id="rationale">Rationale</h3>

<p>A really big problem that is there in the distributed tracing world is the issue related to naming spans. Actually that topic can be looked at from two angles.</p>

<p>First one is related to what the name of the span should look like. Should be a long and descriptive name or quite the contrary? As we write in the documentation:</p>

<blockquote>
  <p>The name should be low cardinality (e.g. not include identifiers).</p>
</blockquote>

<p>Finding the name for the span is not that big of a problem from library’s perspective. You just pass on to a span whatever the user provides. But what about the situations in which some operation is deferred in time? Or scheduled at certain intervals?</p>

<p>Second one is related to a bigger issue: for the sake of consistency of passing tracing data, should we enforce creating spans? Should we be <em>eager</em> with that or allow the user to control span creation? Cause in that way we can have a problem how to name this artificial instance.</p>

<p>For RC1 we’ve decided that we will be eager in creating span names - but <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/180">we will come back to the topic in the future releases</a>.</p>

<h3 id="naming-spans">Naming spans</h3>

<p>Ok so we know the why, now let’s move to the how… There is quite a lot of instrumentation going on in Sleuth so sometimes the names of spans could sound artificial (e.g. <em>async</em> for asynchronous operations). When talking about runnables and callables often you’re dealing with code similar to this one:</p>

<pre><code>Runnable runnable = new Runnable() {
	@Override public void run() {
		// perform logic
	}
});
Future&lt;?&gt; future = executorService.submit(runnable);
// ... some additional logic ...
future.get();
</code></pre>

<p>What the <code>Runnable</code> is an operation that you would like to wrap in a span. What should be the name of that span? How can you pass it to the <code>Tracer</code> so that the span name is set?</p>

<p>To answer those issues we’ve introduced two approaches</p>

<ul>
  <li>a <code>@SpanName</code> annotation for an explicit class that implements <code>Runnable</code> or <code>Callable</code></li>
  <li><code>toString()</code> method resolution of an anonymous instance of either of those interfaces</li>
</ul>

<p>Most likely in the future releases <code>@SpanName</code> or its modification will be used more heavily to provide explicit names of spans.</p>

<p>Anyways examples could look like those in the documentation. Example for <code>@SpanName</code> annotated class:</p>

<pre><code>@SpanName("calculateTax")
class TaxCountingRunnable implements Runnable {

	@Override public void run() {
		// perform logic
	}
}
</code></pre>

<p>and an anonymous instance:</p>

<pre><code>new TraceRunnable(tracer, spanNamer, new Runnable() {
	@Override public void run() {
		// perform logic
	}

	@Override public String toString() {
		return "calculateTax";
	}
});
</code></pre>

<p>Both will have the same span name. Remember that both <code>Runnables</code> should be wrapped in a <code>TraceRunnable</code> instance.</p>

<h3 id="customization-of-span-propagation">Customization of span propagation</h3>

<p>It’s pretty obvious that there’s a lot of companies that have already created some form of distributed tracing instrumentation. In Spring Cloud Sleuth we’re expecting the tracing headers to be containing certain names like <code>X-B3-TraceId</code> for the trace id containing headers or <code>X-B3-SpanId</code> for the span related one.</p>

<p>One of the first issues that we’ve created was related to <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/19">support configurable header names</a> but actually we’ve developed it quite late. Anyways with RC1 it’s possible to customize Sleuth in such a way that it’s compatible with your system’s nomenclature. Let’s define two terms before we go any further - <code>Injector</code> and <code>Extractor</code>.</p>

<h4 id="injectors">Injectors</h4>

<p>In Spring Cloud Sleuth an <code>Injector</code> is actually a functional interface called <code>SpanInjector</code>. It has the following method:</p>

<pre><code>void inject(Span span, T carrier);
</code></pre>

<p>Its purpose is to take whatever is necessary from a <code>span</code> and
inject it to the <code>carrier</code>. Let’s assume that in your system you don’t set the headers for trace id with the name <code>X-B3-TraceId</code> but you call it <code>correlationId</code> and <code>mySpanId</code> for <code>X-B3-SpanId</code>. Then you would have to override the behavior of Sleuth by registering a custom implementation of the <code>SpanInjector</code>. Let’s look at the following snippets from the documentation:</p>

<pre><code>class CustomHttpServletResponseSpanInjector implements SpanInjector&lt;HttpServletResponse&gt; {

	@Override
	public void inject(Span span, HttpServletResponse carrier) {
		carrier.addHeader("correlationId", Span.idToHex(span.getTraceId()));
		carrier.addHeader("mySpanId", Span.idToHex(span.getSpanId()));
		// inject the rest of Span values to the header
	}
}
</code></pre>

<p>Note that this approach will work with Zipkin only if your values that you’re passing are Zipkin-compatible. That means that the IDs are 64bit numbers.</p>

<p>Also you may wonder why do we convert values using <code>Span.idToHex</code>. We’ve decided that we want the values of ids in the logs and in the message headers to be the very same values as the one that you can later see in Zipkin. That way you can just copy the value and put it into Zipkin to debug your system.</p>

<p>Once you have the <code>SpanInjector</code> you have to register it as a bean with <code>@Primary</code> annotation as presented below:</p>

<pre><code>@Bean
@Primary
SpanInjector&lt;HttpServletResponse&gt; customHttpServletResponseSpanInjector() {
	return new CustomHttpServletResponseSpanInjector();
}
</code></pre>

<h4 id="extractors">Extractors</h4>

<p>In Spring Cloud Sleuth an <code>Extractor</code> is actually a functional interface called <code>SpanExtractor</code>. It has the following method:</p>

<pre><code>Span joinTrace(T carrier);
</code></pre>

<p>Its purpose is to create a Span from the provided carrier. Let’s have the same assumption as with the <code>SpanInjector</code> and let’s consider a case where traceId header is named <code>correlationId</code> and spanId header is <code>mySpanId</code>. Then we customize the Spring context by providing our own implementation of the <code>SpanExtractor</code>:</p>

<pre><code>class CustomHttpServletRequestSpanExtractor implements SpanExtractor&lt;HttpServletRequest&gt; {

	@Override
	public Span joinTrace(HttpServletRequest carrier) {
		long traceId = Span.hexToId(carrier.getHeader("correlationId"));
		long spanId = Span.hexToId(carrier.getHeader("mySpanId"));
		// extract all necessary headers
		Span.SpanBuilder builder = Span.builder().traceId(traceId).spanId(spanId);
		// build rest of the Span
		return builder.build();
	}
}
</code></pre>

<p>Again note that we’re considering that the values are Zipkin compatible (64bit values for ids). Also note that we’ve assumed that the ids are sent in a hexadecimal form like they are presented in the Zipkin UI. That’s why we used the <code>Span.hexToId</code> method to convert it back to long again.</p>

<h2 id="summary">Summary</h2>

<p>In this very short post you could see two quite big features available in the RC1 release. You can check <a href="https://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">Spring Cloud Sleuth documentation</a> for more information about the integrations and configurations of Sleuth. Actually you can check all the things that have changed in the RC1 release by checking the <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues?q=is%3Aissue+is%3Aclosed+milestone%3A1.0.0.RC1">closed issues</a> and <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pulls?q=is%3Apr+milestone%3A1.0.0.RC1+is%3Aclosed">merged PRs</a>.</p>

<p>In case of any questions do not hesitate to ping us on the <a href="https://gitter.im/spring-cloud/spring-cloud-sleuth">Gitter channel</a> or <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues">file an issue on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert 0.2.1 released]]></title>
    <link href="https://toomuchcoding.com/articles/2016/03/11/json-assert-0-dot-2-1-released/"/>
    <updated>2016-03-11T23:33:30+01:00</updated>
    <id>https://toomuchcoding.com/articles/2016/03/11/json-assert-0-dot-2-1-released</id>
    <content type="html"><![CDATA[<p>I’m pleased to announce that JSON Assert version 0.2.1 got released! The following features have been added</p>

<ul>
  <li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/2">AssertJ support</a></li>
  <li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/3">Bumped up JSON Path to 2.2.0</a></li>
  <li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/4">Fixed a bug related to chars escaping</a></li>
  <li>I’ve changed README.md to README.ascidoc</li>
</ul>

<!-- more -->

<h1 id="breaking-changes">Breaking changes</h1>

<p>I’ve changed the groupId and packages of the library so you have to do the migration of both.</p>

<h2 id="groupid">GroupId</h2>

<p>Was:</p>

<pre><code>com.blogspot.toomuchcoding
</code></pre>

<p>Is:</p>

<pre><code>com.toomuchcoding.jsonassert
</code></pre>

<h2 id="package">Package</h2>

<p>Was:</p>

<pre><code>com.blogspot.toomuchcoding.jsonassert
</code></pre>

<p>Is:</p>

<pre><code>com.toomuchcoding.jsonassert
</code></pre>

<h1 id="btw">BTW</h1>

<p>I’ve created a new page on the website <a href="/oss/">OSS</a>. You can check out which OSS projects I’ve created or have contributed sth there.
If you don’t care - just ignore it ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Blogspot welcome Octopress!]]></title>
    <link href="https://toomuchcoding.com/articles/2016/03/03/goodbye-blogspot-welcome-octopress/"/>
    <updated>2016-03-03T22:53:26+01:00</updated>
    <id>https://toomuchcoding.com/articles/2016/03/03/goodbye-blogspot-welcome-octopress</id>
    <content type="html"><![CDATA[<p>I’m more than happy to announce that I’ve finally migrated from Blogspot to a decent
blogging technology - Octopress! Thanks to <a href="https://tomaszdziurko.pl/">Tomek Dziurko</a> who
was the one that suggested to choose that technology.</p>

<p>Also as you can see I’ve finally bought a domain for the <em>Too Much Coding blog</em> which is
<a href="https://toomuchcoding.com">https://toomuchcoding.com</a>. I don’t even know why I’m
writing it since you can see the address in your browser ;) You can also send me an email
at <em>blog (at) toomuchcoding.com</em>.</p>

<p>Even though initially I had some doubts about choosing Octopress I have to admit that
it seems like an awesome technology and you should definitely give it a try!</p>

<p>P.S.
We’re looking for sponsors for the upcoming <a href="https://warsaw.gr8days.pl">Warsaw GR8 Day Conference</a> (19.03.2016).
Over 60 people have already registered! Contact us to be a part of this gr8 event!</p>
]]></content>
  </entry>
  
</feed>
