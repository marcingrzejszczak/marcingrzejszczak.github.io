<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TOO MUCH CODING]]></title>
  <link href="http://toomuchcoding.com/atom.xml" rel="self"/>
  <link href="http://toomuchcoding.com/"/>
  <updated>2018-06-25T13:51:07+02:00</updated>
  <id>http://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract in the Polyglot World]]></title>
    <link href="http://toomuchcoding.com/blog/2018/02/13/spring-cloud-contract-in-the-polyglot-world/"/>
    <updated>2018-02-13T21:39:51+01:00</updated>
    <id>http://toomuchcoding.com/blog/2018/02/13/spring-cloud-contract-in-the-polyglot-world</id>
    <content type="html"><![CDATA[<p>I have just published a new article about Spring Cloud Contract in a polyglot world at the Spring Blog. <a href="https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world">You can check it out here!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery of a Startup]]></title>
    <link href="http://toomuchcoding.com/blog/2017/12/03/continuous-delivery-of-a-startup/"/>
    <updated>2017-12-03T07:11:22-05:00</updated>
    <id>http://toomuchcoding.com/blog/2017/12/03/continuous-delivery-of-a-startup</id>
    <content type="html"><![CDATA[<p>Hi!</p>

<p>After a very long pause, finally I&rsquo;ve managed to write a new blog post. It&rsquo;s an interview with <a href="https://twitter.com/jkubrynski">Jakub Kubryński</a> about Continuous Delivery of a Startup. It&rsquo;s published as part of the <a href="https://www.javaadvent.com/2017/12/cd-of-a-startup.html">Java Advent Calendar</a>.</p>

<p>Check it out <a href="https://www.javaadvent.com/2017/12/cd-of-a-startup.html">here!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Project - Spring Cloud Pipelines]]></title>
    <link href="http://toomuchcoding.com/blog/2016/10/18/new-project-spring-cloud-pipelines/"/>
    <updated>2016-10-18T19:29:24+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/10/18/new-project-spring-cloud-pipelines</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just published an article at the Spring blog about the creation of a new project called <a href="https://spring.io/blog/2016/10/18/spring-cloud-pipelines">Spring Cloud Pipelines</a>.</p>

<h1>Why?</h1>

<p>Why a new project? Cause we&rsquo;ve been all doing repetitive work. <a href="http://toomuchcoding.com/blog/2015/09/27/microservice-deployment/">Check out this post</a> where I write about creation of
a deployment pipeline. Every company does it and wastes money and resource on it. In Pivotal
our goal is to give developers tools they need to deliver features as fast as possible.</p>

<p><a href="http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html">Spring Cloud Pipelines</a> gives you an opinionated deployment pipeline. You can use it straight away, you can modify it. Do whatever you please :)</p>

<h1>Demo</h1>

<p>The repo is setup with a demo for Concourse CI and Jenkins. Read the docs how to set it up for each of those tools. The deployment is done via Cloud Foundry. For the sake of demo we&rsquo;re using PCF Dev.</p>

<h1>Links</h1>

<ul>
<li><a href="http://cloud.spring.io/spring-cloud-pipelines/">Project page</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html">Project documentation</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#concourse">Concourse opinionated pipeline setup</a></li>
<li><a href="http://concourse.ci">Concourse Website</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html#jenkins">Jenkins opinionated pipeline setup</a></li>
<li><a href="https://github.com/jenkinsci/job-dsl-plugin/wiki">Jenkins Job Dsl Plugin</a></li>
<li><a href="https://gitter.im/spring-cloud/spring-cloud-pipelines">Spring Cloud Pipelines Gitter</a></li>
<li><a href="https://github.com/spring-cloud/spring-cloud-pipelines">Spring Cloud Pipelines GitHub page</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract Podcast]]></title>
    <link href="http://toomuchcoding.com/blog/2016/10/07/spring-cloud-contract-podcast/"/>
    <updated>2016-10-07T23:14:36+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/10/07/spring-cloud-contract-podcast</id>
    <content type="html"><![CDATA[<p>A podcast with Michael Cote and me about Spring Cloud Contract was just published. <a href="https://soundcloud.com/pivotalconversations/037-microservices-governance-with-spring-cloud-contract-guest-marcin-grzejszczak">You can check it out here!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 1.0.0.RELEASE Available!]]></title>
    <link href="http://toomuchcoding.com/blog/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/"/>
    <updated>2016-09-24T20:39:25+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/09/23/spring-cloud-contract-1-0-0-release-is-available">Spring Cloud Contract 1.0.0.RELEASE is available</a>.</p>

<p>I&rsquo;m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal&rsquo;s Spring Cloud branding. Let&rsquo;s look at some numbers:</p>

<ul>
<li>first commit almost 2 years ago: <a href="https://github.com/spring-cloud/spring-cloud-contract/commit/dfaddaa98d645b818ba3947c9267ef7ac8ed9ba4">2014-12-06 18:20:29 by Jakub Kubrynski</a> - thanks to <a href="http://codearte.eu">Codearte</a> the authors of <a href="http://devskiller.com">DevSkiller</a> for their support!!!</li>
<li><a href="https://github.com/spring-cloud/spring-cloud-contract/commits/master">1.152 commits</a></li>
<li><a href="https://github.com/spring-cloud/spring-cloud-contract/graphs/contributors">20 contributors</a></li>
</ul>


<p>That&rsquo;s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract.</p>

<!-- more -->


<h2>What&rsquo;s new in comparison to Accurest?</h2>

<p>Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes?</p>

<ul>
<li>we&rsquo;ve moved from Grapes to Aether to download stubs</li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_what_is_this_value_consumer_producer">we generate fake data when you provide either consumer or producer in the DSL</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts">Consumer Contract approach is there</a></li>
<li>Spring Cloud Contract is available on <a href="http://start.spring.io">start.spring.io</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2">you can have more than one base class for your tests</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_additional_configuration">Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud</a></li>
<li>the whole build was moved from Gradle to the standard Spring Cloud Maven setup</li>
</ul>


<p>These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_wiremock">Spring Cloud Contract WireMock support</a> and <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_generating_stubs_using_restdocs">Spring Cloud Contract RestDocs</a>. Thanks to the first one the integration with <a href="http://wiremock.org">WireMock</a> is much more efficient and thanks to the latter you don&rsquo;t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test.</p>

<p>As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts">Consumer Contract support</a> and that <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2">you can have more than one base class for your tests</a>. Let&rsquo;s take a closer look what&rsquo;s there in the docs about them&hellip;</p>

<h3>Consumer Contract support</h3>

<p>Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes.</p>

<h4>Repo structure</h4>

<p>Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── com
</span><span class='line'>│   └── example
</span><span class='line'>│       └── server
</span><span class='line'>│           ├── client1
</span><span class='line'>│           │   └── expectation.groovy
</span><span class='line'>│           ├── client2
</span><span class='line'>│           │   └── expectation.groovy
</span><span class='line'>│           ├── client3
</span><span class='line'>│           │   └── expectation.groovy
</span><span class='line'>│           └── pom.xml
</span><span class='line'>├── mvnw
</span><span class='line'>├── mvnw.cmd
</span><span class='line'>├── pom.xml
</span><span class='line'>└── src
</span><span class='line'>    └── assembly
</span><span class='line'>        └── contracts.xml</span></code></pre></td></tr></table></div></figure>


<p>As you can see the under the slash-delimited groupid / artifact id folder (<code>com/example/server</code>) you have expectations of the 3 consumers (<code>client1</code>, <code>client2</code> and <code>client3</code>). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo.</p>

<p>Example of a <code>pom.xml</code> inside the <code>server</code> folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>
</span><span class='line'>  &lt;groupId&gt;com.example&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;server&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
</span><span class='line'>
</span><span class='line'>  &lt;name&gt;Server Stubs&lt;/name&gt;
</span><span class='line'>  &lt;description&gt;POM used to install locally stubs for consumer side&lt;/description&gt;
</span><span class='line'>
</span><span class='line'>  &lt;parent&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.4.0.BUILD-SNAPSHOT&lt;/version&gt;
</span><span class='line'>      &lt;relativePath /&gt;
</span><span class='line'>  &lt;/parent&gt;
</span><span class='line'>
</span><span class='line'>  &lt;properties&gt;
</span><span class='line'>      &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
</span><span class='line'>      &lt;java.version&gt;1.8&lt;/java.version&gt;
</span><span class='line'>      &lt;spring-cloud-contract.version&gt;1.0.1.BUILD-SNAPSHOT&lt;/spring-cloud-contract.version&gt;
</span><span class='line'>      &lt;spring-cloud-dependencies.version&gt;Camden.BUILD-SNAPSHOT&lt;/spring-cloud-dependencies.version&gt;
</span><span class='line'>  &lt;/properties&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependencyManagement&gt;
</span><span class='line'>      &lt;dependencies&gt;
</span><span class='line'>          &lt;dependency&gt;
</span><span class='line'>              &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
</span><span class='line'>              &lt;type&gt;pom&lt;/type&gt;
</span><span class='line'>              &lt;scope&gt;import&lt;/scope&gt;
</span><span class='line'>          &lt;/dependency&gt;
</span><span class='line'>      &lt;/dependencies&gt;
</span><span class='line'>  &lt;/dependencyManagement&gt;
</span><span class='line'>
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
</span><span class='line'>              &lt;extensions&gt;true&lt;/extensions&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;!-- By default it would search under src/test/resources/ --&gt;
</span><span class='line'>                  &lt;contractsDirectory&gt;${project.basedir}&lt;/contractsDirectory&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;
</span><span class='line'>
</span><span class='line'>  &lt;repositories&gt;
</span><span class='line'>      &lt;repository&gt;
</span><span class='line'>          &lt;id&gt;spring-snapshots&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Spring Snapshots&lt;/name&gt;
</span><span class='line'>          &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
</span><span class='line'>          &lt;snapshots&gt;
</span><span class='line'>              &lt;enabled&gt;true&lt;/enabled&gt;
</span><span class='line'>          &lt;/snapshots&gt;
</span><span class='line'>      &lt;/repository&gt;
</span><span class='line'>      &lt;repository&gt;
</span><span class='line'>          &lt;id&gt;spring-milestones&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Spring Milestones&lt;/name&gt;
</span><span class='line'>          &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
</span><span class='line'>          &lt;snapshots&gt;
</span><span class='line'>              &lt;enabled&gt;false&lt;/enabled&gt;
</span><span class='line'>          &lt;/snapshots&gt;
</span><span class='line'>      &lt;/repository&gt;
</span><span class='line'>      &lt;repository&gt;
</span><span class='line'>          &lt;id&gt;spring-releases&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Spring Releases&lt;/name&gt;
</span><span class='line'>          &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
</span><span class='line'>          &lt;snapshots&gt;
</span><span class='line'>              &lt;enabled&gt;false&lt;/enabled&gt;
</span><span class='line'>          &lt;/snapshots&gt;
</span><span class='line'>      &lt;/repository&gt;
</span><span class='line'>  &lt;/repositories&gt;
</span><span class='line'>  &lt;pluginRepositories&gt;
</span><span class='line'>      &lt;pluginRepository&gt;
</span><span class='line'>          &lt;id&gt;spring-snapshots&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Spring Snapshots&lt;/name&gt;
</span><span class='line'>          &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
</span><span class='line'>          &lt;snapshots&gt;
</span><span class='line'>              &lt;enabled&gt;true&lt;/enabled&gt;
</span><span class='line'>          &lt;/snapshots&gt;
</span><span class='line'>      &lt;/pluginRepository&gt;
</span><span class='line'>      &lt;pluginRepository&gt;
</span><span class='line'>          &lt;id&gt;spring-milestones&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Spring Milestones&lt;/name&gt;
</span><span class='line'>          &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
</span><span class='line'>          &lt;snapshots&gt;
</span><span class='line'>              &lt;enabled&gt;false&lt;/enabled&gt;
</span><span class='line'>          &lt;/snapshots&gt;
</span><span class='line'>      &lt;/pluginRepository&gt;
</span><span class='line'>      &lt;pluginRepository&gt;
</span><span class='line'>          &lt;id&gt;spring-releases&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Spring Releases&lt;/name&gt;
</span><span class='line'>          &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
</span><span class='line'>          &lt;snapshots&gt;
</span><span class='line'>              &lt;enabled&gt;false&lt;/enabled&gt;
</span><span class='line'>          &lt;/snapshots&gt;
</span><span class='line'>      &lt;/pluginRepository&gt;
</span><span class='line'>  &lt;/pluginRepositories&gt;
</span><span class='line'>
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run <code>mvn clean install -DskipTests</code> to locally install stubs of the producer project.</p>

<p>The <code>pom.xml</code> in the root folder can look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>       xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>
</span><span class='line'>  &lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;contracts&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
</span><span class='line'>
</span><span class='line'>  &lt;name&gt;Contracts&lt;/name&gt;
</span><span class='line'>  &lt;description&gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&lt;/description&gt;
</span><span class='line'>
</span><span class='line'>  &lt;properties&gt;
</span><span class='line'>      &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
</span><span class='line'>  &lt;/properties&gt;
</span><span class='line'>
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;executions&gt;
</span><span class='line'>                  &lt;execution&gt;
</span><span class='line'>                      &lt;id&gt;contracts&lt;/id&gt;
</span><span class='line'>                      &lt;phase&gt;prepare-package&lt;/phase&gt;
</span><span class='line'>                      &lt;goals&gt;
</span><span class='line'>                          &lt;goal&gt;single&lt;/goal&gt;
</span><span class='line'>                      &lt;/goals&gt;
</span><span class='line'>                      &lt;configuration&gt;
</span><span class='line'>                          &lt;attach&gt;true&lt;/attach&gt;
</span><span class='line'>                          &lt;descriptor&gt;${basedir}/src/assembly/contracts.xml&lt;/descriptor&gt;
</span><span class='line'>                          &lt;!-- If you want an explicit classifier remove the following line --&gt;
</span><span class='line'>                          &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;
</span><span class='line'>                      &lt;/configuration&gt;
</span><span class='line'>                  &lt;/execution&gt;
</span><span class='line'>              &lt;/executions&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;
</span><span class='line'>
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
</span><span class='line'>        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>        xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd"&gt;
</span><span class='line'>  &lt;id&gt;project&lt;/id&gt;
</span><span class='line'>  &lt;formats&gt;
</span><span class='line'>      &lt;format&gt;jar&lt;/format&gt;
</span><span class='line'>  &lt;/formats&gt;
</span><span class='line'>  &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
</span><span class='line'>  &lt;fileSets&gt;
</span><span class='line'>      &lt;fileSet&gt;
</span><span class='line'>          &lt;directory&gt;${project.basedir}&lt;/directory&gt;
</span><span class='line'>          &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;
</span><span class='line'>          &lt;useDefaultExcludes&gt;true&lt;/useDefaultExcludes&gt;
</span><span class='line'>          &lt;excludes&gt;
</span><span class='line'>              &lt;exclude&gt;**/${project.build.directory}/**&lt;/exclude&gt;
</span><span class='line'>              &lt;exclude&gt;mvnw&lt;/exclude&gt;
</span><span class='line'>              &lt;exclude&gt;mvnw.cmd&lt;/exclude&gt;
</span><span class='line'>              &lt;exclude&gt;.mvn/**&lt;/exclude&gt;
</span><span class='line'>              &lt;exclude&gt;src/**&lt;/exclude&gt;
</span><span class='line'>          &lt;/excludes&gt;
</span><span class='line'>      &lt;/fileSet&gt;
</span><span class='line'>  &lt;/fileSets&gt;
</span><span class='line'>&lt;/assembly&gt;</span></code></pre></td></tr></table></div></figure>


<h4>Workflow</h4>

<p>The workflow would look similar to the one presented in the <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_step_by_step_guide_to_cdc">Step by step guide to CDC</a>. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository.</p>

<h4>Consumer</h4>

<p>When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. <code>com/example/server</code>) and runs <code>mvn clean install -DskipTests</code> to install locally the stubs converted from the contracts.</p>

<p><strong>REMEMBER! You need to have Maven installed locally</strong></p>

<h4>Producer</h4>

<p>As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;
</span><span class='line'>  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>  &lt;configuration&gt;
</span><span class='line'>      &lt;contractsRepositoryUrl&gt;http://link/to/your/nexus/or/artifactory/or/sth&lt;/contractsRepositoryUrl&gt;
</span><span class='line'>      &lt;contractDependency&gt;
</span><span class='line'>          &lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;contracts&lt;/artifactId&gt;
</span><span class='line'>      &lt;/contractDependency&gt;
</span><span class='line'>  &lt;/configuration&gt;
</span><span class='line'>&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure>


<p>With this setup the JAR with groupid <code>com.example.standalone</code> and artifactid contracts will be downloaded from <code>http://link/to/your/nexus/or/artifactory/or/sth</code>. It will be then unpacked in a local temporary folder and contracts present under the <code>com/example/server</code> will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done.</p>

<p>The rest of the flow looks the same.</p>

<h3>More than one base class</h3>

<p>That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That&rsquo;s why we&rsquo;ve added a possibility to map a contract to its test base class.</p>

<h4>Gradle</h4>

<p>If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options:</p>

<ul>
<li>follow a convention by providing the <code>packageWithBaseClasses</code></li>
<li>provide explicit mapping via <code>baseClassMappings</code></li>
</ul>


<h5>Convention</h5>

<p>The convention is such that if you have a contract under e.g. <code>src/test/resources/contract/foo/bar/baz/</code> and provide the value of the <code>packageWithBaseClasses</code> property to <code>com.example.base</code> then we will assume that there is a <code>BarBazBase</code> class under <code>com.example.base</code> package. In other words we take last two parts of package if they exist and form a class with a <code>Base</code> suffix. Takes precedence over <code>baseClassForTests</code>. Example of usage in the contracts closure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>packageWithBaseClasses = 'com.example.base'</span></code></pre></td></tr></table></div></figure>


<h5>Mapping</h5>

<p>You can manually map a regular expression of the contract’s <em>package</em> (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>baseClassForTests = "com.example.FooBase"
</span><span class='line'>baseClassMappings {
</span><span class='line'>  baseClassMapping('.*com.*', 'com.example.ComBase')
</span><span class='line'>  baseClassMapping('.*bar.*':'com.example.BarBase')
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let’s assume that you have contracts under</p>

<ul>
<li><code>src/test/resources/contract/com/</code></li>
<li><code>src/test/resources/contract/foo/</code></li>
</ul>


<p>By providing the <code>baseClassForTests</code> we have a fallback in case mapping didn’t succeed (you could also provide the <code>packageWithBaseClasses</code> as fallback). That way the tests generated from <code>src/test/resources/contract/com/</code> contracts will be extending the <code>com.example.ComBase</code> whereas the rest of tests will extend <code>com.example.FooBase</code> cause they don&rsquo;t match the base class mapping for <code>bar</code> folder.</p>

<h4>Maven</h4>

<p>Let&rsquo;s now look how it looks like for Maven.</p>

<h5>Convention</h5>

<p>To accomplish the same result as the one presented for Gradle you&rsquo;d have to set your configuration like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;
</span><span class='line'>  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>  &lt;configuration&gt;
</span><span class='line'>      &lt;packageWithBaseClasses&gt;com.example.base&lt;/packageWithBaseClasses&gt;
</span><span class='line'>  &lt;/configuration&gt;
</span><span class='line'>&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure>


<h5>Mapping</h5>

<p>You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list <code>baseClassMappings</code> of <code>baseClassMapping</code> that takes a <code>contractPackageRegex</code> to <code>baseClassFQN</code> mapping. Let’s take a look at the following example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;
</span><span class='line'>  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>  &lt;configuration&gt;
</span><span class='line'>      &lt;baseClassForTests&gt;com.example.FooBase&lt;/baseClassForTests&gt;
</span><span class='line'>      &lt;baseClassMappings&gt;
</span><span class='line'>          &lt;baseClassMapping&gt;
</span><span class='line'>              &lt;contractPackageRegex&gt;.*com.*&lt;/contractPackageRegex&gt;
</span><span class='line'>              &lt;baseClassFQN&gt;com.example.ComBase&lt;/baseClassFQN&gt;
</span><span class='line'>          &lt;/baseClassMapping&gt;
</span><span class='line'>              &lt;baseClassMapping&gt;
</span><span class='line'>                  &lt;contractPackageRegex&gt;.*bar.*&lt;/contractPackageRegex&gt;
</span><span class='line'>                  &lt;baseClassFQN&gt;com.example.BarBase&lt;/baseClassFQN&gt;
</span><span class='line'>              &lt;/baseClassMapping&gt;
</span><span class='line'>      &lt;/baseClassMappings&gt;
</span><span class='line'>  &lt;/configuration&gt;
</span><span class='line'>&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>In this blog post we&rsquo;ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We&rsquo;ve also checked some history around Accurest to Spring Cloud Contract migration.</p>

<h2>Links</h2>

<p>Here you can find interesting links related to Spring Cloud Contract Verifier:</p>

<ul>
<li><a href="https://github.com/spring-cloud/spring-cloud-contract/">Spring Cloud Contract Github Repository</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/">Spring Cloud Contract Main project page</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html">Spring Cloud Contract Documentation</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_stub_runner">Spring Cloud Contract Stub Runner Documentation</a></li>
<li><a href="https://gitter.im/spring-cloud/spring-cloud-contract">Spring Cloud Contract Gitter</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/">Spring Cloud Contract Maven Plugin Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 1.0.0.M1 Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/"/>
    <updated>2016-07-25T17:07:39+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/07/25/spring-cloud-contract-1-0-0-m1-released">Spring Cloud Contract 1.0.0.M1 Release</a>. Check out the new project formerly known as Accurest!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest Becomes Part of the Spring Cloud Contract]]></title>
    <link href="http://toomuchcoding.com/blog/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract/"/>
    <updated>2016-06-24T18:43:07+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract</id>
    <content type="html"><![CDATA[<p>I&rsquo;m extremely happy to announce that we have successfully rebranded the <a href="https://codearte.github.io/accurest">Accurest project</a>. It&rsquo;s officially become part of the <a href="https://github.com/spring-cloud/spring-cloud-contract">Spring Cloud Contract</a> initiative. Ladies and Gentlemen please welcome the new projects:</p>

<ul>
<li><a href="https://codearte.github.io/accurest/">Spring Cloud Contract Verifier</a></li>
<li><a href="https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner">Spring Cloud Contract Stub Runner</a></li>
</ul>


<!-- more -->


<h2>A little bit of history</h2>

<p>Accurest was created because of lack of an easy-to-use tool for doing <a href="http://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a>. From our production experience the biggest problem was lack of verification that the defined contract actually does what it says it does. We wanted to ensure that from the contract automatically tests are generated so that we can have a proof that the stubs are reliable. Since there was no such tool the first commit of Accurest took place on 12/2014. The very idea and its implementation was initially set by <a href="http://www.kubrynski.com/">Jakub Kubrynski</a> and me. The last available version of Accurest was 1.1.0 released on 06/2016 (the docs for the old version are <a href="https://codearte.github.io/accurest/deprecated/">available here</a>). During these 19 months a lot of feedback has been gathered. The tool has received a lot of very good reception and that made us want to work even harder. Many times we have decided to decrease the time required for sleeping so as to fix a bug or develop a new feature in Accurest.</p>

<h2>Notable features</h2>

<p>Speaking of features, especially quite a few of them definitely makes Accurest stand out on the &ldquo;market&rdquo; of Consumer Driven Contract (CDC) tooling. Out of many the most interesting are:</p>

<ul>
<li>Possibility to do CDC with messaging</li>
<li>Clear and easy to use, statically typed DSL</li>
<li>Possibility to copy paste your current JSON file to the contract and only edit its elements</li>
<li>Automatic generation of tests from the defined Contract</li>
<li>Stub Runner functionality - the stubs are automatically downloaded at runtime from Nexus / Artifactory</li>
<li>Spring Cloud integration - no discovery service is needed for integration tests</li>
</ul>


<p>For more information check out my posts about <a href="http://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a>, <a href="http://toomuchcoding.com/blog/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/">Accurest Messaging</a> or <a href="https://codearte.github.io/accurest/">just read the docs</a>.</p>

<h2>Spring Cloud Contract</h2>

<p>In Pivotal we came to the conclusion that Accurest could become an interesting addition to our Spring Cloud tooling. Due to the increased interest of the community in the Consumer Driven Contracts approach we&rsquo;ve decided to start the <a href="https://github.com/spring-cloud/spring-cloud-contract">Spring Cloud Contract</a> initiative.</p>

<p>Accurest became <em>Spring Cloud Contract Verifier</em> (note: the name might change in the future) but for the time being will remain in the <a href="https://github.com/Codearte">Codearte repository</a>. It&rsquo;s becoming the part of Spring Cloud tooling as a mature tool with a growing community around it. Some arguments for that are that it has:</p>

<ul>
<li><a href="https://codearte.github.io/accurest/">a nice AsciiDoc documentation that was completely rewritten following users' feedback</a></li>
<li><a href="https://gitter.im/Codearte/accurest">active Gitter channel where we try to immediately answer any support questions</a></li>
<li><a href="https://github.com/Codearte/accurest/stargazers">Over 80 stars on Github and counting ;)</a></li>
</ul>


<p>Since we believe very much in the Consumer Driven Contract approach we also want to do the library in a Client Driven way. That means that we (server side) are very open to your feedback (consumer side) and want you be the main driver of changes in the library.</p>

<h2>Credits</h2>

<p>The Accurest project would never come to life without the hard work of the <a href="http://codearte.io">Codearte</a> developers (the order is random):</p>

<ul>
<li><a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li>
<li><a href="http://www.kubrynski.com">Jakub Kubrynski</a></li>
<li><a href="https://solidsoft.wordpress.com/">Marcin Zajaczkowski</a></li>
<li><a href="https://github.com/mariuszs">Mariusz Smykula</a></li>
</ul>


<p>and obviously everybody who has <a href="https://github.com/Codearte/accurest/graphs/contributors">ever commited something to the project</a>.</p>

<h2>Links</h2>

<p>If you want to read more about <em>Spring Cloud Contract Verifier</em> just check out the following links.</p>

<ul>
<li><a href="https://github.com/Codearte/accurest">Spring Cloud Contract Verifier Github Repository</a></li>
<li><a href="http://codearte.github.io/accurest">Spring Cloud Contract Verifier Documentation</a></li>
<li><a href="http://codearte.github.io/accurest/deprecated">Accurest Legacy Documentation</a></li>
<li><a href="https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner">Spring Cloud Contract Stub Runner Documentation</a></li>
<li><a href="http://codearte.github.io/accurest/#stub-runner-for-messaging">Spring Cloud Contract Stub Runner Messaging Documentation</a></li>
<li><a href="https://gitter.im/Codearte/accurest">Spring Cloud Contract Verifier Gitter</a></li>
<li><a href="https://github.com/Codearte/accurest-maven-plugin">Spring Cloud Contract Verifier Maven Plugin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero Downtime Deployment With a Database]]></title>
    <link href="http://toomuchcoding.com/blog/2016/05/31/zero-downtime-deployment-with-a-database/"/>
    <updated>2016-05-31T11:58:52+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/05/31/zero-downtime-deployment-with-a-database</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database">Zero Downtime Deployment with a Database</a>. So if you&rsquo;re planning on doing
zero downtime or blue/green deployment you&rsquo;d better check out that article :) The code is available here on
<a href="https://github.com/spring-cloud-samples/zero-downtime-deployment">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest and Stub Runner 1.1.0.M3]]></title>
    <link href="http://toomuchcoding.com/blog/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/"/>
    <updated>2016-04-30T13:53:44+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3</id>
    <content type="html"><![CDATA[<p>Currently at the Spring Team we&rsquo;re polishing our libraries for the upcoming final release of the Brixton train. It should happen soon :) Until then I&rsquo;m spending a lot of my after work, free time on <a href="http://toomuchcoding.com/blog/2016/04/25/accurest-docs-updated/">Accurest</a> and <a href="http://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a>.</p>

<p>Today&rsquo;s post will be about the new stuff that you will be able to profit from in the upcoming <code>1.1.0</code> release of Accurest. Also you can profit from most of these features in the <code>1.1.0.M3</code> release.</p>

<p>I&rsquo;ll just quickly go through the features but note that you can read about all of them in more depth in our <a href="http://codearte.github.io/accurest">documentation </a>.</p>

<!-- more -->


<h2>Name change</h2>

<p>AccuREST started as a library used to stub HTTP calls. In the upcoming <code>1.1.0</code> release you will be able to stub messaging functionality too. That&rsquo;s why the name changes to Accurest. That&rsquo;s a fantastic name isn&rsquo;t it? ;)</p>

<p>Also since branding is important, now instead of calling <code>io.codearte.accurest.dsl.GroovyDsl</code> you can call <code>io.codearte.accurest.dsl.Accurest</code> :)</p>

<h2>Messaging support</h2>

<p>It took me quite some time to do this but it was worth it :) Several sleepless nights and now you can profit from defining contracts for messaging. In HTTP we had <code>client</code>/<code>stub</code> side and <code>server</code>/<code>test</code> side. For messaging we added methods to help discern the differences:</p>

<ul>
<li><code>publisher</code> the side for which the tests will be generated</li>
<li><code>consumer</code> the side for which the messaging endpoints will be stubbed</li>
</ul>


<h3>Contract</h3>

<p>There are 3 use cases from the message <code>Producer</code>&rsquo;s point of view.</p>

<ul>
<li>something happens in my application and I&rsquo;m producing an output message</li>
<li>someone sends a message to destination (queue/topic), I&rsquo;m listening to that message and will produce an output message somewhere else</li>
<li>someone sends a message to destination (queue/topic), I&rsquo;m listening to that message and will consume it without any message sending</li>
</ul>


<p>Here you can see examples of contracts for those three situations (you can read more about it in the  <a href="http://codearte.github.io/accurest/#messaging-top-level-elements">docs</a> ):</p>

<h4>Output triggered by a method</h4>

<p>The output message can be triggered by calling a method (e.g. a Scheduler was started and a message was sent)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">dsl</span> <span class="o">=</span> <span class="n">Accurest</span><span class="o">.</span><span class="na">make</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Human readable description</span>
</span><span class='line'>        <span class="n">description</span> <span class="s1">&#39;Some description&#39;</span>
</span><span class='line'>        <span class="c1">// Label by means of which the output message can be triggered</span>
</span><span class='line'>        <span class="n">label</span> <span class="s1">&#39;some_label&#39;</span>
</span><span class='line'>        <span class="c1">// input to the contract</span>
</span><span class='line'>        <span class="n">input</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// the contract will be triggered by a method</span>
</span><span class='line'>                <span class="n">triggeredBy</span><span class="o">(</span><span class="s1">&#39;bookReturnedTriggered()&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// output message of the contract</span>
</span><span class='line'>        <span class="n">outputMessage</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// destination to which the output message will be sent</span>
</span><span class='line'>                <span class="n">sentTo</span><span class="o">(</span><span class="s1">&#39;output&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="c1">// the body of the output message</span>
</span><span class='line'>                <span class="n">body</span><span class="o">(</span><span class="s1">&#39;&#39;&#39;{ &quot;bookName&quot; : &quot;foo&quot; }&#39;&#39;&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="c1">// the headers of the output message</span>
</span><span class='line'>                <span class="n">headers</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">header</span><span class="o">(</span><span class="s1">&#39;BOOK-NAME&#39;</span><span class="o">,</span> <span class="s1">&#39;foo&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Output triggered by a message</h4>

<p>The output message can be triggered by receiving a message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">dsl</span> <span class="o">=</span> <span class="n">GroovyDsl</span><span class="o">.</span><span class="na">make</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">description</span> <span class="s1">&#39;Some Description&#39;</span>
</span><span class='line'>        <span class="n">label</span> <span class="s1">&#39;some_label&#39;</span>
</span><span class='line'>        <span class="c1">// input is a message</span>
</span><span class='line'>        <span class="n">input</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// the message was received from this destination</span>
</span><span class='line'>                <span class="n">messageFrom</span><span class="o">(</span><span class="s1">&#39;input&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="c1">// has the following body</span>
</span><span class='line'>                <span class="n">messageBody</span><span class="o">([</span>
</span><span class='line'>                        <span class="nl">bookName:</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>                <span class="o">])</span>
</span><span class='line'>                <span class="c1">// and the following headers</span>
</span><span class='line'>                <span class="n">messageHeaders</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">header</span><span class="o">(</span><span class="s1">&#39;sample&#39;</span><span class="o">,</span> <span class="s1">&#39;header&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">outputMessage</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sentTo</span><span class="o">(</span><span class="s1">&#39;output&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="n">body</span><span class="o">([</span>
</span><span class='line'>                        <span class="nl">bookName:</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>                <span class="o">])</span>
</span><span class='line'>                <span class="n">headers</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">header</span><span class="o">(</span><span class="s1">&#39;BOOK-NAME&#39;</span><span class="o">,</span> <span class="s1">&#39;foo&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>No output, only input</h4>

<p>There can be only input without any output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">dsl</span> <span class="o">=</span> <span class="n">GroovyDsl</span><span class="o">.</span><span class="na">make</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">description</span> <span class="s1">&#39;Some Description&#39;</span>
</span><span class='line'>        <span class="n">label</span> <span class="s1">&#39;some_label&#39;</span>
</span><span class='line'>        <span class="c1">// input is a message</span>
</span><span class='line'>        <span class="n">input</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// the message was received from this destination</span>
</span><span class='line'>                <span class="n">messageFrom</span><span class="o">(</span><span class="s1">&#39;input&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="c1">// has the following body</span>
</span><span class='line'>                <span class="n">messageBody</span><span class="o">([</span>
</span><span class='line'>                        <span class="nl">bookName:</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>                <span class="o">])</span>
</span><span class='line'>                <span class="c1">// and the following headers</span>
</span><span class='line'>                <span class="n">messageHeaders</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">header</span><span class="o">(</span><span class="s1">&#39;sample&#39;</span><span class="o">,</span> <span class="s1">&#39;header&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Producer side</h3>

<p>Here you can see an example of a JUnit generated test for the producer for the input / output scenario:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// given:</span>
</span><span class='line'> <span class="n">AccurestMessage</span> <span class="n">inputMessage</span> <span class="o">=</span> <span class="n">accurestMessaging</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
</span><span class='line'>  <span class="s2">&quot;{\\&quot;</span><span class="n">bookName</span><span class="err">\\</span><span class="s2">&quot;:\\&quot;</span><span class="n">foo</span><span class="err">\\</span><span class="s2">&quot;}&quot;</span>
</span><span class='line'><span class="o">,</span> <span class="n">headers</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s2">&quot;sample&quot;</span><span class="o">,</span> <span class="s2">&quot;header&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// when:</span>
</span><span class='line'> <span class="n">accurestMessaging</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">inputMessage</span><span class="o">,</span> <span class="s2">&quot;input&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// then:</span>
</span><span class='line'> <span class="n">AccurestMessage</span> <span class="n">response</span> <span class="o">=</span> <span class="n">accurestMessaging</span><span class="o">.</span><span class="na">receiveMessage</span><span class="o">(</span><span class="s2">&quot;output&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
</span><span class='line'> <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s2">&quot;BOOK-NAME&quot;</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s2">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// and:</span>
</span><span class='line'> <span class="n">DocumentContext</span> <span class="n">parsedJson</span> <span class="o">=</span> <span class="n">JsonPath</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">accurestObjectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getPayload</span><span class="o">()));</span>
</span><span class='line'> <span class="n">assertThatJson</span><span class="o">(</span><span class="n">parsedJson</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;bookName&quot;</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s2">&quot;foo&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re sending a message to a destination called <code>input</code>. next we&rsquo;re checking if there&rsquo;s a message at the <code>output</code> destination. If that&rsquo;s the case
we&rsquo;re checking if that message has proper headers and body.</p>

<h3>Consumer side</h3>

<p>It&rsquo;s enough to provide the dependency to proper Stub Runner module (check the next section for more information) and tell it which stubs should be downloaded. Yup, that&rsquo;s it! <a href="http://codearte.github.io/accurest/#stub-runner-for-messaging">Stub Runner will download the stubs and prepare stubbed routes</a>.</p>

<p>Sometimes you&rsquo;ll need to trigger a message somehow in your tests. That&rsquo;s why we&rsquo;ve provided the <code>StubTrigger</code> interface that you can inject! If you&rsquo;re already familiar with Stub Runner Spring then you could use the <code>StubFinder</code> bean to find the URL of your dependency. Now <code>StubFinder</code> also extends the <code>StubTrigger</code> interface thus you don&rsquo;t have to inject any additional beans in your tests.</p>

<p>There are multiple ways in which you can trigger a message:</p>

<h4>Trigger by label</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stubFinder</span><span class="o">.</span><span class="na">trigger</span><span class="o">(</span><span class="s1">&#39;return_book_1&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Trigger by group and artifact ids</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stubFinder</span><span class="o">.</span><span class="na">trigger</span><span class="o">(</span><span class="s1">&#39;io.codearte.accurest.stubs:camelService&#39;</span><span class="o">,</span> <span class="s1">&#39;return_book_1&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Trigger by artifact id</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stubFinder</span><span class="o">.</span><span class="na">trigger</span><span class="o">(</span><span class="s1">&#39;camelService&#39;</span><span class="o">,</span> <span class="s1">&#39;return_book_1&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Trigger all messages</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stubFinder</span><span class="o">.</span><span class="na">trigger</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Integrations</h3>

<p>We provide the following out of the box integrations:</p>

<ul>
<li>Spring Integration</li>
<li>Spring Cloud Stream</li>
<li>Apache Camel</li>
</ul>


<p>Also we provide all the building blocks to provide a custom integration.</p>

<p>Just by providing the proper dependency</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// for Apache Camel</span>
</span><span class='line'><span class="n">testCompile</span> <span class="s2">&quot;io.codearte.accurest:accurest-messaging-camel:${accurestVersion}&quot;</span>
</span><span class='line'><span class="c1">// for Spring Integration</span>
</span><span class='line'><span class="n">testCompile</span> <span class="s2">&quot;io.codearte.accurest:accurest-messaging-integration:${accurestVersion}&quot;</span>
</span><span class='line'><span class="c1">// for Spring Cloud Stream</span>
</span><span class='line'><span class="n">testCompile</span> <span class="s2">&quot;io.codearte.accurest:accurest-messaging-stream:${accurestVersion}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your generated tests should just work.</p>

<h2>Stub Runner Boot</h2>

<p>I&rsquo;ve added a new module of <a href="http://codearte.github.io/accurest/#stub-runner-boot">Stub Runner</a> that operates on Spring Boot. Assuming that you&rsquo;re using Spring Cloud Stream you can create a project that has 2 dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">compile</span> <span class="s2">&quot;io.codearte.accurest:stub-runner-boot:${accurestVersion}&quot;</span>
</span><span class='line'><span class="n">compile</span> <span class="s2">&quot;io.codearte.accurest:stub-runner-messaging-stream:${accurestVersion}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you pass the proper <a href="http://codearte.github.io/accurest/#common-properties-for-junit-and-spring">Stub Runner Spring configuration</a> e.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stubrunner</span><span class="o">.</span><span class="na">stubs</span><span class="o">.</span><span class="na">ids</span><span class="o">:</span> <span class="n">io</span><span class="o">.</span><span class="na">codearte</span><span class="o">.</span><span class="na">accurest</span><span class="o">.</span><span class="na">stubs</span><span class="o">:</span><span class="n">streamService</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will have a running app that exposes HTTP endpoints to</p>

<ul>
<li>trigger messages</li>
<li>check the URLs of the registered WireMock stubs</li>
</ul>


<h2>Accurest Maven Plugin</h2>

<p>Mariusz Smykuła has done a fantastic job by adding the <a href="http://codearte.github.io/accurest-maven-plugin/">Accurest Maven Plugin</a>. Now you can add Accurest to your project that runs with Maven. But that&rsquo;s not all since the Maven Plugin allows you to run the Accurest stubs using the <code>accurest:run</code> command!</p>

<p>Read the <a href="http://codearte.github.io/accurest-maven-plugin/">docs</a> to know more!</p>

<h2>Stub Runner changes</h2>

<h3>Messaging</h3>

<p>With messaging coming as a feature I&rsquo;ve added a bunch of messaging modules. You can read more about the <a href="http://codearte.github.io/accurest/#stub-runner-for-messaging">Stub Runner messaging modules here</a></p>

<h3>Fixed ports and versions of stubs</h3>

<p>Another feature that was missing and is really valuable is that now you can explicitly say that you want a particular dependency to be started at a given port. This feature is available since version <code>1.0.7</code> but the stub id has been changed in <code>1.1.0.M4</code> so be warned ;)</p>

<p>The ids have changed because now you can provide the desired version of the stub that you want to download.</p>

<h4>Via properties</h4>

<p>Now you can provide the id of a stub like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nl">groupId:artifactId:version:classifier:</span><span class="n">port</span>
</span></code></pre></td></tr></table></div></figure>


<p>where version, classifier and port are optional.</p>

<ul>
<li>If you don’t provide the port then a random one will be picked</li>
<li>If you don’t provide the classifier then the default one will be taken.</li>
<li>If you don’t provide the version then the + will be passed and the latest one will be downloaded</li>
</ul>


<p>Where port means the port of the WireMock server.</p>

<p>So if you provide your dependency like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stubrunner</span><span class="o">.</span><span class="na">stubs</span><span class="o">.</span><span class="na">ids</span><span class="o">:</span> <span class="n">io</span><span class="o">.</span><span class="na">codearte</span><span class="o">.</span><span class="na">accurest</span><span class="o">.</span><span class="na">stubs</span><span class="o">:</span><span class="nl">streamService:</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="nl">SNAPSHOT:stubs:</span><span class="mi">9090</span><span class="o">,</span><span class="n">io</span><span class="o">.</span><span class="na">codearte</span><span class="o">.</span><span class="na">accurest</span><span class="o">.</span><span class="na">stubs</span><span class="o">:</span><span class="nl">anotherService:</span><span class="o">+:</span><span class="mi">9095</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will make Stub Runner:</p>

<ul>
<li>download a stub with groupId: <code>io.codearte.accurest.stubs</code>, artifactId: <code>streamService</code>, version: <code>0.0.1-SNAPSHOT</code>, classifier: <code>stubs</code> and register it at port 9090</li>
<li>download a stub with groupId: <code>io.codearte.accurest.stubs</code>, artifactId: <code>anotherService</code>, latest version, default classifier (<code>stubs</code>) and register it at port 9095</li>
</ul>


<h4>Via fluent API</h4>

<p>When using the AccurestRule you can add a stub to download and then pass the port for the last downloaded stub.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@ClassRule</span> <span class="kd">public</span> <span class="kd">static</span> <span class="n">AccurestRule</span> <span class="n">rule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AccurestRule</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">repoRoot</span><span class="o">(</span><span class="n">repoRoot</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">downloadStub</span><span class="o">(</span><span class="s2">&quot;io.codearte.accurest.stubs&quot;</span><span class="o">,</span> <span class="s2">&quot;loanIssuance&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withPort</span><span class="o">(</span><span class="mi">12345</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">downloadStub</span><span class="o">(</span><span class="s2">&quot;io.codearte.accurest.stubs:fraudDetectionServer:12346&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that for this example the following test is valid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">then</span><span class="o">(</span><span class="n">rule</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s2">&quot;loanIssuance&quot;</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;http://localhost:12345&quot;</span><span class="o">).</span><span class="na">toURL</span><span class="o">());</span>
</span><span class='line'><span class="n">then</span><span class="o">(</span><span class="n">rule</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s2">&quot;fraudDetectionServer&quot;</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;http://localhost:12346&quot;</span><span class="o">).</span><span class="na">toURL</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Technical changes</h2>

<p>Apart from features we&rsquo;ve done some technical refactoring.</p>

<h3>Grape -> Aether</h3>

<p>I&rsquo;ve migrated the mechanism used to download dependencies from Groovy Grape to Aether. We had a lot of issues with Grape and Aether works very well for now. That&rsquo;s a backwards incompatible change so if you had some custom Grape configuration then you&rsquo;ll have to port it to Aether.</p>

<h3>Dependencies fixed</h3>

<p>We had some problems with explicit and transitive dependencies that got fixed. The Accurest jars should be smaller.</p>

<h3>Summary</h3>

<ul>
<li>A lot work was done around Accurest and CDC</li>
<li>Quite soon we&rsquo;ll release the 1.1.0 version</li>
<li>You can use stubs of your dependencies that communicate over messaging</li>
<li>You can use fixed ports and versions for your dependencies</li>
<li>If you like the project star it on <a href="https://github.com/Codearte/accurest">Github</a> :) That will give us additional boost of energy to spend on coding instead of sleeping ;)</li>
</ul>


<h3>Links</h3>

<ul>
<li><a href="https://github.com/Codearte/accurest">Accurest Github Repository</a></li>
<li><a href="http://codearte.github.io/accurest">Accurest Documentation</a></li>
<li><a href="http://codearte.github.io/accurest/#stub-runner">Stub Runner Documentation</a></li>
<li><a href="http://codearte.github.io/accurest/#stub-runner-for-messaging">Stub Runner Messaging Documentation</a></li>
<li><a href="https://gitter.im/Codearte/accurest">Accurest Gitter</a></li>
<li><a href="https://github.com/Codearte/accurest-maven-plugin">Accurest Maven Plugin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest Docs Updated]]></title>
    <link href="http://toomuchcoding.com/blog/2016/04/25/accurest-docs-updated/"/>
    <updated>2016-04-25T21:49:59+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/04/25/accurest-docs-updated</id>
    <content type="html"><![CDATA[<p>After a lot of sleepless nights I&rsquo;ve finally migrated the <a href="http://codearte.github.io/accurest/">Accurest Docs</a> from Github&rsquo;s Wiki to Asciidoctor.
With that change the vast majority of our snippets is taken from the tests. Also thanks to that change it will be much easier to keep the docs up to date
since the documentation lives together with the code.</p>

<p>Quite frankly recently when I didn&rsquo;t code <a href="https://github.com/spring-cloud/spring-cloud-sleuth">Spring Cloud Sleuth</a> I did a lot around <a href="http://codearte.github.io/accurest/">Accurest</a> and messaging so stay tuned! For sure there will be a new post about Consumer Driven Contracts and Messaging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert 0.4.0 Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/04/13/json-assert-0-dot-4-0-released/"/>
    <updated>2016-04-13T23:10:51-04:00</updated>
    <id>http://toomuchcoding.com/blog/2016/04/13/json-assert-0-dot-4-0-released</id>
    <content type="html"><![CDATA[<p>I&rsquo;m pleased to announce that JSON Assert version 0.4.0 got released! The following feature has been added</p>

<ul>
<li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/8">Retrieving value basing on the JSON Path</a></li>
</ul>


<!-- more -->


<h2>Retrieving value basing on the JSON Path</h2>

<p>Wouldn’t it be great to retrieve the value from the JSON via the JSON Path? There you go!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nl">given:</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39; [ {</span>
</span><span class='line'><span class="s1">                            &quot;some&quot; : {</span>
</span><span class='line'><span class="s1">                                &quot;nested&quot; : {</span>
</span><span class='line'><span class="s1">                                    &quot;json&quot; : &quot;with value&quot;,</span>
</span><span class='line'><span class="s1">                                    &quot;anothervalue&quot;: 4,</span>
</span><span class='line'><span class="s1">                                    &quot;withlist&quot; : [</span>
</span><span class='line'><span class="s1">                                        { &quot;name&quot; :&quot;name1&quot;} ,</span>
</span><span class='line'><span class="s1">                                        {&quot;name&quot;: &quot;name2&quot;},</span>
</span><span class='line'><span class="s1">                                        {&quot;anothernested&quot;: { &quot;name&quot;: &quot;name3&quot;} }</span>
</span><span class='line'><span class="s1">                                    ]</span>
</span><span class='line'><span class="s1">                                }</span>
</span><span class='line'><span class="s1">                            }</span>
</span><span class='line'><span class="s1">                        },</span>
</span><span class='line'><span class="s1">                        {</span>
</span><span class='line'><span class="s1">                            &quot;someother&quot; : {</span>
</span><span class='line'><span class="s1">                                &quot;nested&quot; : {</span>
</span><span class='line'><span class="s1">                                    &quot;json&quot; : true,</span>
</span><span class='line'><span class="s1">                                    &quot;anothervalue&quot;: 4,</span>
</span><span class='line'><span class="s1">                                    &quot;withlist&quot; : [</span>
</span><span class='line'><span class="s1">                                        { &quot;name&quot; :&quot;name1&quot;} , {&quot;name&quot;: &quot;name2&quot;}</span>
</span><span class='line'><span class="s1">                                    ],</span>
</span><span class='line'><span class="s1">                                    &quot;withlist2&quot; : [</span>
</span><span class='line'><span class="s1">                                        &quot;a&quot;, &quot;b&quot;</span>
</span><span class='line'><span class="s1">                                    ]</span>
</span><span class='line'><span class="s1">                                }</span>
</span><span class='line'><span class="s1">                            }</span>
</span><span class='line'><span class="s1">                        }</span>
</span><span class='line'><span class="s1">                    ]</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="nl">expect:</span>
</span><span class='line'>        <span class="n">JsonPath</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="na">array</span><span class="o">().</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;some&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;nested&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;json&quot;</span><span class="o">).</span><span class="na">read</span><span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="o">==</span> <span class="s1">&#39;with value&#39;</span>
</span><span class='line'>        <span class="n">JsonPath</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="na">array</span><span class="o">().</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;some&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;nested&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;anothervalue&quot;</span><span class="o">).</span><span class="na">read</span><span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="na">array</span><span class="o">().</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;some&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;nested&quot;</span><span class="o">).</span><span class="na">array</span><span class="o">(</span><span class="s2">&quot;withlist&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;name&quot;</span><span class="o">).</span><span class="na">read</span><span class="o">(</span><span class="n">List</span><span class="o">)</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;name1&#39;</span><span class="o">,</span> <span class="s1">&#39;name2&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="na">array</span><span class="o">().</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;someother&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;nested&quot;</span><span class="o">).</span><span class="na">array</span><span class="o">(</span><span class="s2">&quot;withlist2&quot;</span><span class="o">).</span><span class="na">read</span><span class="o">(</span><span class="n">List</span><span class="o">)</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">,</span> <span class="s1">&#39;b&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="na">array</span><span class="o">().</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;someother&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;nested&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s2">&quot;json&quot;</span><span class="o">).</span><span class="na">read</span><span class="o">(</span><span class="n">Boolean</span><span class="o">)</span> <span class="o">==</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>JsonVerifiable</code> extends the <code>JsonReader</code> that allows you to call the <code>read(Class&lt;T&gt; clazz)</code> method to retrieve the value from the JSON basing on the JSON Path.</p>

<h2>Contact</h2>

<p>Remember that JSON Assert has its own <a href="https://gitter.im/marcingrzejszczak/jsonassert">Gitter channel</a> so in case of questions do not hesitate to contact me there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UpToDate Gradle Plugin Migrated]]></title>
    <link href="http://toomuchcoding.com/blog/2016/04/11/uptodate-gradle-plugin-migrated/"/>
    <updated>2016-04-11T13:28:43+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/04/11/uptodate-gradle-plugin-migrated</id>
    <content type="html"><![CDATA[<p>Time for another release here at <a href="http://toomuchcoding.com">Too Much Coding blog</a>! This time it will be a short post :) I&rsquo;m happy to announce that the <a href="https://github.com/marcingrzejszczak/uptodate-gradle-plugin">UpToDate Gradle Plugin</a> has finally found a new home!</p>

<!-- more -->


<h2>Introduction</h2>

<p> Since my leaving the company owning the original UpToDate Gradle Plugin repository, the project is almost not maintained at all. For quite a long time any development was done mostly by me and actually I was the author of most of the its code (like in the case of <a href="http://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a> ). That&rsquo;s why I&rsquo;ve decided to fork the code, repackage it and start versioning from 1.0.0.</p>

<h2>What is UpToDate Gradle Plugin?</h2>

<p> Gradle plugin that tells you what libs have new versions on Maven Central, so when you come back to a project, you know what you can update.</p>

<h2>How to use it?</h2>

<h3>Step 1: Add dependency to Maven Central and to the plugin</h3>

<pre><code class="`"> buildscript {
     repositories {
         mavenCentral()
     }
     dependencies {
         classpath 'com.toomuchcoding:uptodate-gradle-plugin:1.0.0'
     }
 }
</code></pre>

<h3>Step 2: Add the plugin to your build (gradle.build)</h3>

<pre><code class="`"> apply plugin: 'com.toomuchcoding.uptodate'
</code></pre>

<p> And now you can run the plugin with</p>

<pre><code class="`"> gradle uptodate
</code></pre>

<h3>Step 3: Read the readme ;)</h3>

<p>For more information just read the project&rsquo;s <a href="https://github.com/marcingrzejszczak/uptodate-gradle-plugin">Readme</a>.</p>

<h2>How to migrate to <code>com.toomuchcoding:uptodate-gradle-plugin</code>?</h2>

<p>If you&rsquo;re using the old version of the code just change</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.ofg</span></code></pre></td></tr></table></div></figure>


<p>into</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.toomuchcoding</span></code></pre></td></tr></table></div></figure>


<p>and that should be it :) Oh, and change the version. I&rsquo;m starting versioning from 1.0.0.</p>

<h2>I&rsquo;ve got questions - where to contact you?</h2>

<p>Talk to me at the <a href="https://gitter.im/marcingrzejszczak/uptodate-gradle-plugin">project&rsquo;s Gitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AccuREST Stub Runner Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/"/>
    <updated>2016-04-06T11:05:58+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a good release time recently! I&rsquo;m blogging here at <a href="http://toomuchcoding.com">Too Much Coding blog</a> more about releases then about any concrete topics ;)</p>

<p>After releasing <a href="http://toomuchcoding.com/blog/2016/03/25/spring-cloud-sleuth-rc1-deployed/">Spring Cloud Sleuth as a part of Brixton RC1</a> we have just released a version 1.0.4 of <a href="https://github.com/Codearte/accurest">AccuREST</a>. We&rsquo;ve fixed a couple
of bugs but we&rsquo;ve introduced a couple of big features including:</p>

<ul>
<li><a href="https://github.com/Codearte/accurest-maven-plugin">Maven plugin support</a></li>
<li><em>Stub Runner</em> functionality</li>
</ul>


<p>This post will describe the latter feature in more depth.</p>

<!-- more -->


<h2>Introduction</h2>

<p>I&rsquo;ve given quite a few talks about the library called <a href="https://github.com/4finance/micro-infra-spring">Micro-Infra-Spring</a> where I presented how you can profit from the <em>Stub Runner</em> functionality. Since my leaving the company owning that repository, the project is almost not maintained at all. For quite a long time any development was done mostly by me and actually I was the author of most of the <em>Stub Runner&rsquo;s</em> code. Due to the aforementioned and the fact that <em>Stub Runner</em> is tightly coupled with AccuREST&rsquo;s stub generation feature I&rsquo;ve decided to migrate it to the AccuREST&rsquo;s repository.</p>

<h2>AccuREST recap</h2>

<p><em>Stub Runner</em> is tightly coupled with the concepts coming from AccuREST. For more information about AccuREST you can check my <a href="http://toomuchcoding.com/blog/categories/accurest/">blog entries</a> or check <a href="https://github.com/Codearte/accurest">AccuREST project on Github</a>. If you don&rsquo;t have a clue what that is I&rsquo;ll try to do a very fast recap.</p>

<p>AccuREST is a <a href="http://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a> verifier in which you define the contract of your API via a Groovy DSL. From that DSL, on the server side, tests are created to check if your contract is telling the truth. From the <em>Stub Runner&rsquo;s</em> perspective more interesting is the client side. For the client side AccuREST generates WireMock stubs from the provided DSL so that the clients of that API can be provided with reliable stubs.</p>

<h2>What is Stub Runner?</h2>

<p>Now that we remember what AccuREST does we can take a look in more depth at <em>Stub Runner</em>. Let&rsquo;s assume that we have a following flow of services (btw. <a href="http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">this is a screenshot from Zipkin integrated with Spring Cloud Sleuth</a> )</p>

<p><img src="http://toomuchcoding.com/images/accurest/stubrunner/dependencies_accurest.png" alt="Dependencies" /></p>

<p>Let&rsquo;s imagine ourselves as developers of the <em>service2</em> - the one that calls <em>service3</em> and <em>service4</em>. Since we&rsquo;re doing the CDC (<a href="http://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a>) approach let&rsquo;s assume that the stubs of <em>service3</em> and <em>service4</em> got already deployed to some Maven repository.</p>

<p>If I&rsquo;m writing integration tests of <em>service2</em> I&rsquo;ll for sure have some points of interaction with <em>service3</em> and <em>service4</em>. Most likely in the majority of cases I&rsquo;ll just mock those interactions in my code but it would be valuable to have a real HTTP call done to the other application. Of course I don&rsquo;t want to download both services and run them only for integration tests - that would be an overkill. That&rsquo;s why the most preferable solution at this point would be to run the stubs of my collaborators.</p>

<p>Since I&rsquo;m too lazy to do things manually I&rsquo;d prefer the stubs to be automatically downloaded for me, the WireMock servers started and fed with the stub definitions.</p>

<p>And that&rsquo;s exactly what <em>Stub Runner</em> can do for you!</p>

<h2>How does it work?</h2>

<h3>Concept</h3>

<p><a href="https://github.com/Codearte/accurest/wiki/8.-Stub-Runner">Stub Runner</a> at its core is using Groovy&rsquo;s Grape mechanism to download the stubs from a given Maven repository. Next it unpacks them to a temporary folder. Let&rsquo;s assume that you have the following structure of your WireMock stubs inside the stub JAR (example for a <code>service3-stubs.jar</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── META-INF
</span><span class='line'>│   └── MANIFEST.MF
</span><span class='line'>└── mappings
</span><span class='line'>    └── service3
</span><span class='line'>        ├── shouldMarkClientAsFraud.json
</span><span class='line'>        ├── notAWireMockMapping.json
</span><span class='line'>        └── shouldSayHello.json</span></code></pre></td></tr></table></div></figure>


<p><em>Stub Runner</em> will scan the whole unpacked JAR for any <code>.json</code> files. There is a convention that stub definitions are placed under the <code>mappings</code> folder. So it will pick <code>shouldMarkClientAsFraud.json</code>, <code>notAWireMockMapping.json</code> and <code>shouldSayHello.json</code> files.</p>

<p>Next, a WireMock instance is started for each dependency and every found JSON is attempted to be parsed as a WireMock stub definition. Any exceptions at this point are ignored (so assuming that <code>notAWireMockMapping.json</code> is not a valid WireMock definition, the exception will be suppressed). In our scenario 2 WireMock servers will be started - one for <code>service3</code> and one for <code>service4</code>.</p>

<p>That way you don&rsquo;t have to copy the stubs manually. The stubs are centralized since they are stored in a Maven repository. It&rsquo;s extremely important cause <em>Stub Runner</em> downloads always the newest version of the stubs so you can be sure that your tests will break the moment someone does an incompatible change.</p>

<h3>API</h3>

<p>From the developer&rsquo;s perspective there are only a handful of <em>Stub Runner&rsquo;s</em> classes that should be used. In the majority of cases you will use the following ones:</p>

<h4>StubFinder</h4>

<p>An interface that allows you to find the URL of the started WireMock instance. You can find that URL by
passing the Ivy notation (<code>groupId:artifactId</code>) or just the <code>artifactId</code> - <em>Stub Runner</em> will try to take care of the rest.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">interface</span> <span class="nc">StubFinder</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * For the given groupId and artifactId tries to find the matching</span>
</span><span class='line'><span class="cm">   * URL of the running stub.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param groupId - might be null. In that case a search only via artifactId takes place</span>
</span><span class='line'><span class="cm">   * @return URL of a running stub or null if not found</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">URL</span> <span class="nf">findStubUrl</span><span class="o">(</span><span class="n">String</span> <span class="n">groupId</span><span class="o">,</span> <span class="n">String</span> <span class="n">artifactId</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * For the given Ivy notation {@code groupId:artifactId} tries to find the matching</span>
</span><span class='line'><span class="cm">   * URL of the running stub. You can also pass only {@code artifactId}.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param ivyNotation - Ivy representation of the Maven artifact</span>
</span><span class='line'><span class="cm">   * @return URL of a running stub or null if not found</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">URL</span> <span class="nf">findStubUrl</span><span class="o">(</span><span class="n">String</span> <span class="n">ivyNotation</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns all running stubs</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">RunningStubs</span> <span class="nf">findAllRunningStubs</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>RunningStubs</h4>

<p>A structure representing the already running stubs. Give you some helper methods to retrieve Ivy representation of a particular stub, find a port for a stub etc.</p>

<p><img src="http://toomuchcoding.com/images/accurest/stubrunner/running_stubs.png" alt="RunningStubs" /></p>

<h4>StubRunning</h4>

<p>A contract for classes that can run the stubs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">interface</span> <span class="nc">StubRunning</span> <span class="kd">extends</span> <span class="n">Closeable</span><span class="o">,</span> <span class="n">StubFinder</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Runs the stubs and returns the {@link RunningStubs}</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">RunningStubs</span> <span class="nf">runStubs</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>StubRunner</h4>

<p>Represents a single instance of ready-to-run stubs. It can run the stubs and will return the running instance of WireMock wrapped in <code>RunningStubs</code> class. Since it&rsquo;s implementing <code>StubFinder</code> can also be queried if the current groupid and artifactid are matching the corresponding running stub.</p>

<h4>BatchStubRunner</h4>

<p>If you have multiple services for which you want to run the WireMocks with stubs it&rsquo;s enough to use <code>BatchStubRunner</code>. It iterates over the given <code>Iterable</code> of <code>StubRunner</code> and executes the logic on each of them.</p>

<h2>Running Stub Runner</h2>

<p>In all the examples below let&rsquo;s assume that the stubs are stored in the Maven repository available under <code>http://toomuchcoding.com</code> URL. As <em>service2</em> I&rsquo;d like to download the stubs of <code>com.toomuchcoding:service3</code> and
<code>com.toomuchcoding:service4</code> services.</p>

<h3>Stub Runner as a fat JAR</h3>

<h4>How to use it?</h4>

<p><em>Stub Runner</em> comes with a main class (<code>io.codearte.accurest.stubrunner.StubRunnerMain</code>) which you can run with the following options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="o">-</span><span class="n">maxp</span> <span class="o">(--</span><span class="n">maxPort</span><span class="o">)</span> <span class="n">N</span>            <span class="o">:</span> <span class="n">Maximum</span> <span class="n">port</span> <span class="n">value</span> <span class="n">to</span> <span class="n">be</span> <span class="n">assigned</span> <span class="n">to</span> <span class="n">the</span>
</span><span class='line'>                                  <span class="n">Wiremock</span> <span class="n">instance</span><span class="o">.</span> <span class="n">Defaults</span> <span class="n">to</span> <span class="mi">15000</span>
</span><span class='line'>                                  <span class="o">(</span><span class="k">default</span><span class="o">:</span> <span class="mi">15000</span><span class="o">)</span>
</span><span class='line'> <span class="o">-</span><span class="n">minp</span> <span class="o">(--</span><span class="n">minPort</span><span class="o">)</span> <span class="n">N</span>            <span class="o">:</span> <span class="n">Minimal</span> <span class="n">port</span> <span class="n">value</span> <span class="n">to</span> <span class="n">be</span> <span class="n">assigned</span> <span class="n">to</span> <span class="n">the</span>
</span><span class='line'>                                  <span class="n">Wiremock</span> <span class="n">instance</span><span class="o">.</span> <span class="n">Defaults</span> <span class="n">to</span> <span class="mi">10000</span>
</span><span class='line'>                                  <span class="o">(</span><span class="k">default</span><span class="o">:</span> <span class="mi">10000</span><span class="o">)</span>
</span><span class='line'> <span class="o">-</span><span class="n">s</span> <span class="o">(--</span><span class="n">stubs</span><span class="o">)</span> <span class="n">VAL</span>               <span class="o">:</span> <span class="n">Comma</span> <span class="n">separated</span> <span class="n">list</span> <span class="n">of</span> <span class="n">Ivy</span> <span class="n">representation</span> <span class="n">of</span>
</span><span class='line'>                                  <span class="n">jars</span> <span class="n">with</span> <span class="n">stubs</span><span class="o">.</span> <span class="n">Eg</span><span class="o">.</span> <span class="nl">groupid:</span><span class="n">artifactid1</span><span class="o">,</span><span class="n">group</span>
</span><span class='line'>                                  <span class="nl">id2:artifactid2:</span><span class="n">classifier</span>
</span><span class='line'> <span class="o">-</span><span class="n">sr</span> <span class="o">(--</span><span class="n">stubRepositoryRoot</span><span class="o">)</span> <span class="n">VAL</span> <span class="o">:</span> <span class="n">Location</span> <span class="n">of</span> <span class="n">a</span> <span class="n">Jar</span> <span class="n">containing</span> <span class="n">server</span> <span class="n">where</span> <span class="n">you</span>
</span><span class='line'>                                  <span class="n">keep</span> <span class="n">your</span> <span class="nf">stubs</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">g</span><span class="o">.</span> <span class="nl">http:</span><span class="c1">//nexus.net/content</span>
</span><span class='line'>                                  <span class="s">/repositories/</span><span class="n">repository</span><span class="o">)</span>
</span><span class='line'> <span class="o">-</span><span class="n">ss</span> <span class="o">(--</span><span class="n">stubsSuffix</span><span class="o">)</span> <span class="n">VAL</span>        <span class="o">:</span> <span class="n">Suffix</span> <span class="k">for</span> <span class="n">the</span> <span class="n">jar</span> <span class="n">containing</span> <span class="n">stubs</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">g</span><span class="o">.</span>
</span><span class='line'>                                  <span class="s1">&#39;stubs&#39;</span> <span class="k">if</span> <span class="n">the</span> <span class="n">stub</span> <span class="n">jar</span> <span class="n">would</span> <span class="n">have</span> <span class="n">a</span> <span class="s1">&#39;stubs&#39;</span>
</span><span class='line'>                                  <span class="n">classifier</span> <span class="k">for</span> <span class="nl">stubs:</span> <span class="n">foobar</span><span class="o">-</span><span class="n">stubs</span> <span class="o">).</span>
</span><span class='line'>                                  <span class="n">Defaults</span> <span class="n">to</span> <span class="s1">&#39;stubs&#39;</span> <span class="o">(</span><span class="k">default</span><span class="o">:</span> <span class="n">stubs</span><span class="o">)</span>
</span><span class='line'> <span class="o">-</span><span class="n">wo</span> <span class="o">(--</span><span class="n">workOffline</span><span class="o">)</span>            <span class="o">:</span> <span class="n">Switch</span> <span class="n">to</span> <span class="n">work</span> <span class="n">offline</span><span class="o">.</span> <span class="n">Defaults</span> <span class="n">to</span> <span class="s1">&#39;false&#39;</span>
</span><span class='line'>                                  <span class="o">(</span><span class="k">default</span><span class="o">:</span> <span class="kc">false</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can run that main class from IDE or build yourself a fat JAR. To do that just call the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">stub</span><span class="o">-</span><span class="n">runner</span><span class="o">-</span><span class="nl">root:</span><span class="n">stub</span><span class="o">-</span><span class="nl">runner:</span><span class="n">shadowJar</span> <span class="o">-</span><span class="n">PfatJar</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the <code>build/lib</code> there will be a fat JAR with classifier <code>fatJar</code> waiting for you to execute.</p>

<p>Coming back to our example once the fat JAR is built I would just call the following command the retrieve the stubs of <em>service3</em> and <em>service4</em> from the Maven repository available at <code>http://toomuchcoding.com</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="n">stub</span><span class="o">-</span><span class="n">runner</span><span class="o">-</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">4</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="o">-</span><span class="n">fatJar</span><span class="o">.</span><span class="na">jar</span> <span class="o">-</span><span class="n">sr</span> <span class="nl">http:</span><span class="c1">//toomuchcoding.com -s com.toomuchcoding:service3:stubs,com.toomuchcoding.service4</span>
</span></code></pre></td></tr></table></div></figure>


<h4>When to use it?</h4>

<p>Running <em>Stub Runner</em> as a main class makes most sense when you&rsquo;re running some fast smoke tests on a deployed application where you don&rsquo;t want to download and run all the collaborators of that application. For more rationale behind such an approach you can check my article about <a href="http://toomuchcoding.com/blog/2015/09/27/microservice-deployment/">Microservice Deployment</a></p>

<h3>Stub Runner JUnit Rule</h3>

<h4>How to use it?</h4>

<p>You can use the <em>Stub Runner&rsquo;s</em> JUnit rule to automatically download and run the stubs during your tests. The <code>AccurestRule</code> implements the <code>StubFinder</code> interface thus you can easily find the URLs of the services that you&rsquo;re interested in.</p>

<p>This is how you could do it with Spock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">SomeSpec</span> <span class="kd">extends</span> <span class="n">Specification</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ClassRule</span> <span class="nd">@Shared</span> <span class="n">AccurestRule</span> <span class="n">rule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AccurestRule</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">repoRoot</span><span class="o">(</span><span class="s1">&#39;http://toomuchcoding.com&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">downloadStub</span><span class="o">(</span><span class="s2">&quot;com.toomuchcoding&quot;</span><span class="o">,</span> <span class="s2">&quot;service3&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">downloadStub</span><span class="o">(</span><span class="s2">&quot;com.toomuchcoding:service4&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="s1">&#39;should do something useful when service3 is called&#39;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nl">given:</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">service3Url</span> <span class="o">=</span> <span class="n">rule</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s1">&#39;com.toomuchcoding&#39;</span><span class="o">,</span> <span class="s1">&#39;service3&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="nl">expect:</span>
</span><span class='line'>            <span class="n">somethingUseful</span><span class="o">(</span><span class="n">service3Url</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="s1">&#39;should do something even more useful when service4 is called&#39;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nl">given:</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">service4Url</span> <span class="o">=</span> <span class="n">rule</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s1">&#39;service4&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="nl">expect:</span>
</span><span class='line'>            <span class="n">somethingMoreUseful</span><span class="o">(</span><span class="n">service4Url</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or with plain Java JUnit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ClassRule</span> <span class="kd">public</span> <span class="kd">static</span> <span class="n">AccurestRule</span> <span class="n">rule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AccurestRule</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">repoRoot</span><span class="o">(</span><span class="s2">&quot;http://toomuchcoding.com&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">downloadStub</span><span class="o">(</span><span class="s2">&quot;com.toomuchcoding&quot;</span><span class="o">,</span> <span class="s2">&quot;service3&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">downloadStub</span><span class="o">(</span><span class="s2">&quot;com.toomuchcoding:service4&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_do_something_useful_when_service3_is_called</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">service3Url</span> <span class="o">=</span> <span class="n">rule</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s2">&quot;com.toomuchcoding&quot;</span><span class="o">,</span> <span class="s2">&quot;service3&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">somethingUseful</span><span class="o">(</span><span class="n">service3Url</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_do_something_even_more_useful_when_service4_is_called</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">service4Url</span> <span class="o">=</span> <span class="n">rule</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s2">&quot;service4&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">somethingMoreUseful</span><span class="o">(</span><span class="n">service4Url</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>When to use it?</h4>

<p>You can use this rule in any place you want to if we don&rsquo;t provide any integration with an existing framework.</p>

<h3>Stub Runner Spring</h3>

<h4>How to use it?</h4>

<p>You can use the <em>Stub Runner&rsquo;s</em> Spring configuration to download the stubs of your collaborators and run the WireMock server upon Spring context booting. We&rsquo;re providing the <code>StubRunnerConfiguration</code> that you can import in your tests. In that configuration we&rsquo;re registering a <code>StubFinder</code> bean that you can autowire in your tests.</p>

<p>Having the following <code>application.yaml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">stubrunner.stubs.repository.root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://toomuchcoding.com</span>
</span><span class='line'><span class="l-Scalar-Plain">stubrunner.stubs.ids</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">com.toomuchcoding:service3:stubs,com.toomuchcoding.service4</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is how you could do it with Spock</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">Config</span><span class="o">,</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">SpringApplicationContextLoader</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">StubRunnerConfigurationSpec</span> <span class="kd">extends</span> <span class="n">Specification</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span> <span class="n">StubFinder</span> <span class="n">stubFinder</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="s1">&#39;should do something useful when service3 is called&#39;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">given:</span>
</span><span class='line'>          <span class="n">URL</span> <span class="n">service3Url</span> <span class="o">=</span> <span class="n">stubFinder</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s1">&#39;com.toomuchcoding&#39;</span><span class="o">,</span> <span class="s1">&#39;service3&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="nl">expect:</span>
</span><span class='line'>          <span class="n">somethingUseful</span><span class="o">(</span><span class="n">service3Url</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="s1">&#39;should do something even more useful when service4 is called&#39;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">given:</span>
</span><span class='line'>          <span class="n">URL</span> <span class="n">service4Url</span> <span class="o">=</span> <span class="n">stubFinder</span><span class="o">.</span><span class="na">findStubUrl</span><span class="o">(</span><span class="s1">&#39;service4&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="nl">expect:</span>
</span><span class='line'>          <span class="n">somethingMoreUseful</span><span class="o">(</span><span class="n">service4Url</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Configuration</span>
</span><span class='line'>  <span class="nd">@Import</span><span class="o">(</span><span class="n">StubRunnerConfiguration</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@EnableAutoConfiguration</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>When to use it?</h4>

<p>In your tests if you have Spring and don&rsquo;t have Spring Cloud. Also you can add it in compile time (of course you would have to add some Spring profiles so as not to run it on production) to profit from a &ldquo;developer&rdquo; mode of running microservices. That means that if you boot up your application to click around it - all the stubs around you would have already been downloaded and started.</p>

<h3>Stub Runner Spring Cloud</h3>

<h4>How to use it?</h4>

<p>You can use the <em>Stub Runner&rsquo;s</em> Spring Cloud configuration to profit from the stubbed collaborators when using Spring Cloud&rsquo;s abstractions over service discovery and when you&rsquo;re using Netflix Ribbon. <em>Stub Runner Spring Cloud</em> configuration is an <code>AutoConfiguration</code> so it&rsquo;s automatically started for you.</p>

<p>Let&rsquo;s assume that you&rsquo;re referring to <em>service3</em> as <code>service3</code> in your code and to <em>service4</em> as <code>shouldMapThisNameToService4</code>. That means that you&rsquo;re using for example the <code>@LoadBalanced</code> <code>RestTemplate</code> in the following way (don&rsquo;t use field injection as I do in this example!!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span> <span class="nd">@LoadBalanced</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSth</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// code...</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">service3Response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="s1">&#39;http://service3/name&#39;</span><span class="o">,</span> <span class="n">String</span><span class="o">)</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">service4Response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="s1">&#39;http://shouldMapThisNameToService4/name&#39;</span><span class="o">,</span> <span class="n">String</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">// more code...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the service Id that you&rsquo;re using to call other services maps exactly to the name of the artifact Id in a Maven repository then you&rsquo;re lucky and don&rsquo;t have to do anything to find your running stubs. If however that&rsquo;s not the case - don&rsquo;t worry, you&rsquo;ll just have to map it yourself.</p>

<p>The <code>stubrunner.stubs.idsToServiceIds</code> property is the root path to a map in which the <em>key</em> is the <em>artifactID</em> of the downloaded stub and the <em>value</em> is the <em>serviceId</em> used in the code.</p>

<p>Having the following <code>application.yaml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">stubrunner.stubs.repository.root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://toomuchcoding.com</span>
</span><span class='line'><span class="l-Scalar-Plain">stubrunner.stubs.ids</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">com.toomuchcoding:service3:stubs,com.toomuchcoding.service4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">stubrunner.stubs.idsToServiceIds</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">service4</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">shouldMapThisNameToService4</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is how you could do it with Spock</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">Config</span><span class="o">,</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">SpringApplicationContextLoader</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">StubRunnerConfigurationSpec</span> <span class="kd">extends</span> <span class="n">Specification</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span> <span class="n">SomeClass</span> <span class="n">someClass</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="s1">&#39;should not explode&#39;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">when:</span>
</span><span class='line'>          <span class="n">someClass</span><span class="o">.</span><span class="na">doSth</span><span class="o">()</span>
</span><span class='line'>      <span class="nl">expect:</span>
</span><span class='line'>          <span class="n">noExceptionThrown</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Configuration</span>
</span><span class='line'>  <span class="nd">@EnableAutoConfiguration</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>When to use it?</h4>

<p>When you&rsquo;re using Spring Cloud. You can profit from <code>Stub Runner Spring Cloud</code> also in &ldquo;developer&rdquo; mode as presented in the <code>Stub Runner Spring</code> section.</p>

<h3>Additional Configuration Options</h3>

<p>You can set the default value of the Maven repository by means of a system property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">Dstubrunner</span><span class="o">.</span><span class="na">stubs</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">root</span><span class="o">=</span><span class="nl">http:</span><span class="c1">//your.maven.repo.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>The list of configurable properties contains:</p>

<table>
<thead>
<tr>
<th> Name </th>
<th> Default value </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> stubrunner.port.range.min </td>
<td> 10000 </td>
<td> Minimal value of a port for a WireMock server </td>
</tr>
<tr>
<td> stubrunner.port.range.max </td>
<td> 15000 </td>
<td> Maximum value of a port for a WireMock server </td>
</tr>
<tr>
<td> stubrunner.stubs.repository.root </td>
<td>  </td>
<td> Address to your M2 repo (will point to local M2 repo if none is provided) </td>
</tr>
<tr>
<td> stubrunner.stubs.classifier </td>
<td> stubs </td>
<td> Default classifier for the JARs containing stubs </td>
</tr>
<tr>
<td> stubrunner.work-offline </td>
<td> false </td>
<td> Should try to connect to any repo to download stubs (useful if there&rsquo;s no internet) </td>
</tr>
<tr>
<td> stubrunner.stubs </td>
<td> </td>
<td> Default comma separated list of stubs to download </td>
</tr>
</tbody>
</table>


<h2>Summary</h2>

<p><em>Stub Runner</em>:</p>

<ul>
<li>Has already proven to be a very useful tool when doing CDC.</li>
<li>Was battle tested and more companies are declaring their interest in using it.</li>
<li>Helps you produce an API that should make both sides (server and the client) equally happy (or unhappy but still they&rsquo;re both equal in their emotions ;) ).</li>
<li>Is language / technology agnostic - you can run it as a fat JAR, use it with Spring, Guice or whatever you want.</li>
<li>Helps you speed up the feedback cycle both from the API design and the compatibility perspective.</li>
</ul>


<h2>Links</h2>

<ul>
<li><a href="https://github.com/Codearte/accurest">AccuREST Github Repository</a></li>
<li><a href="https://github.com/Codearte/accurest/wiki/8.-Stub-Runner">Stub Runner WIKI</a></li>
<li><a href="https://gitter.im/Codearte/accurest">AccuREST Gitter</a></li>
<li><a href="https://github.com/Codearte/accurest-maven-plugin">AccuREST Maven Plugin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert 0.3.0 Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/03/27/json-assert-0-dot-3-0-released/"/>
    <updated>2016-03-27T23:17:21+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/03/27/json-assert-0-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>I&rsquo;m pleased to announce that JSON Assert version 0.3.0 got released! The following features have been added</p>

<ul>
<li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/6">Building String JSON Path</a></li>
<li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/7">Pass fields as array of Strings</a></li>
</ul>


<p>and in 0.2.2 the <a href="https://github.com/marcingrzejszczak/jsonassert/issues/5">annoying warning message got removed</a></p>

<!-- more -->


<h2>Building String JSON Path</h2>

<p>Writing JSON Paths to assert JSON is no fun at all&hellip; That&rsquo;s why JSON Assert was created in the first place.
One doesn&rsquo;t always want to use this library to perform assertions though. But what one wants to profit from
is the fluent interface to create the JSON Path expression.</p>

<p>That&rsquo;s why with 0.3.0 you can use the new class called <code>JsonPath</code>. It has a single static method <code>builder()</code>
with which you can&hellip; well&hellip; build the JSON Path. Remember to call <code>jsonPath()</code> to get its String value.</p>

<p>So for instance running this code:</p>

<p><code>JsonPath.builder().field("some").field("nested").field("anothervalue").isEqualTo(4).jsonPath()</code></p>

<p>would result in creating the following String JSON Path representation:</p>

<p><code>$.some.nested[?(@.anothervalue == 4)]</code></p>

<p>Other examples:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JsonPath.builder().field("some").field("nested").array("withlist").contains("name").isEqualTo("name1").jsonPath() === '''$.some.nested.withlist[*][?(@.name == 'name1')]'''
</span><span class='line'>JsonPath.builder().field("some").field("nested").field("json").isEqualTo("with \"val'ue").jsonPath() === '''$.some.nested[?(@.json == 'with "val\\'ue')]'''
</span><span class='line'>JsonPath.builder().field("some", "nested", "json").isEqualTo("with \"val'ue").jsonPath() === '''$.some.nested[?(@.json == 'with "val\\'ue')]'''</span></code></pre></td></tr></table></div></figure>


<h2>Pass fields as array of Strings</h2>

<p>This is a small, handy feature that allows you to write less code. Often you iterate over a JSON that has plenty of fields. With the 0.3.0 release
instead of writing:</p>

<p><code>assertThat(json).field("some").field("nested").field("json").isEqualTo("with \"val'ue")</code></p>

<p>you can write</p>

<p><code>assertThat(json1).field("some", "nested", "json").isEqualTo("with \"val'ue")</code></p>

<p>You get a method that allows you to traverse the JSON fields by passing an array of field names.</p>

<h2>Contact</h2>

<p>Remember that JSON Assert has its own <a href="https://gitter.im/marcingrzejszczak/jsonassert">Gitter channel</a> so in case of questions do not hesitate to contact me there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Sleuth RC1 Deployed]]></title>
    <link href="http://toomuchcoding.com/blog/2016/03/25/spring-cloud-sleuth-rc1-deployed/"/>
    <updated>2016-03-25T14:18:22+01:00</updated>
    <id>http://toomuchcoding.com/blog/2016/03/25/spring-cloud-sleuth-rc1-deployed</id>
    <content type="html"><![CDATA[<p>On the 24.03.2016 we&rsquo;ve managed to move our <a href="https://spring.io/blog/2016/03/24/spring-cloud-brixton-rc1-is-now-available">release train called Brixton to the next station: RC1</a>.
I&rsquo;m really happy about this cause it cost us a lot of energy but it was worth it!</p>

<p>I&rsquo;m recently mostly focusing on the <a href="http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">Spring Cloud Sleuth project</a> and actually quite gigantic changes happened there since the M5 release. In this short post I&rsquo;ll show you the rationale and describe briefly the features related to span naming and customizations related to span propagation.</p>

<!-- more -->


<h2>What is Spring Cloud Sleuth?</h2>

<p>For those who don&rsquo;t know what Spring Cloud Sleuth is - it&rsquo;s a library that implements a distributed tracing solution for Spring Cloud. You can check its code at <a href="https://github.com/spring-cloud/spring-cloud-sleuth">Github</a>.</p>

<p>We&rsquo;re also trying to be aligned with the concepts, terminology and approaches present in the <a href="http://opentracing.io/">OpenTracing Project</a>.</p>

<h2>Distributed tracing terminology</h2>

<p>I&rsquo;ll quote the <a href="http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">documentation</a> to present some of the basic concepts of distributed tracing.</p>

<blockquote><p><em>Span</em>: The basic unit of work. For example, sending an RPC is a new span, as is sending a response to an RPC. Span’s are identified by a unique 64-bit ID for the span and another 64-bit ID for the trace the span is a part of. Spans also have other data, such as descriptions, timestamped events, key-value annotations (tags), the ID of the span that caused them, and process ID’s (normally IP address).</p>

<p>Spans are started and stopped, and they keep track of their timing information. Once you create a span, you must stop it at some point in the future.</p>

<p><em>Trace</em>: A set of spans forming a tree-like structure. For example, if you are running a distributed big-data store, a trace might be formed by a put request.</p>

<p><em>Annotation</em>: is used to record existence of an event in time. Some of the core annotations used to define the start and stop of a request are:</p>

<ul>
<li><p><em>cs</em> - Client Sent - The client has made a request. This annotation depicts the start of the span.</p></li>
<li><p><em>sr</em> - Server Received - The server side got the request and will start processing it. If one subtracts the cs timestamp from this timestamp one will receive the network latency.</p></li>
<li><p><em>ss</em> - Server Sent - Annotated upon completion of request processing (when the response got sent back to the client). If one subtracts the sr timestamp from this timestamp one will receive the time needed by the server side to process the request.</p></li>
<li><p><em>cr</em> - Client Received - Signifies the end of the span. The client has successfully received the response from the server side. If one subtracts the cs timestamp from this timestamp one will receive the whole time needed by the client to receive the response from the server.</p></li>
</ul>
</blockquote>

<p>Ok since now we&rsquo;re on the same page with the terminology let&rsquo;s see what&rsquo;s new in Sleuth.</p>

<h2>Span creation and naming</h2>

<h3>Rationale</h3>

<p>A really big problem that is there in the distributed tracing world is the issue related to naming spans. Actually that topic can be looked at from two angles.</p>

<p>First one is related to what the name of the span should look like. Should be a long and descriptive name or quite the contrary? As we write in the documentation:</p>

<blockquote><p>The name should be low cardinality (e.g. not include identifiers).</p></blockquote>

<p>Finding the name for the span is not that big of a problem from library&rsquo;s perspective. You just pass on to a span whatever the user provides. But what about the situations in which some operation is deferred in time? Or scheduled at certain intervals?</p>

<p>Second one is related to a bigger issue: for the sake of consistency of passing tracing data, should we enforce creating spans? Should we be <em>eager</em> with that or allow the user to control span creation? Cause in that way we can have a problem how to name this artificial instance.</p>

<p>For RC1 we&rsquo;ve decided that we will be eager in creating span names - but <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/180">we will come back to the topic in the future releases</a>.</p>

<h3>Naming spans</h3>

<p>Ok so we know the why, now let&rsquo;s move to the how&hellip; There is quite a lot of instrumentation going on in Sleuth so sometimes the names of spans could sound artificial (e.g. <em>async</em> for asynchronous operations). When talking about runnables and callables often you&rsquo;re dealing with code similar to this one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Runnable runnable = new Runnable() {
</span><span class='line'>  @Override public void run() {
</span><span class='line'>      // perform logic
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>Future&lt;?&gt; future = executorService.submit(runnable);
</span><span class='line'>// ... some additional logic ...
</span><span class='line'>future.get();</span></code></pre></td></tr></table></div></figure>


<p>What the <code>Runnable</code> is an operation that you would like to wrap in a span. What should be the name of that span? How can you pass it to the <code>Tracer</code> so that the span name is set?</p>

<p>To answer those issues we&rsquo;ve introduced two approaches</p>

<ul>
<li>a <code>@SpanName</code> annotation for an explicit class that implements <code>Runnable</code> or <code>Callable</code></li>
<li><code>toString()</code> method resolution of an anonymous instance of either of those interfaces</li>
</ul>


<p>Most likely in the future releases <code>@SpanName</code> or its modification will be used more heavily to provide explicit names of spans.</p>

<p>Anyways examples could look like those in the documentation. Example for <code>@SpanName</code> annotated class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@SpanName("calculateTax")
</span><span class='line'>class TaxCountingRunnable implements Runnable {
</span><span class='line'>
</span><span class='line'>  @Override public void run() {
</span><span class='line'>      // perform logic
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and an anonymous instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new TraceRunnable(tracer, spanNamer, new Runnable() {
</span><span class='line'>  @Override public void run() {
</span><span class='line'>      // perform logic
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override public String toString() {
</span><span class='line'>      return "calculateTax";
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Both will have the same span name. Remember that both <code>Runnables</code> should be wrapped in a <code>TraceRunnable</code> instance.</p>

<h3>Customization of span propagation</h3>

<p>It&rsquo;s pretty obvious that there&rsquo;s a lot of companies that have already created some form of distributed tracing instrumentation. In Spring Cloud Sleuth we&rsquo;re expecting the tracing headers to be containing certain names like <code>X-B3-TraceId</code> for the trace id containing headers or <code>X-B3-SpanId</code> for the span related one.</p>

<p>One of the first issues that we&rsquo;ve created was related to <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/19">support configurable header names</a> but actually we&rsquo;ve developed it quite late. Anyways with RC1 it&rsquo;s possible to customize Sleuth in such a way that it&rsquo;s compatible with your system&rsquo;s nomenclature. Let&rsquo;s define two terms before we go any further - <code>Injector</code> and <code>Extractor</code>.</p>

<h4>Injectors</h4>

<p>In Spring Cloud Sleuth an <code>Injector</code> is actually a functional interface called <code>SpanInjector</code>. It has the following method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void inject(Span span, T carrier);</span></code></pre></td></tr></table></div></figure>


<p>Its purpose is to take whatever is necessary from a <code>span</code> and
inject it to the <code>carrier</code>. Let&rsquo;s assume that in your system you don&rsquo;t set the headers for trace id with the name <code>X-B3-TraceId</code> but you call it <code>correlationId</code> and <code>mySpanId</code> for <code>X-B3-SpanId</code>. Then you would have to override the behavior of Sleuth by registering a custom implementation of the <code>SpanInjector</code>. Let&rsquo;s look at the following snippets from the documentation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CustomHttpServletResponseSpanInjector implements SpanInjector&lt;HttpServletResponse&gt; {
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void inject(Span span, HttpServletResponse carrier) {
</span><span class='line'>      carrier.addHeader("correlationId", Span.idToHex(span.getTraceId()));
</span><span class='line'>      carrier.addHeader("mySpanId", Span.idToHex(span.getSpanId()));
</span><span class='line'>      // inject the rest of Span values to the header
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note that this approach will work with Zipkin only if your values that you&rsquo;re passing are Zipkin-compatible. That means that the IDs are 64bit numbers.</p>

<p>Also you may wonder why do we convert values using <code>Span.idToHex</code>. We&rsquo;ve decided that we want the values of ids in the logs and in the message headers to be the very same values as the one that you can later see in Zipkin. That way you can just copy the value and put it into Zipkin to debug your system.</p>

<p>Once you have the <code>SpanInjector</code> you have to register it as a bean with <code>@Primary</code> annotation as presented below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>@Primary
</span><span class='line'>SpanInjector&lt;HttpServletResponse&gt; customHttpServletResponseSpanInjector() {
</span><span class='line'>  return new CustomHttpServletResponseSpanInjector();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Extractors</h4>

<p>In Spring Cloud Sleuth an <code>Extractor</code> is actually a functional interface called <code>SpanExtractor</code>. It has the following method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Span joinTrace(T carrier);</span></code></pre></td></tr></table></div></figure>


<p>Its purpose is to create a Span from the provided carrier. Let&rsquo;s have the same assumption as with the <code>SpanInjector</code> and let&rsquo;s consider a case where traceId header is named <code>correlationId</code> and spanId header is <code>mySpanId</code>. Then we customize the Spring context by providing our own implementation of the <code>SpanExtractor</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CustomHttpServletRequestSpanExtractor implements SpanExtractor&lt;HttpServletRequest&gt; {
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public Span joinTrace(HttpServletRequest carrier) {
</span><span class='line'>      long traceId = Span.hexToId(carrier.getHeader("correlationId"));
</span><span class='line'>      long spanId = Span.hexToId(carrier.getHeader("mySpanId"));
</span><span class='line'>      // extract all necessary headers
</span><span class='line'>      Span.SpanBuilder builder = Span.builder().traceId(traceId).spanId(spanId);
</span><span class='line'>      // build rest of the Span
</span><span class='line'>      return builder.build();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Again note that we&rsquo;re considering that the values are Zipkin compatible (64bit values for ids). Also note that we&rsquo;ve assumed that the ids are sent in a hexadecimal form like they are presented in the Zipkin UI. That&rsquo;s why we used the <code>Span.hexToId</code> method to convert it back to long again.</p>

<h2>Summary</h2>

<p>In this very short post you could see two quite big features available in the RC1 release. You can check <a href="http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html">Spring Cloud Sleuth documentation</a> for more information about the integrations and configurations of Sleuth. Actually you can check all the things that have changed in the RC1 release by checking the <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues?q=is%3Aissue+is%3Aclosed+milestone%3A1.0.0.RC1">closed issues</a> and <a href="https://github.com/spring-cloud/spring-cloud-sleuth/pulls?q=is%3Apr+milestone%3A1.0.0.RC1+is%3Aclosed">merged PRs</a>.</p>

<p>In case of any questions do not hesitate to ping us on the <a href="https://gitter.im/spring-cloud/spring-cloud-sleuth">Gitter channel</a> or <a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues">file an issue on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert 0.2.1 Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/03/11/json-assert-0-dot-2-1-released/"/>
    <updated>2016-03-11T23:33:30+01:00</updated>
    <id>http://toomuchcoding.com/blog/2016/03/11/json-assert-0-dot-2-1-released</id>
    <content type="html"><![CDATA[<p>I&rsquo;m pleased to announce that JSON Assert version 0.2.1 got released! The following features have been added</p>

<ul>
<li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/2">AssertJ support</a></li>
<li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/3">Bumped up JSON Path to 2.2.0</a></li>
<li><a href="https://github.com/marcingrzejszczak/jsonassert/issues/4">Fixed a bug related to chars escaping</a></li>
<li>I&rsquo;ve changed README.md to README.ascidoc</li>
</ul>


<!-- more -->


<h1>Breaking changes</h1>

<p>I&rsquo;ve changed the groupId and packages of the library so you have to do the migration of both.</p>

<h2>GroupId</h2>

<p>Was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.blogspot.toomuchcoding</span></code></pre></td></tr></table></div></figure>


<p>Is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.toomuchcoding.jsonassert</span></code></pre></td></tr></table></div></figure>


<h2>Package</h2>

<p>Was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.blogspot.toomuchcoding.jsonassert</span></code></pre></td></tr></table></div></figure>


<p>Is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.toomuchcoding.jsonassert</span></code></pre></td></tr></table></div></figure>


<h1>BTW</h1>

<p>I&rsquo;ve created a new page on the website <a href="http://toomuchcoding.com/oss/">OSS</a>. You can check out which OSS projects I&rsquo;ve created or have contributed sth there.
If you don&rsquo;t care - just ignore it ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Blogspot Welcome Octopress!]]></title>
    <link href="http://toomuchcoding.com/blog/2016/03/03/goodbye-blogspot-welcome-octopress/"/>
    <updated>2016-03-03T22:53:26+01:00</updated>
    <id>http://toomuchcoding.com/blog/2016/03/03/goodbye-blogspot-welcome-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;m more than happy to announce that I&rsquo;ve finally migrated from Blogspot to a decent
blogging technology - Octopress! Thanks to <a href="http://tomaszdziurko.pl/">Tomek Dziurko</a> who
was the one that suggested to choose that technology.</p>

<p>Also as you can see I&rsquo;ve finally bought a domain for the <em>Too Much Coding blog</em> which is
<a href="http://toomuchcoding.com">http://toomuchcoding.com</a>. I don&rsquo;t even know why I&rsquo;m
writing it since you can see the address in your browser ;) You can also send me an email
at <em>blog (at) toomuchcoding.com</em>.</p>

<p>Even though initially I had some doubts about choosing Octopress I have to admit that
it seems like an awesome technology and you should definitely give it a try!</p>

<p>P.S.
We&rsquo;re looking for sponsors for the upcoming <a href="http://warsaw.gr8days.pl">Warsaw GR8 Day Conference</a> (19.03.2016).
Over 60 people have already registered! Contact us to be a part of this gr8 event!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert Lib Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/02/27/json-assert-lib-released/"/>
    <updated>2016-02-27T14:20:00-08:00</updated>
    <id>http://toomuchcoding.com/blog/2016/02/27/json-assert-lib-released</id>
    <content type="html"><![CDATA[<div class='post'>
I'm really happy to present the <a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>&nbsp;-&nbsp;over-the-weekend project that came out from the <a href="https://github.com/Codearte/accurest">AccuREST library</a>. This post will describe the rationale behind creating this tool and how to use it.<br /><br /><br /><a name='more'></a>
<!--more-->
<br /><br /><h4>Rationale</h4>In AccuREST (the Consumer Driven Contracts implementation library) we're creating tests of the server side. For more information on what is AccuREST and what Consumer Driven Contracts is check the <a href="https://github.com/Codearte/accurest/wiki">AccurREST wiki</a>. Anyways, we're checking if the response from the server matches the one described in the contract.<br /><br />So having such a Groovy DSL:<br /><br /><pre style="background: #fff; color: black;">io.codearte.accurest.dsl.GroovyDsl<span style="color: #0100b6; font-weight: 700;">.</span>make {<br />    priority <span style="color: #cd0000; font-style: italic;">1</span><br />    request {<br />        method <span style="color: #d80800;">'POST'</span><br />        url <span style="color: #d80800;">'/users/password'</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">email</span>: $(stub(optional(regex(email()))), test(<span style="color: #d80800;">'abc@abc.com'</span>)),<br />                <span style="color: #c5060b; font-style: italic;">callback_url</span>: $(stub(regex(hostname())), test(<span style="color: #d80800;">'http://partners.com'</span>))<br />        )<br />    }<br />    response {<br />        status <span style="color: #cd0000; font-style: italic;">404</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">code</span>: value(stub(<span style="color: #d80800;">"123123"</span>), test(optional(<span style="color: #d80800;">"123123"</span>))),<br />                <span style="color: #c5060b; font-style: italic;">message</span>: <span style="color: #d80800;">"User not found by email = [<span style="color: #26b31a;">${value(test(regex(email())), stub('not.existing@user.com'))}</span>]"</span><br />        )<br />    }<br />}<br /></pre><br />Resulted in creation of the following server side response verification<br /><br /><pre style="background: #fff; color: black;"><span style="color: #c5060b; font-style: italic;">given</span>:<br />  def request <span style="color: #0100b6; font-weight: 700;">=</span> given()<br />    .header(<span style="color: #d80800;">'Content-Type'</span>, <span style="color: #d80800;">'application/json'</span>)<br />    .body(<span style="color: #d80800;">'{"email":"abc@abc.com","callback_url":"http://partners.com"}'</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">when</span>:<br />  def response <span style="color: #0100b6; font-weight: 700;">=</span> given()<span style="color: #0100b6; font-weight: 700;">.</span>spec(request)<br />    .post(<span style="color: #d80800;">"/users/password"</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">then</span>:<br />  response<span style="color: #0100b6; font-weight: 700;">.</span>statusCode <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #cd0000; font-style: italic;">404</span><br />  response<span style="color: #0100b6; font-weight: 700;">.</span>header(<span style="color: #d80800;">'Content-Type'</span>)  <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #d80800;">'application/json'</span><br /> <span style="color: #c5060b; font-style: italic;">and</span>:<br />  DocumentContext parsedJson <span style="color: #0100b6; font-weight: 700;">=</span> JsonPath<span style="color: #0100b6; font-weight: 700;">.</span>parse(response<span style="color: #0100b6; font-weight: 700;">.</span>body<span style="color: #0100b6; font-weight: 700;">.</span>asString())<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /><br /></pre><br />AccuREST users stated that their biggest problem is this part:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /></pre><br />They said that JSON Paths are too difficult for them to read.<br /><br />That's why I've created the&nbsp;<a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>. So that instead of the aforementioned code one gets sth like this:<br /><br /><pre style="background: #fff; color: black;">  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'code'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'123123?'</span>)<br />  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'message'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'</span>);<br /></pre><br /><h4>How to add it to your project</h4><br />If your using Gradle just add (<a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.blogspot.toomuchcoding%22%20a%3A%22jsonassert%22">check the latest version number</a>):<br /><br /><pre style="background: #fff; color: black;"> testCompile `com<span style="color: #0100b6; font-weight: 700;">.</span>blogspot<span style="color: #0100b6; font-weight: 700;">.</span><span style="color: #c5060b; font-style: italic;">toomuchcoding</span>:<span style="color: #c5060b; font-style: italic;">jsonassert</span>:<span style="color: #cd0000; font-style: italic;">0.1</span><span style="color: #cd0000; font-style: italic;">.2</span>`<br /></pre><br />and if Maven just add:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">dependency</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">groupId</span>&gt;</span>com.blogspot.toomuchcoding<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">groupId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">artifactId</span>&gt;</span>jsonassert<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">artifactId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">version</span>&gt;</span>0.1.2<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">version</span>&gt;</span><br /><span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">dependency</span>&gt;</span><br /></pre><h4><br />How to use it</h4><br />Since almost everything in JSON Assert is package scoped you have access to two public classes. One of which is the &nbsp;<span style="font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;"><a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonAssertion.java">JsonAssertion</a></span> class. It gives you a couple of public methods that give you the entry point to the fluent interface of the library.<br /><br />You can check the JavaDocs of the <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonVerifiable.java">JsonVerifiable</a> interface in order to see what kind of methods can be used.<br /><br /><h4>Examples</h4><div><br />Best examples are <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/test/groovy/com/blogspot/toomuchcoding/jsonassert/JsonAssertionSpec.groovy">tests</a>. I'll show you a couple of them here.<br /><br /><br /><b>Example 1</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">[ {<br />                                <span style="color: #d80800;">"some"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}, {<span style="color: #d80800;">"anothernested"</span>: { <span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name3"</span>} }<br />                                        ]<br />                                    }<br />                                }<br />                            },<br />                            {<br />                                <span style="color: #d80800;">"someother"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}<br />                                        ]<br />                                    }<br />                                }<br />                            }<br />                        ]<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$[<span style="color: #0100b6; font-weight: 700;">*</span>].some.nested.withlist[<span style="color: #0100b6; font-weight: 700;">*</span>].anothernested[<span style="color: #0100b6; font-weight: 700;">?</span>(@.name == <span style="color: #d80800;">'name3'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array()<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"some"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"nested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"withlist"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"anothernested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"name"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"name3"</span>)<br /></pre><br /><b>Example 2</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">{<br />    <span style="color: #d80800;">"property1"</span>: [<br />        { <span style="color: #d80800;">"property2"</span>: <span style="color: #d80800;">"test1"</span>},<br />        { <span style="color: #d80800;">"property3"</span>: <span style="color: #d80800;">"test2"</span>}<br />    ]<br />}<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$.property1[<span style="color: #0100b6; font-weight: 700;">*</span>][<span style="color: #0100b6; font-weight: 700;">?</span>(@.property2 == <span style="color: #d80800;">'test1'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"property1"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>contains(<span style="color: #d80800;">"property2"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"test1"</span>)<br /></pre><br /></div><h4>Future plans</h4><br />It would be nice to:<br /><br /><ul><li>integrate with <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li><li>add more <a href="https://github.com/jayway/JsonPath#functions">JSON Path features</a> (functions, filters etc.)</li></ul><div><br /></div><h4>Links</h4><ul><li><a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert</a></li><li><a href="https://github.com/Codearte/accurest/wiki">AccuREST</a></li><li><a href="https://www.youtube.com/watch?v=daafmTYFoDU">Video about AccuREST </a>by <a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li><li><a href="https://github.com/jayway/JsonPath">Jayway JSON Path</a></li><li><a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li></ul><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post on Spring Blog]]></title>
    <link href="http://toomuchcoding.com/blog/2016/01/04/post-on-spring-blog/"/>
    <updated>2016-01-04T09:28:00-08:00</updated>
    <id>http://toomuchcoding.com/blog/2016/01/04/post-on-spring-blog</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />Since December I'm working for Pivotal and the Spring Cloud team. I've just posted my first blog post on the Spring blog. Check it out!<br /><br /><a href="https://spring.io/blog/2016/01/04/testing-spring-cloud-projects">Testing Spring Cloud Projects</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Business Value Gone Wild]]></title>
    <link href="http://toomuchcoding.com/blog/2015/10/16/business-value-gone-wild/"/>
    <updated>2015-10-16T08:58:00-07:00</updated>
    <id>http://toomuchcoding.com/blog/2015/10/16/business-value-gone-wild</id>
    <content type="html"><![CDATA[<div class='post'>
This blog post will not be about microservices, Spring or any technology that I've already talked about in <a href="http://toomuchcoding.blogspot.com/">Too much coding blog</a>. This time it will be my opinion on two subjects<br /><ul><li>the more and more frequent "it's not my problem" approach in the IT industry running in a corporation.&nbsp;</li><li>the "business value" frenzy of the management</li></ul>This article is definitely not a motivational one. Quite frankly, you might get depressed after reading it. Nonetheless, it's better to know how really corporate life sometimes looks like rather than get hit in the face.<br /><br />TL;DR : the more you care in a corporate enterprise the worse for you. Eventually some developers will hate your ideas of quality and standards because they are paid to tap the keys. Your management will fire you for not bringing "business value". The faster you embrace it, the better for you - you'll start searching for a new job sooner.<br /><div><br /><div><a name='more'></a>
<!--more-->
</div><h4>Features are not only functionalities</h4><div><br />Let's define some facts: IT is paid by the business. Business wants features. IT has to deliver features to gain money. That's a fact and our reality. Even if you hear from your managers that "cleaning technical debt is a necessity" what they really think is:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s1600/technical_debt.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="224" src="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s320/technical_debt.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div></div><div><br /></div><div>And actually that's not bizarre - business has no understanding of the technical aspects of the IT work. Here we can discern two types of business people:<br /><ul><li>they don't get technical aspects, but they trust the engineers</li><li>they don't care about technical aspects and they won't listen to any of the programmers' advice</li></ul><br />If you have the latter business people then most likely you're in this situation:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" /></a></div><br />and actually you should be doing such a shift:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s1600/cable_change.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="210" src="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s320/cable_change.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">http://www.technalytical.com/2012/04/aesthetical-cable-management-before-and.html</td></tr></tbody></table>In order to grow faster. What makes me really surprised that continuously the business picks the first option - just add more mess to the existing one without thinking of the consequences.<br /><br />Now for the tricky part. Now change the word "business" to "developer" and everything is still valid.<br /><br />"Delivering a feature" it's not only coding some functions in whatever language you are using. It's not taking a keyboard and pressing the keys to make the functionality work. If this is your approach then you're a key tapper. Tapping keys to get things done.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s1600/dunno.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="231" src="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s320/dunno.jpg" width="320" /></a></div><br /></div><div><br /></div><h4>Programming is more than tapping keys</h4><div><br />I hope that nobody feels offended by this term "key tapper". I'm not trying to be offensive - I'm just describing what I saw in my career. In my opinion there are a couple of different types of IT guys:<br /><br /><ul><li>there are people for whom programming is a passion. They put a lot of energy and effort to make things better</li><li>there are also IT guys for whom programming isn't a passion, but still put (sucessfully) &nbsp;a lot of energy and effort in order to make things better just because they want to be honest and valuable employees (thanks Michal Szostek)</li><li>there are people for whom programming is not a passion and they just come to work and tap the keys&nbsp;</li><li>there are others who would love to do stuff properly but the business is breathing at their necks to do stuff in a bad way because the "deadlines are coming".</li><li>there are positions where people last. They come and simulate work. They lie, talk a lot and delegate work so that there is some impression of progress</li></ul><br />Regardless of the position, if one doesn't focus on quality and just taps in the functionality then:&nbsp;</div><div><ul><li>even if he provides the business feature it might badly influence other people (introducing coupling between modules, breaking encapsulation etc.)</li><li>the functionality might be written in such a way that you will result in the global timeout of the whole system</li><li>you're not thinking about the company standards (<a href="http://www.slideshare.net/MarcinGrzejszczak/4financeit-microservices-092015-kaunas-jug/87?src=clipshare">passing of CorrelationID for instance</a>), that will break the approaches set in the company. This in effect will lead in increased time needed to provide support</li><li>writing the next functionality will take more time than the previous one</li></ul></div><div>Even though it seems to be common knowledge, you can far too often hear something like this:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote>Now imagine that you join a project which is full of such developers and you're asked to fix a bug:<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s1600/new_guy.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s400/new_guy.png" width="267" /></a></div><br /><h4>Technical changes are not bringing money</h4><div><br />We have to educate both the business and the developers: writing features and providing business value is actually a sum of a coded and tested functionality with technical advancement. What are those? Code refactoring, introduction of new approaches, migrations from one way of doing things in one way to another. For example:</div><div><ul><li>version control system (e.g. SVN to Git)</li><li>build system (e.g Maven to Gradle)</li><li>UI framework (e.g. Vaadin to AngularJS)</li><li>library versions (e.g. Spring 3.0 to Spring 4.0)</li><li>going from deployment to application servers to embedded servlet containers (e.g. Glassifsh to embedded JAR with Jetty)</li></ul></div><div>Why do we want these changes to happen? Because they ease our work and enforce standards. Why are standards important?<br /><br /><div style="text-align: center;"><i>"Pick a plug they said, it's gonna be easy, they said"</i></div><br /><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s1600/plugs.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="196" src="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s400/plugs.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">https://abdulinnewzealand.wordpress.com/2012/12/03/new-things-from-my-visit-to-new-zeland/</td></tr></tbody></table>If every team in the company uses different:<br /><br /><ul><li>libraries</li><li>approach to testing</li><li>approach to deployment</li><li>approach to running the application</li></ul><br />Then you can tell your business that they will pay A LOT of money for the support. The learning curve will be gigantic for the newcomers. But hey! It's better to code a new functionality in the meantime right?<br /><br />Seemingly all the developers would like to see the effect of those migrations and standardization. Everybody wants this to happen but who should actually do it? When asked about this you might hear:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote><div>How can we solve this?<br /><br /><b>Stupid idea</b><br /><br />Introduce the following flow of working in IT:</div><div><ul><li>the "coding team" writes a business feature and pushes it to master</li><li>the "clean code team" rewrites the code according to the clean code standards</li><li>the "technical team" introduces the technical standards for the written piece of code</li><li>the "migration team" migrates the code from one approach to another</li></ul><div>The outcome of the cooperation could look like this:</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s1600/bathroom.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s320/bathroom.jpg" width="247" /></a></div><div><br /></div><div><br /></div><div><b>Good idea</b><br /><br />Introduce... caring! Invest a lot of time and effort in educating business and developers that you have to take care of the code quality. Imagine where your company would be if every programmer would focus for 1 hour per day to manage the technical debt. If your managers don't understand the importance of clearing that debt, then you should consider changing jobs cause it's going to get worse with every single push to the repo.<br /><br /></div></div><h4>You are an engineer!</h4><div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s1600/engineer.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s320/engineer.jpg" width="320" /></a></div><br />Developing a feature is not just typing in code that compiles and makes the tests pass. Maybe the constant breathing of the project manager on your neck made you forget about this but you are an engineer. Following <a href="https://en.wikipedia.org/wiki/Engineer">Wikipedia</a>:</div><blockquote class="tr_bq"><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">An&nbsp;</span><b style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">engineer</b><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;is a&nbsp;</span><a href="https://en.wikipedia.org/wiki/Profession" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Profession">professional</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;practitioner of&nbsp;</span><a href="https://en.wikipedia.org/wiki/Engineering" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Engineering">engineering</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">, concerned with applying&nbsp;</span><a class="mw-redirect" href="https://en.wikipedia.org/wiki/Scientific_knowledge" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Scientific knowledge">scientific knowledge</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">,&nbsp;</span><a href="https://en.wikipedia.org/wiki/Mathematics" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Mathematics">mathematics</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">, and&nbsp;</span><a href="https://en.wikipedia.org/wiki/Ingenuity" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Ingenuity">ingenuity</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;to develop solutions for technical, societal and commercial problems. Engineers design materials, structures, and systems while considering the limitations imposed by practicality, regulation, safety, and cost.</span><sup class="reference" id="cite_ref-bls_1-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-bls-1" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[1]</a></sup><sup class="reference" id="cite_ref-nspe_2-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-nspe-2" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[2]</a></sup><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;The word&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">engineer</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;is derived from the&nbsp;</span><a href="https://en.wikipedia.org/wiki/Latin" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Latin">Latin</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;words&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">ingeniare</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;("to contrive, devise") and&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">ingenium</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">("cleverness").</span><sup class="reference" id="cite_ref-3" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-3" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[3]</a></sup><sup class="reference" id="cite_ref-4" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-4" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[4]</a></sup></blockquote><div>So other than telling one again:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote><div>you should consider all of the technical aspect before even writing a single line of code. Then you should say:</div><blockquote class="tr_bq">My schedule is tight but I'll fix the issues that you suggested. I understand that delivering business value means writing a feature and making the technical progress as a company. This is what I'm paid for and what you are referring to is part of my duties.&nbsp;</blockquote>Unfortunately there is one problem with this approach...<br /><br /><h4>Are you an engineer that has a say? You're gonna get fired!</h4><br />Yes, if you start caring in a corporate enterprise you will eventually get fired. Business prefers people who nod their heads and agree to everything. After some time quality becomes a burden for the management. It becomes a cost that doesn't bring "business value".<br /><br />So you will start fighting for the quality because this is the very meaning of your programming life. Deliver quality software that satisfies the business requirements, bearing in mind technical consequences. You will defend your developers against the growing pressure from the business to deliver features at a larger pace. The corporate axe will come closer to your neck with every single fight to defend the very meaning of being an engineer.<br /><br />In the meantime your fellow developers that don't agree with your permanent interference in the key tapping due to buzzwords like "resilience", "fail-fast", "latency" or "tests" will continue to dislike you. They will constantly show their lack of support to what you're doing. Their mediocrity and lack of willingness to stand to what they believe in will allow them to remain in the company for years to come.<br /><br />Then one day you will have to pack your stuff in a box and you will be escorted out of the office because you will get fired. The reason will be simple: "not delivering business value".<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s1600/guillotine.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="230" src="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s320/guillotine.gif" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">But... don't worry! That's actually good. Someone is doing you a favor! In the long run you will definitely profit from being fired. You will gain respect because you stood for your values. You will be able to stand in the mirror, look at yourself and say that you've done everything your power to do things properly with high quality.</div><div class="separator" style="clear: both; text-align: center;"><br /></div><h4>Epilogue</h4><div class="" style="clear: both; text-align: left;"><br /></div><div class="" style="clear: both; text-align: left;">Hopefully my apocalyptic vision is too harsh but that's what I see when talking to people in the industry. There is a light at the end of the tunnel though (and it's not a freight train).&nbsp;</div><div class="" style="clear: both; text-align: left;">There are companies that value good engineers and value quality. If you get fired (or you're getting close to that) just file a CV there. You can be shocked that the very sense of caring and eagerness to learn drastically boosts your chances of getting hired.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div style="text-align: center;"><a href="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s1600/the_end.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="212" src="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s320/the_end.gif" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><h4>Additional reading</h4><div class="" style="clear: both;"><br /><ul><li><a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877">Living in the age of software fuckery</a></li><li><a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/">Don't call yourself a programmer</a></li></ul><br /><br /></div></div></div>
]]></content>
  </entry>
  
</feed>
